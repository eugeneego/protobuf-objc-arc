// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Unittest.pb.h"


@implementation UnittestRoot

static id<PBExtensionField> UnittestRoot_optionalInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalStringExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalGroupExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalNestedMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalForeignMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalImportMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalCordExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedStringExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedGroupExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedNestedMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedForeignMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedImportMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedCordExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultStringExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultCordExtension = nil;
static id<PBExtensionField> UnittestRoot_myExtensionString = nil;
static id<PBExtensionField> UnittestRoot_myExtensionInt = nil;
static id<PBExtensionField> UnittestRoot_packedInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_packedDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_packedBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_packedEnumExtension = nil;
static id<PBExtensionField> TestNestedExtension_test = nil;
static id<PBExtensionField> TestRequired_single = nil;
static id<PBExtensionField> TestRequired_multi = nil;
static PBExtensionRegistry *extensionRegistry = nil;

+ (PBExtensionRegistry *)extensionRegistry
{
  return extensionRegistry;
}

+ (void)initialize {
  if (self == [UnittestRoot class]) {
    UnittestRoot_optionalInt32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:1
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalInt64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:2
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:3
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:4
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:5
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:6
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:7
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:8
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:9
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:10
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalFloatExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensions class]
      fieldNumber:11
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalDoubleExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensions class]
      fieldNumber:12
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalBoolExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensions class]
      fieldNumber:13
      defaultValue:@(NO)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:14
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalBytesExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensions class]
      fieldNumber:15
      defaultValue:nil
      messageOrGroupClass:[NSData class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalGroupExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeGroup
      extendedClass:[TestAllExtensions class]
      fieldNumber:16
      defaultValue:nil
      messageOrGroupClass:[OptionalGroup_extension class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:18
      defaultValue:nil
      messageOrGroupClass:[TestAllTypes_NestedMessage class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:19
      defaultValue:nil
      messageOrGroupClass:[ForeignMessage class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:20
      defaultValue:nil
      messageOrGroupClass:[ImportMessage class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:21
      defaultValue:@(TestAllTypes_NestedEnumFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:22
      defaultValue:@(ForeignEnumForeignFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:23
      defaultValue:@(ImportEnumImportFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringPieceExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:24
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_optionalCordExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:25
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:31
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:32
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:33
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:34
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:35
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:36
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:37
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:38
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:39
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:40
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFloatExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensions class]
      fieldNumber:41
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedDoubleExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensions class]
      fieldNumber:42
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBoolExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensions class]
      fieldNumber:43
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:44
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBytesExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensions class]
      fieldNumber:45
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSData class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedGroupExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeGroup
      extendedClass:[TestAllExtensions class]
      fieldNumber:46
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[RepeatedGroup_extension class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:48
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[TestAllTypes_NestedMessage class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:49
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[ForeignMessage class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportMessageExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:50
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[ImportMessage class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:51
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:52
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:53
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringPieceExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:54
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_repeatedCordExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:55
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:61
      defaultValue:@(41)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:62
      defaultValue:@(42L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:63
      defaultValue:@(43)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:64
      defaultValue:@(44L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensions class]
      fieldNumber:65
      defaultValue:@(-45)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensions class]
      fieldNumber:66
      defaultValue:@(46L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:67
      defaultValue:@(47)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:68
      defaultValue:@(48L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensions class]
      fieldNumber:69
      defaultValue:@(49)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensions class]
      fieldNumber:70
      defaultValue:@(-50L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultFloatExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensions class]
      fieldNumber:71
      defaultValue:@(51.5)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultDoubleExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensions class]
      fieldNumber:72
      defaultValue:@(52000)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultBoolExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensions class]
      fieldNumber:73
      defaultValue:@(YES)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:74
      defaultValue:@"hello"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultBytesExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensions class]
      fieldNumber:75
      defaultValue:[NSData dataWithBytes:"world" length:5]
      messageOrGroupClass:[NSData class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultNestedEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:81
      defaultValue:@(TestAllTypes_NestedEnumBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultForeignEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:82
      defaultValue:@(ForeignEnumForeignBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultImportEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensions class]
      fieldNumber:83
      defaultValue:@(ImportEnumImportBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringPieceExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:84
      defaultValue:@"abc"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_defaultCordExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:85
      defaultValue:@"123"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionString = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestFieldOrderings class]
      fieldNumber:50
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionInt = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestFieldOrderings class]
      fieldNumber:5
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestRoot_packedInt32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestPackedExtensions class]
      fieldNumber:90
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedInt64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestPackedExtensions class]
      fieldNumber:91
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedUint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestPackedExtensions class]
      fieldNumber:92
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedUint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestPackedExtensions class]
      fieldNumber:93
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedSint32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestPackedExtensions class]
      fieldNumber:94
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedSint64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestPackedExtensions class]
      fieldNumber:95
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestPackedExtensions class]
      fieldNumber:96
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestPackedExtensions class]
      fieldNumber:97
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed32Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestPackedExtensions class]
      fieldNumber:98
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed64Extension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestPackedExtensions class]
      fieldNumber:99
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedFloatExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestPackedExtensions class]
      fieldNumber:100
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedDoubleExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestPackedExtensions class]
      fieldNumber:101
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedBoolExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestPackedExtensions class]
      fieldNumber:102
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestRoot_packedEnumExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestPackedExtensions class]
      fieldNumber:103
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    TestNestedExtension_test = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensions class]
      fieldNumber:1002
      defaultValue:@"test"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    TestRequired_single = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:1000
      defaultValue:nil
      messageOrGroupClass:[TestRequired class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    TestRequired_multi = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensions class]
      fieldNumber:1001
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[TestRequired class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry *registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UnittestImportRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}

+ (void)registerAllExtensions:(PBMutableExtensionRegistry *)registry
{
  [registry addExtension:UnittestRoot_optionalInt32Extension];
  [registry addExtension:UnittestRoot_optionalInt64Extension];
  [registry addExtension:UnittestRoot_optionalUint32Extension];
  [registry addExtension:UnittestRoot_optionalUint64Extension];
  [registry addExtension:UnittestRoot_optionalSint32Extension];
  [registry addExtension:UnittestRoot_optionalSint64Extension];
  [registry addExtension:UnittestRoot_optionalFixed32Extension];
  [registry addExtension:UnittestRoot_optionalFixed64Extension];
  [registry addExtension:UnittestRoot_optionalSfixed32Extension];
  [registry addExtension:UnittestRoot_optionalSfixed64Extension];
  [registry addExtension:UnittestRoot_optionalFloatExtension];
  [registry addExtension:UnittestRoot_optionalDoubleExtension];
  [registry addExtension:UnittestRoot_optionalBoolExtension];
  [registry addExtension:UnittestRoot_optionalStringExtension];
  [registry addExtension:UnittestRoot_optionalBytesExtension];
  [registry addExtension:UnittestRoot_optionalGroupExtension];
  [registry addExtension:UnittestRoot_optionalNestedMessageExtension];
  [registry addExtension:UnittestRoot_optionalForeignMessageExtension];
  [registry addExtension:UnittestRoot_optionalImportMessageExtension];
  [registry addExtension:UnittestRoot_optionalNestedEnumExtension];
  [registry addExtension:UnittestRoot_optionalForeignEnumExtension];
  [registry addExtension:UnittestRoot_optionalImportEnumExtension];
  [registry addExtension:UnittestRoot_optionalStringPieceExtension];
  [registry addExtension:UnittestRoot_optionalCordExtension];
  [registry addExtension:UnittestRoot_repeatedInt32Extension];
  [registry addExtension:UnittestRoot_repeatedInt64Extension];
  [registry addExtension:UnittestRoot_repeatedUint32Extension];
  [registry addExtension:UnittestRoot_repeatedUint64Extension];
  [registry addExtension:UnittestRoot_repeatedSint32Extension];
  [registry addExtension:UnittestRoot_repeatedSint64Extension];
  [registry addExtension:UnittestRoot_repeatedFixed32Extension];
  [registry addExtension:UnittestRoot_repeatedFixed64Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed32Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed64Extension];
  [registry addExtension:UnittestRoot_repeatedFloatExtension];
  [registry addExtension:UnittestRoot_repeatedDoubleExtension];
  [registry addExtension:UnittestRoot_repeatedBoolExtension];
  [registry addExtension:UnittestRoot_repeatedStringExtension];
  [registry addExtension:UnittestRoot_repeatedBytesExtension];
  [registry addExtension:UnittestRoot_repeatedGroupExtension];
  [registry addExtension:UnittestRoot_repeatedNestedMessageExtension];
  [registry addExtension:UnittestRoot_repeatedForeignMessageExtension];
  [registry addExtension:UnittestRoot_repeatedImportMessageExtension];
  [registry addExtension:UnittestRoot_repeatedNestedEnumExtension];
  [registry addExtension:UnittestRoot_repeatedForeignEnumExtension];
  [registry addExtension:UnittestRoot_repeatedImportEnumExtension];
  [registry addExtension:UnittestRoot_repeatedStringPieceExtension];
  [registry addExtension:UnittestRoot_repeatedCordExtension];
  [registry addExtension:UnittestRoot_defaultInt32Extension];
  [registry addExtension:UnittestRoot_defaultInt64Extension];
  [registry addExtension:UnittestRoot_defaultUint32Extension];
  [registry addExtension:UnittestRoot_defaultUint64Extension];
  [registry addExtension:UnittestRoot_defaultSint32Extension];
  [registry addExtension:UnittestRoot_defaultSint64Extension];
  [registry addExtension:UnittestRoot_defaultFixed32Extension];
  [registry addExtension:UnittestRoot_defaultFixed64Extension];
  [registry addExtension:UnittestRoot_defaultSfixed32Extension];
  [registry addExtension:UnittestRoot_defaultSfixed64Extension];
  [registry addExtension:UnittestRoot_defaultFloatExtension];
  [registry addExtension:UnittestRoot_defaultDoubleExtension];
  [registry addExtension:UnittestRoot_defaultBoolExtension];
  [registry addExtension:UnittestRoot_defaultStringExtension];
  [registry addExtension:UnittestRoot_defaultBytesExtension];
  [registry addExtension:UnittestRoot_defaultNestedEnumExtension];
  [registry addExtension:UnittestRoot_defaultForeignEnumExtension];
  [registry addExtension:UnittestRoot_defaultImportEnumExtension];
  [registry addExtension:UnittestRoot_defaultStringPieceExtension];
  [registry addExtension:UnittestRoot_defaultCordExtension];
  [registry addExtension:UnittestRoot_myExtensionString];
  [registry addExtension:UnittestRoot_myExtensionInt];
  [registry addExtension:UnittestRoot_packedInt32Extension];
  [registry addExtension:UnittestRoot_packedInt64Extension];
  [registry addExtension:UnittestRoot_packedUint32Extension];
  [registry addExtension:UnittestRoot_packedUint64Extension];
  [registry addExtension:UnittestRoot_packedSint32Extension];
  [registry addExtension:UnittestRoot_packedSint64Extension];
  [registry addExtension:UnittestRoot_packedFixed32Extension];
  [registry addExtension:UnittestRoot_packedFixed64Extension];
  [registry addExtension:UnittestRoot_packedSfixed32Extension];
  [registry addExtension:UnittestRoot_packedSfixed64Extension];
  [registry addExtension:UnittestRoot_packedFloatExtension];
  [registry addExtension:UnittestRoot_packedDoubleExtension];
  [registry addExtension:UnittestRoot_packedBoolExtension];
  [registry addExtension:UnittestRoot_packedEnumExtension];
  [registry addExtension:TestNestedExtension_test];
  [registry addExtension:TestRequired_single];
  [registry addExtension:TestRequired_multi];
}

+ (id<PBExtensionField>)optionalInt32Extension
{
  return UnittestRoot_optionalInt32Extension;
}
+ (id<PBExtensionField>)optionalInt64Extension
{
  return UnittestRoot_optionalInt64Extension;
}
+ (id<PBExtensionField>)optionalUint32Extension
{
  return UnittestRoot_optionalUint32Extension;
}
+ (id<PBExtensionField>)optionalUint64Extension
{
  return UnittestRoot_optionalUint64Extension;
}
+ (id<PBExtensionField>)optionalSint32Extension
{
  return UnittestRoot_optionalSint32Extension;
}
+ (id<PBExtensionField>)optionalSint64Extension
{
  return UnittestRoot_optionalSint64Extension;
}
+ (id<PBExtensionField>)optionalFixed32Extension
{
  return UnittestRoot_optionalFixed32Extension;
}
+ (id<PBExtensionField>)optionalFixed64Extension
{
  return UnittestRoot_optionalFixed64Extension;
}
+ (id<PBExtensionField>)optionalSfixed32Extension
{
  return UnittestRoot_optionalSfixed32Extension;
}
+ (id<PBExtensionField>)optionalSfixed64Extension
{
  return UnittestRoot_optionalSfixed64Extension;
}
+ (id<PBExtensionField>)optionalFloatExtension
{
  return UnittestRoot_optionalFloatExtension;
}
+ (id<PBExtensionField>)optionalDoubleExtension
{
  return UnittestRoot_optionalDoubleExtension;
}
+ (id<PBExtensionField>)optionalBoolExtension
{
  return UnittestRoot_optionalBoolExtension;
}
+ (id<PBExtensionField>)optionalStringExtension
{
  return UnittestRoot_optionalStringExtension;
}
+ (id<PBExtensionField>)optionalBytesExtension
{
  return UnittestRoot_optionalBytesExtension;
}
+ (id<PBExtensionField>)optionalGroupExtension
{
  return UnittestRoot_optionalGroupExtension;
}
+ (id<PBExtensionField>)optionalNestedMessageExtension
{
  return UnittestRoot_optionalNestedMessageExtension;
}
+ (id<PBExtensionField>)optionalForeignMessageExtension
{
  return UnittestRoot_optionalForeignMessageExtension;
}
+ (id<PBExtensionField>)optionalImportMessageExtension
{
  return UnittestRoot_optionalImportMessageExtension;
}
+ (id<PBExtensionField>)optionalNestedEnumExtension
{
  return UnittestRoot_optionalNestedEnumExtension;
}
+ (id<PBExtensionField>)optionalForeignEnumExtension
{
  return UnittestRoot_optionalForeignEnumExtension;
}
+ (id<PBExtensionField>)optionalImportEnumExtension
{
  return UnittestRoot_optionalImportEnumExtension;
}
+ (id<PBExtensionField>)optionalStringPieceExtension
{
  return UnittestRoot_optionalStringPieceExtension;
}
+ (id<PBExtensionField>)optionalCordExtension
{
  return UnittestRoot_optionalCordExtension;
}
+ (id<PBExtensionField>)repeatedInt32Extension
{
  return UnittestRoot_repeatedInt32Extension;
}
+ (id<PBExtensionField>)repeatedInt64Extension
{
  return UnittestRoot_repeatedInt64Extension;
}
+ (id<PBExtensionField>)repeatedUint32Extension
{
  return UnittestRoot_repeatedUint32Extension;
}
+ (id<PBExtensionField>)repeatedUint64Extension
{
  return UnittestRoot_repeatedUint64Extension;
}
+ (id<PBExtensionField>)repeatedSint32Extension
{
  return UnittestRoot_repeatedSint32Extension;
}
+ (id<PBExtensionField>)repeatedSint64Extension
{
  return UnittestRoot_repeatedSint64Extension;
}
+ (id<PBExtensionField>)repeatedFixed32Extension
{
  return UnittestRoot_repeatedFixed32Extension;
}
+ (id<PBExtensionField>)repeatedFixed64Extension
{
  return UnittestRoot_repeatedFixed64Extension;
}
+ (id<PBExtensionField>)repeatedSfixed32Extension
{
  return UnittestRoot_repeatedSfixed32Extension;
}
+ (id<PBExtensionField>)repeatedSfixed64Extension
{
  return UnittestRoot_repeatedSfixed64Extension;
}
+ (id<PBExtensionField>)repeatedFloatExtension
{
  return UnittestRoot_repeatedFloatExtension;
}
+ (id<PBExtensionField>)repeatedDoubleExtension
{
  return UnittestRoot_repeatedDoubleExtension;
}
+ (id<PBExtensionField>)repeatedBoolExtension
{
  return UnittestRoot_repeatedBoolExtension;
}
+ (id<PBExtensionField>)repeatedStringExtension
{
  return UnittestRoot_repeatedStringExtension;
}
+ (id<PBExtensionField>)repeatedBytesExtension
{
  return UnittestRoot_repeatedBytesExtension;
}
+ (id<PBExtensionField>)repeatedGroupExtension
{
  return UnittestRoot_repeatedGroupExtension;
}
+ (id<PBExtensionField>)repeatedNestedMessageExtension
{
  return UnittestRoot_repeatedNestedMessageExtension;
}
+ (id<PBExtensionField>)repeatedForeignMessageExtension
{
  return UnittestRoot_repeatedForeignMessageExtension;
}
+ (id<PBExtensionField>)repeatedImportMessageExtension
{
  return UnittestRoot_repeatedImportMessageExtension;
}
+ (id<PBExtensionField>)repeatedNestedEnumExtension
{
  return UnittestRoot_repeatedNestedEnumExtension;
}
+ (id<PBExtensionField>)repeatedForeignEnumExtension
{
  return UnittestRoot_repeatedForeignEnumExtension;
}
+ (id<PBExtensionField>)repeatedImportEnumExtension
{
  return UnittestRoot_repeatedImportEnumExtension;
}
+ (id<PBExtensionField>)repeatedStringPieceExtension
{
  return UnittestRoot_repeatedStringPieceExtension;
}
+ (id<PBExtensionField>)repeatedCordExtension
{
  return UnittestRoot_repeatedCordExtension;
}
+ (id<PBExtensionField>)defaultInt32Extension
{
  return UnittestRoot_defaultInt32Extension;
}
+ (id<PBExtensionField>)defaultInt64Extension
{
  return UnittestRoot_defaultInt64Extension;
}
+ (id<PBExtensionField>)defaultUint32Extension
{
  return UnittestRoot_defaultUint32Extension;
}
+ (id<PBExtensionField>)defaultUint64Extension
{
  return UnittestRoot_defaultUint64Extension;
}
+ (id<PBExtensionField>)defaultSint32Extension
{
  return UnittestRoot_defaultSint32Extension;
}
+ (id<PBExtensionField>)defaultSint64Extension
{
  return UnittestRoot_defaultSint64Extension;
}
+ (id<PBExtensionField>)defaultFixed32Extension
{
  return UnittestRoot_defaultFixed32Extension;
}
+ (id<PBExtensionField>)defaultFixed64Extension
{
  return UnittestRoot_defaultFixed64Extension;
}
+ (id<PBExtensionField>)defaultSfixed32Extension
{
  return UnittestRoot_defaultSfixed32Extension;
}
+ (id<PBExtensionField>)defaultSfixed64Extension
{
  return UnittestRoot_defaultSfixed64Extension;
}
+ (id<PBExtensionField>)defaultFloatExtension
{
  return UnittestRoot_defaultFloatExtension;
}
+ (id<PBExtensionField>)defaultDoubleExtension
{
  return UnittestRoot_defaultDoubleExtension;
}
+ (id<PBExtensionField>)defaultBoolExtension
{
  return UnittestRoot_defaultBoolExtension;
}
+ (id<PBExtensionField>)defaultStringExtension
{
  return UnittestRoot_defaultStringExtension;
}
+ (id<PBExtensionField>)defaultBytesExtension
{
  return UnittestRoot_defaultBytesExtension;
}
+ (id<PBExtensionField>)defaultNestedEnumExtension
{
  return UnittestRoot_defaultNestedEnumExtension;
}
+ (id<PBExtensionField>)defaultForeignEnumExtension
{
  return UnittestRoot_defaultForeignEnumExtension;
}
+ (id<PBExtensionField>)defaultImportEnumExtension
{
  return UnittestRoot_defaultImportEnumExtension;
}
+ (id<PBExtensionField>)defaultStringPieceExtension
{
  return UnittestRoot_defaultStringPieceExtension;
}
+ (id<PBExtensionField>)defaultCordExtension
{
  return UnittestRoot_defaultCordExtension;
}
+ (id<PBExtensionField>)myExtensionString
{
  return UnittestRoot_myExtensionString;
}
+ (id<PBExtensionField>)myExtensionInt
{
  return UnittestRoot_myExtensionInt;
}
+ (id<PBExtensionField>)packedInt32Extension
{
  return UnittestRoot_packedInt32Extension;
}
+ (id<PBExtensionField>)packedInt64Extension
{
  return UnittestRoot_packedInt64Extension;
}
+ (id<PBExtensionField>)packedUint32Extension
{
  return UnittestRoot_packedUint32Extension;
}
+ (id<PBExtensionField>)packedUint64Extension
{
  return UnittestRoot_packedUint64Extension;
}
+ (id<PBExtensionField>)packedSint32Extension
{
  return UnittestRoot_packedSint32Extension;
}
+ (id<PBExtensionField>)packedSint64Extension
{
  return UnittestRoot_packedSint64Extension;
}
+ (id<PBExtensionField>)packedFixed32Extension
{
  return UnittestRoot_packedFixed32Extension;
}
+ (id<PBExtensionField>)packedFixed64Extension
{
  return UnittestRoot_packedFixed64Extension;
}
+ (id<PBExtensionField>)packedSfixed32Extension
{
  return UnittestRoot_packedSfixed32Extension;
}
+ (id<PBExtensionField>)packedSfixed64Extension
{
  return UnittestRoot_packedSfixed64Extension;
}
+ (id<PBExtensionField>)packedFloatExtension
{
  return UnittestRoot_packedFloatExtension;
}
+ (id<PBExtensionField>)packedDoubleExtension
{
  return UnittestRoot_packedDoubleExtension;
}
+ (id<PBExtensionField>)packedBoolExtension
{
  return UnittestRoot_packedBoolExtension;
}
+ (id<PBExtensionField>)packedEnumExtension
{
  return UnittestRoot_packedEnumExtension;
}
@end


BOOL ForeignEnumIsValidValue(ForeignEnum value)
{
  return YES;
}

NSString *ForeignEnumToString(ForeignEnum value)
{
  switch (value) {
    case ForeignEnumForeignFoo:
      return @"FOREIGN_FOO";
    case ForeignEnumForeignBar:
      return @"FOREIGN_BAR";
    case ForeignEnumForeignBaz:
      return @"FOREIGN_BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


BOOL TestEnumWithDupValueIsValidValue(TestEnumWithDupValue value)
{
  return YES;
}

NSString *TestEnumWithDupValueToString(TestEnumWithDupValue value)
{
  switch (value) {
    case TestEnumWithDupValueFoo1:
      return @"FOO1";
    case TestEnumWithDupValueBar1:
      return @"BAR1";
    case TestEnumWithDupValueBaz:
      return @"BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


BOOL TestSparseEnumIsValidValue(TestSparseEnum value)
{
  return YES;
}

NSString *TestSparseEnumToString(TestSparseEnum value)
{
  switch (value) {
    case TestSparseEnumSparseA:
      return @"SPARSE_A";
    case TestSparseEnumSparseB:
      return @"SPARSE_B";
    case TestSparseEnumSparseC:
      return @"SPARSE_C";
    case TestSparseEnumSparseD:
      return @"SPARSE_D";
    case TestSparseEnumSparseE:
      return @"SPARSE_E";
    case TestSparseEnumSparseF:
      return @"SPARSE_F";
    case TestSparseEnumSparseG:
      return @"SPARSE_G";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


@interface TestAllTypes ()


@end


@implementation TestAllTypes

- (BOOL)hasOptionalInt32
{
  return _hasOptionalInt32;
}

- (void)setOptionalInt32:(int32_t)value
{
  _hasOptionalInt32 = YES;
  _optionalInt32 = value;
}

- (void)clearOptionalInt32
{
  _hasOptionalInt32 = NO;
  _optionalInt32 = 0;
}

- (BOOL)hasOptionalInt64
{
  return _hasOptionalInt64;
}

- (void)setOptionalInt64:(int64_t)value
{
  _hasOptionalInt64 = YES;
  _optionalInt64 = value;
}

- (void)clearOptionalInt64
{
  _hasOptionalInt64 = NO;
  _optionalInt64 = 0L;
}

- (BOOL)hasOptionalUint32
{
  return _hasOptionalUint32;
}

- (void)setOptionalUint32:(uint32_t)value
{
  _hasOptionalUint32 = YES;
  _optionalUint32 = value;
}

- (void)clearOptionalUint32
{
  _hasOptionalUint32 = NO;
  _optionalUint32 = 0;
}

- (BOOL)hasOptionalUint64
{
  return _hasOptionalUint64;
}

- (void)setOptionalUint64:(uint64_t)value
{
  _hasOptionalUint64 = YES;
  _optionalUint64 = value;
}

- (void)clearOptionalUint64
{
  _hasOptionalUint64 = NO;
  _optionalUint64 = 0L;
}

- (BOOL)hasOptionalSint32
{
  return _hasOptionalSint32;
}

- (void)setOptionalSint32:(int32_t)value
{
  _hasOptionalSint32 = YES;
  _optionalSint32 = value;
}

- (void)clearOptionalSint32
{
  _hasOptionalSint32 = NO;
  _optionalSint32 = 0;
}

- (BOOL)hasOptionalSint64
{
  return _hasOptionalSint64;
}

- (void)setOptionalSint64:(int64_t)value
{
  _hasOptionalSint64 = YES;
  _optionalSint64 = value;
}

- (void)clearOptionalSint64
{
  _hasOptionalSint64 = NO;
  _optionalSint64 = 0L;
}

- (BOOL)hasOptionalFixed32
{
  return _hasOptionalFixed32;
}

- (void)setOptionalFixed32:(uint32_t)value
{
  _hasOptionalFixed32 = YES;
  _optionalFixed32 = value;
}

- (void)clearOptionalFixed32
{
  _hasOptionalFixed32 = NO;
  _optionalFixed32 = 0;
}

- (BOOL)hasOptionalFixed64
{
  return _hasOptionalFixed64;
}

- (void)setOptionalFixed64:(uint64_t)value
{
  _hasOptionalFixed64 = YES;
  _optionalFixed64 = value;
}

- (void)clearOptionalFixed64
{
  _hasOptionalFixed64 = NO;
  _optionalFixed64 = 0L;
}

- (BOOL)hasOptionalSfixed32
{
  return _hasOptionalSfixed32;
}

- (void)setOptionalSfixed32:(int32_t)value
{
  _hasOptionalSfixed32 = YES;
  _optionalSfixed32 = value;
}

- (void)clearOptionalSfixed32
{
  _hasOptionalSfixed32 = NO;
  _optionalSfixed32 = 0;
}

- (BOOL)hasOptionalSfixed64
{
  return _hasOptionalSfixed64;
}

- (void)setOptionalSfixed64:(int64_t)value
{
  _hasOptionalSfixed64 = YES;
  _optionalSfixed64 = value;
}

- (void)clearOptionalSfixed64
{
  _hasOptionalSfixed64 = NO;
  _optionalSfixed64 = 0L;
}

- (BOOL)hasOptionalFloat
{
  return _hasOptionalFloat;
}

- (void)setOptionalFloat:(Float32)value
{
  _hasOptionalFloat = YES;
  _optionalFloat = value;
}

- (void)clearOptionalFloat
{
  _hasOptionalFloat = NO;
  _optionalFloat = 0;
}

- (BOOL)hasOptionalDouble
{
  return _hasOptionalDouble;
}

- (void)setOptionalDouble:(Float64)value
{
  _hasOptionalDouble = YES;
  _optionalDouble = value;
}

- (void)clearOptionalDouble
{
  _hasOptionalDouble = NO;
  _optionalDouble = 0;
}

- (BOOL)hasOptionalBool
{
  return _hasOptionalBool;
}

- (void)setOptionalBool:(BOOL)value
{
  _hasOptionalBool = YES;
  _optionalBool = value;
}

- (void)clearOptionalBool
{
  _hasOptionalBool = NO;
  _optionalBool = NO;
}

- (BOOL)hasOptionalString
{
  return _hasOptionalString;
}

- (void)setOptionalString:(NSString *)value
{
  _hasOptionalString = value != nil;
  _optionalString = value;
}

- (void)clearOptionalString
{
  _hasOptionalString = NO;
  _optionalString = nil;
}

- (BOOL)hasOptionalBytes
{
  return _hasOptionalBytes;
}

- (void)setOptionalBytes:(NSData *)value
{
  _hasOptionalBytes = value != nil;
  _optionalBytes = value;
}

- (void)clearOptionalBytes
{
  _hasOptionalBytes = NO;
  _optionalBytes = nil;
}

- (BOOL)hasOptionalGroup
{
  return _hasOptionalGroup;
}

- (void)setOptionalGroup:(TestAllTypes_OptionalGroup *)value
{
  _hasOptionalGroup = value != nil;
  _optionalGroup = value;
}

- (void)clearOptionalGroup
{
  _hasOptionalGroup = NO;
  _optionalGroup = nil;
}

- (BOOL)hasOptionalNestedMessage
{
  return _hasOptionalNestedMessage;
}

- (void)setOptionalNestedMessage:(TestAllTypes_NestedMessage *)value
{
  _hasOptionalNestedMessage = value != nil;
  _optionalNestedMessage = value;
}

- (void)clearOptionalNestedMessage
{
  _hasOptionalNestedMessage = NO;
  _optionalNestedMessage = nil;
}

- (BOOL)hasOptionalForeignMessage
{
  return _hasOptionalForeignMessage;
}

- (void)setOptionalForeignMessage:(ForeignMessage *)value
{
  _hasOptionalForeignMessage = value != nil;
  _optionalForeignMessage = value;
}

- (void)clearOptionalForeignMessage
{
  _hasOptionalForeignMessage = NO;
  _optionalForeignMessage = nil;
}

- (BOOL)hasOptionalImportMessage
{
  return _hasOptionalImportMessage;
}

- (void)setOptionalImportMessage:(ImportMessage *)value
{
  _hasOptionalImportMessage = value != nil;
  _optionalImportMessage = value;
}

- (void)clearOptionalImportMessage
{
  _hasOptionalImportMessage = NO;
  _optionalImportMessage = nil;
}

- (BOOL)hasOptionalNestedEnum
{
  return _hasOptionalNestedEnum;
}

- (void)setOptionalNestedEnum:(TestAllTypes_NestedEnum)value
{
  _hasOptionalNestedEnum = YES;
  _optionalNestedEnum = value;
}

- (void)clearOptionalNestedEnum
{
  _hasOptionalNestedEnum = NO;
  _optionalNestedEnum = TestAllTypes_NestedEnumFoo;
}

- (BOOL)hasOptionalForeignEnum
{
  return _hasOptionalForeignEnum;
}

- (void)setOptionalForeignEnum:(ForeignEnum)value
{
  _hasOptionalForeignEnum = YES;
  _optionalForeignEnum = value;
}

- (void)clearOptionalForeignEnum
{
  _hasOptionalForeignEnum = NO;
  _optionalForeignEnum = ForeignEnumForeignFoo;
}

- (BOOL)hasOptionalImportEnum
{
  return _hasOptionalImportEnum;
}

- (void)setOptionalImportEnum:(ImportEnum)value
{
  _hasOptionalImportEnum = YES;
  _optionalImportEnum = value;
}

- (void)clearOptionalImportEnum
{
  _hasOptionalImportEnum = NO;
  _optionalImportEnum = ImportEnumImportFoo;
}

- (BOOL)hasOptionalStringPiece
{
  return _hasOptionalStringPiece;
}

- (void)setOptionalStringPiece:(NSString *)value
{
  _hasOptionalStringPiece = value != nil;
  _optionalStringPiece = value;
}

- (void)clearOptionalStringPiece
{
  _hasOptionalStringPiece = NO;
  _optionalStringPiece = nil;
}

- (BOOL)hasOptionalCord
{
  return _hasOptionalCord;
}

- (void)setOptionalCord:(NSString *)value
{
  _hasOptionalCord = value != nil;
  _optionalCord = value;
}

- (void)clearOptionalCord
{
  _hasOptionalCord = NO;
  _optionalCord = nil;
}

- (BOOL)hasDefaultInt32
{
  return _hasDefaultInt32;
}

- (void)setDefaultInt32:(int32_t)value
{
  _hasDefaultInt32 = YES;
  _defaultInt32 = value;
}

- (void)clearDefaultInt32
{
  _hasDefaultInt32 = NO;
  _defaultInt32 = 41;
}

- (BOOL)hasDefaultInt64
{
  return _hasDefaultInt64;
}

- (void)setDefaultInt64:(int64_t)value
{
  _hasDefaultInt64 = YES;
  _defaultInt64 = value;
}

- (void)clearDefaultInt64
{
  _hasDefaultInt64 = NO;
  _defaultInt64 = 42L;
}

- (BOOL)hasDefaultUint32
{
  return _hasDefaultUint32;
}

- (void)setDefaultUint32:(uint32_t)value
{
  _hasDefaultUint32 = YES;
  _defaultUint32 = value;
}

- (void)clearDefaultUint32
{
  _hasDefaultUint32 = NO;
  _defaultUint32 = 43;
}

- (BOOL)hasDefaultUint64
{
  return _hasDefaultUint64;
}

- (void)setDefaultUint64:(uint64_t)value
{
  _hasDefaultUint64 = YES;
  _defaultUint64 = value;
}

- (void)clearDefaultUint64
{
  _hasDefaultUint64 = NO;
  _defaultUint64 = 44L;
}

- (BOOL)hasDefaultSint32
{
  return _hasDefaultSint32;
}

- (void)setDefaultSint32:(int32_t)value
{
  _hasDefaultSint32 = YES;
  _defaultSint32 = value;
}

- (void)clearDefaultSint32
{
  _hasDefaultSint32 = NO;
  _defaultSint32 = -45;
}

- (BOOL)hasDefaultSint64
{
  return _hasDefaultSint64;
}

- (void)setDefaultSint64:(int64_t)value
{
  _hasDefaultSint64 = YES;
  _defaultSint64 = value;
}

- (void)clearDefaultSint64
{
  _hasDefaultSint64 = NO;
  _defaultSint64 = 46L;
}

- (BOOL)hasDefaultFixed32
{
  return _hasDefaultFixed32;
}

- (void)setDefaultFixed32:(uint32_t)value
{
  _hasDefaultFixed32 = YES;
  _defaultFixed32 = value;
}

- (void)clearDefaultFixed32
{
  _hasDefaultFixed32 = NO;
  _defaultFixed32 = 47;
}

- (BOOL)hasDefaultFixed64
{
  return _hasDefaultFixed64;
}

- (void)setDefaultFixed64:(uint64_t)value
{
  _hasDefaultFixed64 = YES;
  _defaultFixed64 = value;
}

- (void)clearDefaultFixed64
{
  _hasDefaultFixed64 = NO;
  _defaultFixed64 = 48L;
}

- (BOOL)hasDefaultSfixed32
{
  return _hasDefaultSfixed32;
}

- (void)setDefaultSfixed32:(int32_t)value
{
  _hasDefaultSfixed32 = YES;
  _defaultSfixed32 = value;
}

- (void)clearDefaultSfixed32
{
  _hasDefaultSfixed32 = NO;
  _defaultSfixed32 = 49;
}

- (BOOL)hasDefaultSfixed64
{
  return _hasDefaultSfixed64;
}

- (void)setDefaultSfixed64:(int64_t)value
{
  _hasDefaultSfixed64 = YES;
  _defaultSfixed64 = value;
}

- (void)clearDefaultSfixed64
{
  _hasDefaultSfixed64 = NO;
  _defaultSfixed64 = -50L;
}

- (BOOL)hasDefaultFloat
{
  return _hasDefaultFloat;
}

- (void)setDefaultFloat:(Float32)value
{
  _hasDefaultFloat = YES;
  _defaultFloat = value;
}

- (void)clearDefaultFloat
{
  _hasDefaultFloat = NO;
  _defaultFloat = 51.5;
}

- (BOOL)hasDefaultDouble
{
  return _hasDefaultDouble;
}

- (void)setDefaultDouble:(Float64)value
{
  _hasDefaultDouble = YES;
  _defaultDouble = value;
}

- (void)clearDefaultDouble
{
  _hasDefaultDouble = NO;
  _defaultDouble = 52000;
}

- (BOOL)hasDefaultBool
{
  return _hasDefaultBool;
}

- (void)setDefaultBool:(BOOL)value
{
  _hasDefaultBool = YES;
  _defaultBool = value;
}

- (void)clearDefaultBool
{
  _hasDefaultBool = NO;
  _defaultBool = YES;
}

- (BOOL)hasDefaultString
{
  return _hasDefaultString;
}

- (void)setDefaultString:(NSString *)value
{
  _hasDefaultString = value != nil;
  _defaultString = value;
}

- (void)clearDefaultString
{
  _hasDefaultString = NO;
  _defaultString = @"hello";
}

- (BOOL)hasDefaultBytes
{
  return _hasDefaultBytes;
}

- (void)setDefaultBytes:(NSData *)value
{
  _hasDefaultBytes = value != nil;
  _defaultBytes = value;
}

- (void)clearDefaultBytes
{
  _hasDefaultBytes = NO;
  _defaultBytes = [NSData dataWithBytes:"world" length:5];
}

- (BOOL)hasDefaultNestedEnum
{
  return _hasDefaultNestedEnum;
}

- (void)setDefaultNestedEnum:(TestAllTypes_NestedEnum)value
{
  _hasDefaultNestedEnum = YES;
  _defaultNestedEnum = value;
}

- (void)clearDefaultNestedEnum
{
  _hasDefaultNestedEnum = NO;
  _defaultNestedEnum = TestAllTypes_NestedEnumBar;
}

- (BOOL)hasDefaultForeignEnum
{
  return _hasDefaultForeignEnum;
}

- (void)setDefaultForeignEnum:(ForeignEnum)value
{
  _hasDefaultForeignEnum = YES;
  _defaultForeignEnum = value;
}

- (void)clearDefaultForeignEnum
{
  _hasDefaultForeignEnum = NO;
  _defaultForeignEnum = ForeignEnumForeignBar;
}

- (BOOL)hasDefaultImportEnum
{
  return _hasDefaultImportEnum;
}

- (void)setDefaultImportEnum:(ImportEnum)value
{
  _hasDefaultImportEnum = YES;
  _defaultImportEnum = value;
}

- (void)clearDefaultImportEnum
{
  _hasDefaultImportEnum = NO;
  _defaultImportEnum = ImportEnumImportBar;
}

- (BOOL)hasDefaultStringPiece
{
  return _hasDefaultStringPiece;
}

- (void)setDefaultStringPiece:(NSString *)value
{
  _hasDefaultStringPiece = value != nil;
  _defaultStringPiece = value;
}

- (void)clearDefaultStringPiece
{
  _hasDefaultStringPiece = NO;
  _defaultStringPiece = @"abc";
}

- (BOOL)hasDefaultCord
{
  return _hasDefaultCord;
}

- (void)setDefaultCord:(NSString *)value
{
  _hasDefaultCord = value != nil;
  _defaultCord = value;
}

- (void)clearDefaultCord
{
  _hasDefaultCord = NO;
  _defaultCord = @"123";
}

- (instancetype)init
{
  if ((self = [super init])) {
    _optionalInt32 = 0;
    _optionalInt64 = 0L;
    _optionalUint32 = 0;
    _optionalUint64 = 0L;
    _optionalSint32 = 0;
    _optionalSint64 = 0L;
    _optionalFixed32 = 0;
    _optionalFixed64 = 0L;
    _optionalSfixed32 = 0;
    _optionalSfixed64 = 0L;
    _optionalFloat = 0;
    _optionalDouble = 0;
    _optionalBool = NO;
    _optionalString = nil;
    _optionalBytes = nil;
    _optionalGroup = nil;
    _optionalNestedMessage = nil;
    _optionalForeignMessage = nil;
    _optionalImportMessage = nil;
    _optionalNestedEnum = TestAllTypes_NestedEnumFoo;
    _optionalForeignEnum = ForeignEnumForeignFoo;
    _optionalImportEnum = ImportEnumImportFoo;
    _optionalStringPiece = nil;
    _optionalCord = nil;
    _defaultInt32 = 41;
    _defaultInt64 = 42L;
    _defaultUint32 = 43;
    _defaultUint64 = 44L;
    _defaultSint32 = -45;
    _defaultSint64 = 46L;
    _defaultFixed32 = 47;
    _defaultFixed64 = 48L;
    _defaultSfixed32 = 49;
    _defaultSfixed64 = -50L;
    _defaultFloat = 51.5;
    _defaultDouble = 52000;
    _defaultBool = YES;
    _defaultString = @"hello";
    _defaultBytes = [NSData dataWithBytes:"world" length:5];
    _defaultNestedEnum = TestAllTypes_NestedEnumBar;
    _defaultForeignEnum = ForeignEnumForeignBar;
    _defaultImportEnum = ImportEnumImportBar;
    _defaultStringPiece = @"abc";
    _defaultCord = @"123";
  }
  return self;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_repeatedInt32 int32AtIndex:index];
}
- (void)addRepeatedInt32:(int32_t)value
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 addInt32:value];
}

- (void)addRepeatedInt32Array:(NSArray *)array
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedInt32Array:(NSArray *)array
{
  _repeatedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedInt32
{
  _repeatedInt32 = nil;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_repeatedInt64 int64AtIndex:index];
}
- (void)addRepeatedInt64:(int64_t)value
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 addInt64:value];
}

- (void)addRepeatedInt64Array:(NSArray *)array
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedInt64Array:(NSArray *)array
{
  _repeatedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedInt64
{
  _repeatedInt64 = nil;
}

- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index
{
  return [_repeatedUint32 uint32AtIndex:index];
}
- (void)addRepeatedUint32:(uint32_t)value
{
  if (_repeatedUint32 == nil) {
    _repeatedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedUint32 addUint32:value];
}

- (void)addRepeatedUint32Array:(NSArray *)array
{
  if (_repeatedUint32 == nil) {
    _repeatedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedUint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setRepeatedUint32Array:(NSArray *)array
{
  _repeatedUint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setRepeatedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _repeatedUint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearRepeatedUint32
{
  _repeatedUint32 = nil;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_repeatedUint64 uint64AtIndex:index];
}
- (void)addRepeatedUint64:(uint64_t)value
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 addUint64:value];
}

- (void)addRepeatedUint64Array:(NSArray *)array
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedUint64Array:(NSArray *)array
{
  _repeatedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedUint64
{
  _repeatedUint64 = nil;
}

- (int32_t)repeatedSint32AtIndex:(NSUInteger)index
{
  return [_repeatedSint32 int32AtIndex:index];
}
- (void)addRepeatedSint32:(int32_t)value
{
  if (_repeatedSint32 == nil) {
    _repeatedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSint32 addInt32:value];
}

- (void)addRepeatedSint32Array:(NSArray *)array
{
  if (_repeatedSint32 == nil) {
    _repeatedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedSint32Array:(NSArray *)array
{
  _repeatedSint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedSint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedSint32
{
  _repeatedSint32 = nil;
}

- (int64_t)repeatedSint64AtIndex:(NSUInteger)index
{
  return [_repeatedSint64 int64AtIndex:index];
}
- (void)addRepeatedSint64:(int64_t)value
{
  if (_repeatedSint64 == nil) {
    _repeatedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSint64 addInt64:value];
}

- (void)addRepeatedSint64Array:(NSArray *)array
{
  if (_repeatedSint64 == nil) {
    _repeatedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedSint64Array:(NSArray *)array
{
  _repeatedSint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedSint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedSint64
{
  _repeatedSint64 = nil;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_repeatedFixed32 uint32AtIndex:index];
}
- (void)addRepeatedFixed32:(uint32_t)value
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 addUint32:value];
}

- (void)addRepeatedFixed32Array:(NSArray *)array
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setRepeatedFixed32Array:(NSArray *)array
{
  _repeatedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _repeatedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearRepeatedFixed32
{
  _repeatedFixed32 = nil;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_repeatedFixed64 uint64AtIndex:index];
}
- (void)addRepeatedFixed64:(uint64_t)value
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 addUint64:value];
}

- (void)addRepeatedFixed64Array:(NSArray *)array
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedFixed64Array:(NSArray *)array
{
  _repeatedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedFixed64
{
  _repeatedFixed64 = nil;
}

- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index
{
  return [_repeatedSfixed32 int32AtIndex:index];
}
- (void)addRepeatedSfixed32:(int32_t)value
{
  if (_repeatedSfixed32 == nil) {
    _repeatedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSfixed32 addInt32:value];
}

- (void)addRepeatedSfixed32Array:(NSArray *)array
{
  if (_repeatedSfixed32 == nil) {
    _repeatedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSfixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedSfixed32Array:(NSArray *)array
{
  _repeatedSfixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedSfixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedSfixed32
{
  _repeatedSfixed32 = nil;
}

- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index
{
  return [_repeatedSfixed64 int64AtIndex:index];
}
- (void)addRepeatedSfixed64:(int64_t)value
{
  if (_repeatedSfixed64 == nil) {
    _repeatedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSfixed64 addInt64:value];
}

- (void)addRepeatedSfixed64Array:(NSArray *)array
{
  if (_repeatedSfixed64 == nil) {
    _repeatedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSfixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedSfixed64Array:(NSArray *)array
{
  _repeatedSfixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedSfixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedSfixed64
{
  _repeatedSfixed64 = nil;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_repeatedFloat floatAtIndex:index];
}
- (void)addRepeatedFloat:(Float32)value
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat addFloat:value];
}

- (void)addRepeatedFloatArray:(NSArray *)array
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setRepeatedFloatArray:(NSArray *)array
{
  _repeatedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _repeatedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearRepeatedFloat
{
  _repeatedFloat = nil;
}

- (Float64)repeatedDoubleAtIndex:(NSUInteger)index
{
  return [_repeatedDouble doubleAtIndex:index];
}
- (void)addRepeatedDouble:(Float64)value
{
  if (_repeatedDouble == nil) {
    _repeatedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_repeatedDouble addDouble:value];
}

- (void)addRepeatedDoubleArray:(NSArray *)array
{
  if (_repeatedDouble == nil) {
    _repeatedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_repeatedDouble appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble]];
}

- (void)setRepeatedDoubleArray:(NSArray *)array
{
  _repeatedDouble = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
}

- (void)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  _repeatedDouble = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
}

- (void)clearRepeatedDouble
{
  _repeatedDouble = nil;
}

- (BOOL)repeatedBoolAtIndex:(NSUInteger)index
{
  return [_repeatedBool boolAtIndex:index];
}
- (void)addRepeatedBool:(BOOL)value
{
  if (_repeatedBool == nil) {
    _repeatedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_repeatedBool addBool:value];
}

- (void)addRepeatedBoolArray:(NSArray *)array
{
  if (_repeatedBool == nil) {
    _repeatedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_repeatedBool appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool]];
}

- (void)setRepeatedBoolArray:(NSArray *)array
{
  _repeatedBool = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
}

- (void)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  _repeatedBool = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
}

- (void)clearRepeatedBool
{
  _repeatedBool = nil;
}

- (NSString *)repeatedStringAtIndex:(NSUInteger)index
{
  return _repeatedString[index];
}

- (void)addRepeatedString:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedString == nil) {
    _repeatedString = [[NSMutableArray alloc] init];
  }
  [_repeatedString addObject:value];
}

- (void)addRepeatedStringArray:(NSArray *)array
{
  if (_repeatedString == nil) {
    _repeatedString = [[NSMutableArray alloc] init];
  }
  [_repeatedString addObjectsFromArray:array];
}

- (void)setRepeatedStringArray:(NSArray *)array
{
  _repeatedString = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedString
{
  _repeatedString = nil;
}

- (NSData *)repeatedBytesAtIndex:(NSUInteger)index
{
  return _repeatedBytes[index];
}

- (void)addRepeatedBytes:(NSData *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedBytes == nil) {
    _repeatedBytes = [[NSMutableArray alloc] init];
  }
  [_repeatedBytes addObject:value];
}

- (void)addRepeatedBytesArray:(NSArray *)array
{
  if (_repeatedBytes == nil) {
    _repeatedBytes = [[NSMutableArray alloc] init];
  }
  [_repeatedBytes addObjectsFromArray:array];
}

- (void)setRepeatedBytesArray:(NSArray *)array
{
  _repeatedBytes = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedBytes
{
  _repeatedBytes = nil;
}

- (TestAllTypes_RepeatedGroup *)repeatedGroupAtIndex:(NSUInteger)index
{
  return _repeatedGroup[index];
}
- (void)addRepeatedGroup:(TestAllTypes_RepeatedGroup *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedGroup == nil) {
    _repeatedGroup = [[NSMutableArray alloc] init];
  }
  [_repeatedGroup addObject:value];
}

- (void)addRepeatedGroupArray:(NSArray *)array
{
  if (_repeatedGroup == nil) {
    _repeatedGroup = [[NSMutableArray alloc] init];
  }
  [_repeatedGroup addObjectsFromArray:array];
}

- (void)setRepeatedGroupArray:(NSArray *)array
{
  _repeatedGroup = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedGroup
{
  _repeatedGroup = nil;
}

- (TestAllTypes_NestedMessage *)repeatedNestedMessageAtIndex:(NSUInteger)index
{
  return _repeatedNestedMessage[index];
}
- (void)addRepeatedNestedMessage:(TestAllTypes_NestedMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedNestedMessage == nil) {
    _repeatedNestedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedNestedMessage addObject:value];
}

- (void)addRepeatedNestedMessageArray:(NSArray *)array
{
  if (_repeatedNestedMessage == nil) {
    _repeatedNestedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedNestedMessage addObjectsFromArray:array];
}

- (void)setRepeatedNestedMessageArray:(NSArray *)array
{
  _repeatedNestedMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedNestedMessage
{
  _repeatedNestedMessage = nil;
}

- (ForeignMessage *)repeatedForeignMessageAtIndex:(NSUInteger)index
{
  return _repeatedForeignMessage[index];
}
- (void)addRepeatedForeignMessage:(ForeignMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedForeignMessage == nil) {
    _repeatedForeignMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedForeignMessage addObject:value];
}

- (void)addRepeatedForeignMessageArray:(NSArray *)array
{
  if (_repeatedForeignMessage == nil) {
    _repeatedForeignMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedForeignMessage addObjectsFromArray:array];
}

- (void)setRepeatedForeignMessageArray:(NSArray *)array
{
  _repeatedForeignMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedForeignMessage
{
  _repeatedForeignMessage = nil;
}

- (ImportMessage *)repeatedImportMessageAtIndex:(NSUInteger)index
{
  return _repeatedImportMessage[index];
}
- (void)addRepeatedImportMessage:(ImportMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedImportMessage == nil) {
    _repeatedImportMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedImportMessage addObject:value];
}

- (void)addRepeatedImportMessageArray:(NSArray *)array
{
  if (_repeatedImportMessage == nil) {
    _repeatedImportMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedImportMessage addObjectsFromArray:array];
}

- (void)setRepeatedImportMessageArray:(NSArray *)array
{
  _repeatedImportMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedImportMessage
{
  _repeatedImportMessage = nil;
}

- (TestAllTypes_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index
{
  return (TestAllTypes_NestedEnum)[_repeatedNestedEnum int32AtIndex:index];
}

- (void)addRepeatedNestedEnum:(TestAllTypes_NestedEnum)value
{
  if (_repeatedNestedEnum == nil) {
    _repeatedNestedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedNestedEnum addInt32:value];
}

- (void)addRepeatedNestedEnumArray:(NSArray *)array
{
  if (_repeatedNestedEnum == nil) {
    _repeatedNestedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedNestedEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedNestedEnumArray:(NSArray *)array
{
  _repeatedNestedEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedNestedEnumValues:(const TestAllTypes_NestedEnum *)values count:(NSUInteger)count
{
  _repeatedNestedEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedNestedEnum
{
  _repeatedNestedEnum = nil;
}

- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index
{
  return (ForeignEnum)[_repeatedForeignEnum int32AtIndex:index];
}

- (void)addRepeatedForeignEnum:(ForeignEnum)value
{
  if (_repeatedForeignEnum == nil) {
    _repeatedForeignEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedForeignEnum addInt32:value];
}

- (void)addRepeatedForeignEnumArray:(NSArray *)array
{
  if (_repeatedForeignEnum == nil) {
    _repeatedForeignEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedForeignEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedForeignEnumArray:(NSArray *)array
{
  _repeatedForeignEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedForeignEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  _repeatedForeignEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedForeignEnum
{
  _repeatedForeignEnum = nil;
}

- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index
{
  return (ImportEnum)[_repeatedImportEnum int32AtIndex:index];
}

- (void)addRepeatedImportEnum:(ImportEnum)value
{
  if (_repeatedImportEnum == nil) {
    _repeatedImportEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedImportEnum addInt32:value];
}

- (void)addRepeatedImportEnumArray:(NSArray *)array
{
  if (_repeatedImportEnum == nil) {
    _repeatedImportEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedImportEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedImportEnumArray:(NSArray *)array
{
  _repeatedImportEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedImportEnumValues:(const ImportEnum *)values count:(NSUInteger)count
{
  _repeatedImportEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedImportEnum
{
  _repeatedImportEnum = nil;
}

- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index
{
  return _repeatedStringPiece[index];
}

- (void)addRepeatedStringPiece:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedStringPiece == nil) {
    _repeatedStringPiece = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPiece addObject:value];
}

- (void)addRepeatedStringPieceArray:(NSArray *)array
{
  if (_repeatedStringPiece == nil) {
    _repeatedStringPiece = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPiece addObjectsFromArray:array];
}

- (void)setRepeatedStringPieceArray:(NSArray *)array
{
  _repeatedStringPiece = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedStringPiece
{
  _repeatedStringPiece = nil;
}

- (NSString *)repeatedCordAtIndex:(NSUInteger)index
{
  return _repeatedCord[index];
}

- (void)addRepeatedCord:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedCord == nil) {
    _repeatedCord = [[NSMutableArray alloc] init];
  }
  [_repeatedCord addObject:value];
}

- (void)addRepeatedCordArray:(NSArray *)array
{
  if (_repeatedCord == nil) {
    _repeatedCord = [[NSMutableArray alloc] init];
  }
  [_repeatedCord addObjectsFromArray:array];
}

- (void)setRepeatedCordArray:(NSArray *)array
{
  _repeatedCord = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedCord
{
  _repeatedCord = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.optionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalForeignMessage) {
    [output writeMessage:19 value:self.optionalForeignMessage];
  }
  if (self.hasOptionalImportMessage) {
    [output writeMessage:20 value:self.optionalImportMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalForeignEnum) {
    [output writeEnum:22 value:self.optionalForeignEnum];
  }
  if (self.hasOptionalImportEnum) {
    [output writeEnum:23 value:self.optionalImportEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  const NSUInteger repeatedInt32Count = self.repeatedInt32.count;
  if (repeatedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < repeatedInt32Count; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64Count = self.repeatedInt64.count;
  if (repeatedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < repeatedInt64Count; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32Count = self.repeatedUint32.count;
  if (repeatedUint32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedUint32.data;
    for (NSUInteger i = 0; i < repeatedUint32Count; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64Count = self.repeatedUint64.count;
  if (repeatedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < repeatedUint64Count; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32Count = self.repeatedSint32.count;
  if (repeatedSint32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSint32.data;
    for (NSUInteger i = 0; i < repeatedSint32Count; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64Count = self.repeatedSint64.count;
  if (repeatedSint64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSint64.data;
    for (NSUInteger i = 0; i < repeatedSint64Count; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32Count = self.repeatedFixed32.count;
  if (repeatedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedFixed32.data;
    for (NSUInteger i = 0; i < repeatedFixed32Count; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64Count = self.repeatedFixed64.count;
  if (repeatedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedFixed64.data;
    for (NSUInteger i = 0; i < repeatedFixed64Count; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32Count = self.repeatedSfixed32.count;
  if (repeatedSfixed32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSfixed32.data;
    for (NSUInteger i = 0; i < repeatedSfixed32Count; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64Count = self.repeatedSfixed64.count;
  if (repeatedSfixed64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSfixed64.data;
    for (NSUInteger i = 0; i < repeatedSfixed64Count; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatCount = self.repeatedFloat.count;
  if (repeatedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloat.data;
    for (NSUInteger i = 0; i < repeatedFloatCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleCount = self.repeatedDouble.count;
  if (repeatedDoubleCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDouble.data;
    for (NSUInteger i = 0; i < repeatedDoubleCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolCount = self.repeatedBool.count;
  if (repeatedBoolCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBool.data;
    for (NSUInteger i = 0; i < repeatedBoolCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  const NSUInteger repeatedStringCount = self.repeatedString.count;
  if (repeatedStringCount > 0) {
    NSMutableArray *values = self.repeatedString;
    for (NSUInteger i = 0; i < repeatedStringCount; ++i) {
      [output writeString:44 value:values[i]];
    }
  }
  const NSUInteger repeatedBytesCount = self.repeatedBytes.count;
  if (repeatedBytesCount > 0) {
    NSMutableArray *values = self.repeatedBytes;
    for (NSUInteger i = 0; i < repeatedBytesCount; ++i) {
      [output writeData:45 value:values[i]];
    }
  }
  for (TestAllTypes_RepeatedGroup *element in self.repeatedGroup) {
    [output writeGroup:46 value:element];
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessage) {
    [output writeMessage:48 value:element];
  }
  for (ForeignMessage *element in self.repeatedForeignMessage) {
    [output writeMessage:49 value:element];
  }
  for (ImportMessage *element in self.repeatedImportMessage) {
    [output writeMessage:50 value:element];
  }
  const NSUInteger repeatedNestedEnumCount = self.repeatedNestedEnum.count;
  const TestAllTypes_NestedEnum *repeatedNestedEnumValues = (const TestAllTypes_NestedEnum *)self.repeatedNestedEnum.data;
  for (NSUInteger i = 0; i < repeatedNestedEnumCount; ++i) {
    [output writeEnum:51 value:repeatedNestedEnumValues[i]];
  }
  const NSUInteger repeatedForeignEnumCount = self.repeatedForeignEnum.count;
  const ForeignEnum *repeatedForeignEnumValues = (const ForeignEnum *)self.repeatedForeignEnum.data;
  for (NSUInteger i = 0; i < repeatedForeignEnumCount; ++i) {
    [output writeEnum:52 value:repeatedForeignEnumValues[i]];
  }
  const NSUInteger repeatedImportEnumCount = self.repeatedImportEnum.count;
  const ImportEnum *repeatedImportEnumValues = (const ImportEnum *)self.repeatedImportEnum.data;
  for (NSUInteger i = 0; i < repeatedImportEnumCount; ++i) {
    [output writeEnum:53 value:repeatedImportEnumValues[i]];
  }
  const NSUInteger repeatedStringPieceCount = self.repeatedStringPiece.count;
  if (repeatedStringPieceCount > 0) {
    NSMutableArray *values = self.repeatedStringPiece;
    for (NSUInteger i = 0; i < repeatedStringPieceCount; ++i) {
      [output writeString:54 value:values[i]];
    }
  }
  const NSUInteger repeatedCordCount = self.repeatedCord.count;
  if (repeatedCordCount > 0) {
    NSMutableArray *values = self.repeatedCord;
    for (NSUInteger i = 0; i < repeatedCordCount; ++i) {
      [output writeString:55 value:values[i]];
    }
  }
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultForeignEnum) {
    [output writeEnum:82 value:self.defaultForeignEnum];
  }
  if (self.hasDefaultImportEnum) {
    [output writeEnum:83 value:self.defaultImportEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.optionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalForeignMessage) {
    size_ += computeMessageSize(19, self.optionalForeignMessage);
  }
  if (self.hasOptionalImportMessage) {
    size_ += computeMessageSize(20, self.optionalImportMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalForeignEnum) {
    size_ += computeEnumSize(22, self.optionalForeignEnum);
  }
  if (self.hasOptionalImportEnum) {
    size_ += computeEnumSize(23, self.optionalImportEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt32.count;
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt64.count;
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedUint32.count;
    const uint32_t *values = (const uint32_t *)self.repeatedUint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedUint64.count;
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSint32.count;
    const int32_t *values = (const int32_t *)self.repeatedSint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSint64.count;
    const int64_t *values = (const int64_t *)self.repeatedSint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSfixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSfixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedDouble.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedBool.count;
    dataSize = 1 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedString.count;
    NSMutableArray *values = self.repeatedString;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedBytes.count;
    NSMutableArray *values = self.repeatedBytes;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  for (TestAllTypes_RepeatedGroup *element in self.repeatedGroup) {
    size_ += computeGroupSize(46, element);
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessage) {
    size_ += computeMessageSize(48, element);
  }
  for (ForeignMessage *element in self.repeatedForeignMessage) {
    size_ += computeMessageSize(49, element);
  }
  for (ImportMessage *element in self.repeatedImportMessage) {
    size_ += computeMessageSize(50, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedNestedEnum.count;
    const TestAllTypes_NestedEnum *values = (const TestAllTypes_NestedEnum *)self.repeatedNestedEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedForeignEnum.count;
    const ForeignEnum *values = (const ForeignEnum *)self.repeatedForeignEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedImportEnum.count;
    const ImportEnum *values = (const ImportEnum *)self.repeatedImportEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedStringPiece.count;
    NSMutableArray *values = self.repeatedStringPiece;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedCord.count;
    NSMutableArray *values = self.repeatedCord;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultForeignEnum) {
    size_ += computeEnumSize(82, self.defaultForeignEnum);
  }
  if (self.hasDefaultImportEnum) {
    size_ += computeEnumSize(83, self.defaultImportEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypes *)parseFromData:(NSData *)data
{
  return (TestAllTypes *)[[[TestAllTypes builder] mergeFromData:data] build];
}

+ (TestAllTypes *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input] build];
}

+ (TestAllTypes *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypes builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_Builder *)builder
{
  return [[TestAllTypes_Builder alloc] init];
}

+ (TestAllTypes_Builder *)builderWithPrototype:(TestAllTypes *)prototype
{
  return [[TestAllTypes builder] mergeFrom:prototype];
}

- (TestAllTypes_Builder *)builder
{
  return [TestAllTypes builder];
}

- (TestAllTypes_Builder *)toBuilder
{
  return [TestAllTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", @(self.optionalInt32)];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", @(self.optionalInt64)];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", @(self.optionalUint32)];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", @(self.optionalUint64)];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", @(self.optionalSint32)];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", @(self.optionalSint64)];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", @(self.optionalFixed32)];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", @(self.optionalFixed64)];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", @(self.optionalSfixed32)];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", @(self.optionalSfixed64)];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", @(self.optionalFloat)];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", @(self.optionalDouble)];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", @(self.optionalBool)];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalForeignMessage"];
    [self.optionalForeignMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalImportMessage"];
    [self.optionalImportMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", TestAllTypes_NestedEnumToString((TestAllTypes_NestedEnum)self.optionalNestedEnum)];
  }
  if (self.hasOptionalForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalForeignEnum", ForeignEnumToString((ForeignEnum)self.optionalForeignEnum)];
  }
  if (self.hasOptionalImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalImportEnum", ImportEnumToString((ImportEnum)self.optionalImportEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", @([self.repeatedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", @([self.repeatedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", @([self.repeatedUint32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", @([self.repeatedUint64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", @([self.repeatedSint32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", @([self.repeatedSint64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", @([self.repeatedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", @([self.repeatedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", @([self.repeatedSfixed32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", @([self.repeatedSfixed64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", @([self.repeatedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedDouble.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", @([self.repeatedDouble doubleAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedBool.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", @([self.repeatedBool boolAtIndex:i])];
  }
  for (NSString * element in self.repeatedString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", element];
  }
  for (NSData * element in self.repeatedBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", element];
  }
  for (TestAllTypes_RepeatedGroup *element in self.repeatedGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ForeignMessage *element in self.repeatedForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedForeignMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ImportMessage *element in self.repeatedImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedImportMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSUInteger i = 0, listCount = self.repeatedNestedEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", TestAllTypes_NestedEnumToString((TestAllTypes_NestedEnum)[self.repeatedNestedEnum int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedForeignEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedForeignEnum", ForeignEnumToString((ForeignEnum)[self.repeatedForeignEnum int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedImportEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedImportEnum", ImportEnumToString((ImportEnum)[self.repeatedImportEnum int32AtIndex:i])];
  }
  for (NSString * element in self.repeatedStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", element];
  }
  for (NSString * element in self.repeatedCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", element];
  }
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", @(self.defaultInt32)];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", @(self.defaultInt64)];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", @(self.defaultUint32)];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", @(self.defaultUint64)];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", @(self.defaultSint32)];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", @(self.defaultSint64)];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", @(self.defaultFixed32)];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", @(self.defaultFixed64)];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", @(self.defaultSfixed32)];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", @(self.defaultSfixed64)];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", @(self.defaultFloat)];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", @(self.defaultDouble)];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", @(self.defaultBool)];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", TestAllTypes_NestedEnumToString((TestAllTypes_NestedEnum)self.defaultNestedEnum)];
  }
  if (self.hasDefaultForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultForeignEnum", ForeignEnumToString((ForeignEnum)self.defaultForeignEnum)];
  }
  if (self.hasDefaultImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultImportEnum", ImportEnumToString((ImportEnum)self.defaultImportEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes class]]) {
    return NO;
  }
  TestAllTypes *otherMessage = other;
  return
    (self.hasOptionalInt32 == otherMessage.hasOptionalInt32 && (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32)) &&
    (self.hasOptionalInt64 == otherMessage.hasOptionalInt64 && (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64)) &&
    (self.hasOptionalUint32 == otherMessage.hasOptionalUint32 && (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32)) &&
    (self.hasOptionalUint64 == otherMessage.hasOptionalUint64 && (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64)) &&
    (self.hasOptionalSint32 == otherMessage.hasOptionalSint32 && (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32)) &&
    (self.hasOptionalSint64 == otherMessage.hasOptionalSint64 && (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64)) &&
    (self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 && (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32)) &&
    (self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 && (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64)) &&
    (self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 && (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32)) &&
    (self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 && (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64)) &&
    (self.hasOptionalFloat == otherMessage.hasOptionalFloat && (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat)) &&
    (self.hasOptionalDouble == otherMessage.hasOptionalDouble && (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble)) &&
    (self.hasOptionalBool == otherMessage.hasOptionalBool && (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool)) &&
    (self.hasOptionalString == otherMessage.hasOptionalString && (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString])) &&
    (self.hasOptionalBytes == otherMessage.hasOptionalBytes && (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes])) &&
    (self.hasOptionalGroup == otherMessage.hasOptionalGroup && (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup])) &&
    (self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage && (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage])) &&
    (self.hasOptionalForeignMessage == otherMessage.hasOptionalForeignMessage && (!self.hasOptionalForeignMessage || [self.optionalForeignMessage isEqual:otherMessage.optionalForeignMessage])) &&
    (self.hasOptionalImportMessage == otherMessage.hasOptionalImportMessage && (!self.hasOptionalImportMessage || [self.optionalImportMessage isEqual:otherMessage.optionalImportMessage])) &&
    (self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum && (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum)) &&
    (self.hasOptionalForeignEnum == otherMessage.hasOptionalForeignEnum && (!self.hasOptionalForeignEnum || self.optionalForeignEnum == otherMessage.optionalForeignEnum)) &&
    (self.hasOptionalImportEnum == otherMessage.hasOptionalImportEnum && (!self.hasOptionalImportEnum || self.optionalImportEnum == otherMessage.optionalImportEnum)) &&
    (self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece && (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece])) &&
    (self.hasOptionalCord == otherMessage.hasOptionalCord && (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord])) &&
    [self.repeatedInt32 isEqualToArray:otherMessage.repeatedInt32] &&
    [self.repeatedInt64 isEqualToArray:otherMessage.repeatedInt64] &&
    [self.repeatedUint32 isEqualToArray:otherMessage.repeatedUint32] &&
    [self.repeatedUint64 isEqualToArray:otherMessage.repeatedUint64] &&
    [self.repeatedSint32 isEqualToArray:otherMessage.repeatedSint32] &&
    [self.repeatedSint64 isEqualToArray:otherMessage.repeatedSint64] &&
    [self.repeatedFixed32 isEqualToArray:otherMessage.repeatedFixed32] &&
    [self.repeatedFixed64 isEqualToArray:otherMessage.repeatedFixed64] &&
    [self.repeatedSfixed32 isEqualToArray:otherMessage.repeatedSfixed32] &&
    [self.repeatedSfixed64 isEqualToArray:otherMessage.repeatedSfixed64] &&
    [self.repeatedFloat isEqualToArray:otherMessage.repeatedFloat] &&
    [self.repeatedDouble isEqualToArray:otherMessage.repeatedDouble] &&
    [self.repeatedBool isEqualToArray:otherMessage.repeatedBool] &&
    [self.repeatedString isEqualToArray:otherMessage.repeatedString] &&
    [self.repeatedBytes isEqualToArray:otherMessage.repeatedBytes] &&
    [self.repeatedGroup isEqualToArray:otherMessage.repeatedGroup] &&
    [self.repeatedNestedMessage isEqualToArray:otherMessage.repeatedNestedMessage] &&
    [self.repeatedForeignMessage isEqualToArray:otherMessage.repeatedForeignMessage] &&
    [self.repeatedImportMessage isEqualToArray:otherMessage.repeatedImportMessage] &&
    [self.repeatedNestedEnum isEqualToArray:otherMessage.repeatedNestedEnum] &&
    [self.repeatedForeignEnum isEqualToArray:otherMessage.repeatedForeignEnum] &&
    [self.repeatedImportEnum isEqualToArray:otherMessage.repeatedImportEnum] &&
    [self.repeatedStringPiece isEqualToArray:otherMessage.repeatedStringPiece] &&
    [self.repeatedCord isEqualToArray:otherMessage.repeatedCord] &&
    (self.hasDefaultInt32 == otherMessage.hasDefaultInt32 && (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32)) &&
    (self.hasDefaultInt64 == otherMessage.hasDefaultInt64 && (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64)) &&
    (self.hasDefaultUint32 == otherMessage.hasDefaultUint32 && (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32)) &&
    (self.hasDefaultUint64 == otherMessage.hasDefaultUint64 && (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64)) &&
    (self.hasDefaultSint32 == otherMessage.hasDefaultSint32 && (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32)) &&
    (self.hasDefaultSint64 == otherMessage.hasDefaultSint64 && (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64)) &&
    (self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 && (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32)) &&
    (self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 && (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64)) &&
    (self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 && (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32)) &&
    (self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 && (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64)) &&
    (self.hasDefaultFloat == otherMessage.hasDefaultFloat && (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat)) &&
    (self.hasDefaultDouble == otherMessage.hasDefaultDouble && (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble)) &&
    (self.hasDefaultBool == otherMessage.hasDefaultBool && (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool)) &&
    (self.hasDefaultString == otherMessage.hasDefaultString && (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString])) &&
    (self.hasDefaultBytes == otherMessage.hasDefaultBytes && (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes])) &&
    (self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum && (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum)) &&
    (self.hasDefaultForeignEnum == otherMessage.hasDefaultForeignEnum && (!self.hasDefaultForeignEnum || self.defaultForeignEnum == otherMessage.defaultForeignEnum)) &&
    (self.hasDefaultImportEnum == otherMessage.hasDefaultImportEnum && (!self.hasDefaultImportEnum || self.defaultImportEnum == otherMessage.defaultImportEnum)) &&
    (self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece && (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece])) &&
    (self.hasDefaultCord == otherMessage.hasDefaultCord && (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [@(self.optionalInt32) hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [@(self.optionalInt64) hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [@(self.optionalUint32) hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [@(self.optionalUint64) hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [@(self.optionalSint32) hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [@(self.optionalSint64) hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [@(self.optionalFixed32) hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [@(self.optionalFixed64) hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed32) hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed64) hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [@(self.optionalFloat) hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [@(self.optionalDouble) hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [@(self.optionalBool) hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalForeignMessage) {
    hashCode = hashCode * 31 + [self.optionalForeignMessage hash];
  }
  if (self.hasOptionalImportMessage) {
    hashCode = hashCode * 31 + [self.optionalImportMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalForeignEnum) {
    hashCode = hashCode * 31 + self.optionalForeignEnum;
  }
  if (self.hasOptionalImportEnum) {
    hashCode = hashCode * 31 + self.optionalImportEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedUint32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedUint64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSint32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSint64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSfixed32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSfixed64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedDouble.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedDouble doubleAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedBool.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedBool boolAtIndex:i]) hash];
  }
  for (NSString * element in self.repeatedString) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSData * element in self.repeatedBytes) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes_RepeatedGroup *element in self.repeatedGroup) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ForeignMessage *element in self.repeatedForeignMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ImportMessage *element in self.repeatedImportMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedNestedEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedNestedEnum int32AtIndex:i];
  }
  for (NSUInteger i = 0, listCount = self.repeatedForeignEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedForeignEnum int32AtIndex:i];
  }
  for (NSUInteger i = 0, listCount = self.repeatedImportEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedImportEnum int32AtIndex:i];
  }
  for (NSString * element in self.repeatedStringPiece) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.repeatedCord) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [@(self.defaultInt32) hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [@(self.defaultInt64) hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [@(self.defaultUint32) hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [@(self.defaultUint64) hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [@(self.defaultSint32) hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [@(self.defaultSint64) hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [@(self.defaultFixed32) hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [@(self.defaultFixed64) hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed32) hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed64) hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [@(self.defaultFloat) hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [@(self.defaultDouble) hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [@(self.defaultBool) hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultForeignEnum) {
    hashCode = hashCode * 31 + self.defaultForeignEnum;
  }
  if (self.hasDefaultImportEnum) {
    hashCode = hashCode * 31 + self.defaultImportEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


BOOL TestAllTypes_NestedEnumIsValidValue(TestAllTypes_NestedEnum value)
{
  return YES;
}

NSString *TestAllTypes_NestedEnumToString(TestAllTypes_NestedEnum value)
{
  switch (value) {
    case TestAllTypes_NestedEnumFoo:
      return @"FOO";
    case TestAllTypes_NestedEnumBar:
      return @"BAR";
    case TestAllTypes_NestedEnumBaz:
      return @"BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


@interface TestAllTypes_NestedMessage ()


@end


@implementation TestAllTypes_NestedMessage

- (BOOL)hasBb
{
  return _hasBb;
}

- (void)setBb:(int32_t)value
{
  _hasBb = YES;
  _bb = value;
}

- (void)clearBb
{
  _hasBb = NO;
  _bb = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _bb = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypes_NestedMessage *)parseFromData:(NSData *)data
{
  return (TestAllTypes_NestedMessage *)[[[TestAllTypes_NestedMessage builder] mergeFromData:data] build];
}

+ (TestAllTypes_NestedMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_NestedMessage*)[[[TestAllTypes_NestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_NestedMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypes_NestedMessage*)[[[TestAllTypes_NestedMessage builder] mergeFromInputStream:input] build];
}

+ (TestAllTypes_NestedMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_NestedMessage*)[[[TestAllTypes_NestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypes_NestedMessage builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypes_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypes_NestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_NestedMessage_Builder *)builder
{
  return [[TestAllTypes_NestedMessage_Builder alloc] init];
}

+ (TestAllTypes_NestedMessage_Builder *)builderWithPrototype:(TestAllTypes_NestedMessage *)prototype
{
  return [[TestAllTypes_NestedMessage builder] mergeFrom:prototype];
}

- (TestAllTypes_NestedMessage_Builder *)builder
{
  return [TestAllTypes_NestedMessage builder];
}

- (TestAllTypes_NestedMessage_Builder *)toBuilder
{
  return [TestAllTypes_NestedMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", @(self.bb)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_NestedMessage class]]) {
    return NO;
  }
  TestAllTypes_NestedMessage *otherMessage = other;
  return
    (self.hasBb == otherMessage.hasBb && (!self.hasBb || self.bb == otherMessage.bb)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [@(self.bb) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypes_NestedMessage_Builder()

@property (strong) TestAllTypes_NestedMessage *result;

@end


@implementation TestAllTypes_NestedMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypes_NestedMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypes_NestedMessage_Builder *)clear
{
  self.result = [[TestAllTypes_NestedMessage alloc] init];
  return self;
}

- (TestAllTypes_NestedMessage_Builder *)clone
{
  return [TestAllTypes_NestedMessage builderWithPrototype:_result];
}

- (TestAllTypes_NestedMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypes_NestedMessage *)buildPartial
{
  TestAllTypes_NestedMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypes_NestedMessage_Builder *)mergeFrom:(TestAllTypes_NestedMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypes_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypes_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasBb
{
  return _result.hasBb;
}

- (int32_t)bb
{
  return _result.bb;
}

- (TestAllTypes_NestedMessage_Builder*)setBb:(int32_t)value
{
  _result.bb = value;
  return self;
}

- (TestAllTypes_NestedMessage_Builder*)clearBb
{
  [_result clearBb];
  return self;
}

@end


@interface TestAllTypes_OptionalGroup ()


@end


@implementation TestAllTypes_OptionalGroup

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypes_OptionalGroup *)parseFromData:(NSData *)data
{
  return (TestAllTypes_OptionalGroup *)[[[TestAllTypes_OptionalGroup builder] mergeFromData:data] build];
}

+ (TestAllTypes_OptionalGroup *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_OptionalGroup*)[[[TestAllTypes_OptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_OptionalGroup *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypes_OptionalGroup*)[[[TestAllTypes_OptionalGroup builder] mergeFromInputStream:input] build];
}

+ (TestAllTypes_OptionalGroup *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_OptionalGroup*)[[[TestAllTypes_OptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_OptionalGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypes_OptionalGroup builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypes_OptionalGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypes_OptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_OptionalGroup_Builder *)builder
{
  return [[TestAllTypes_OptionalGroup_Builder alloc] init];
}

+ (TestAllTypes_OptionalGroup_Builder *)builderWithPrototype:(TestAllTypes_OptionalGroup *)prototype
{
  return [[TestAllTypes_OptionalGroup builder] mergeFrom:prototype];
}

- (TestAllTypes_OptionalGroup_Builder *)builder
{
  return [TestAllTypes_OptionalGroup builder];
}

- (TestAllTypes_OptionalGroup_Builder *)toBuilder
{
  return [TestAllTypes_OptionalGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_OptionalGroup class]]) {
    return NO;
  }
  TestAllTypes_OptionalGroup *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypes_OptionalGroup_Builder()

@property (strong) TestAllTypes_OptionalGroup *result;

@end


@implementation TestAllTypes_OptionalGroup_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypes_OptionalGroup alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypes_OptionalGroup_Builder *)clear
{
  self.result = [[TestAllTypes_OptionalGroup alloc] init];
  return self;
}

- (TestAllTypes_OptionalGroup_Builder *)clone
{
  return [TestAllTypes_OptionalGroup builderWithPrototype:_result];
}

- (TestAllTypes_OptionalGroup *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypes_OptionalGroup *)buildPartial
{
  TestAllTypes_OptionalGroup *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypes_OptionalGroup_Builder *)mergeFrom:(TestAllTypes_OptionalGroup *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypes_OptionalGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypes_OptionalGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestAllTypes_OptionalGroup_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestAllTypes_OptionalGroup_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestAllTypes_RepeatedGroup ()


@end


@implementation TestAllTypes_RepeatedGroup

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypes_RepeatedGroup *)parseFromData:(NSData *)data
{
  return (TestAllTypes_RepeatedGroup *)[[[TestAllTypes_RepeatedGroup builder] mergeFromData:data] build];
}

+ (TestAllTypes_RepeatedGroup *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_RepeatedGroup*)[[[TestAllTypes_RepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_RepeatedGroup *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypes_RepeatedGroup*)[[[TestAllTypes_RepeatedGroup builder] mergeFromInputStream:input] build];
}

+ (TestAllTypes_RepeatedGroup *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypes_RepeatedGroup*)[[[TestAllTypes_RepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_RepeatedGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypes_RepeatedGroup builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypes_RepeatedGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypes_RepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypes_RepeatedGroup_Builder *)builder
{
  return [[TestAllTypes_RepeatedGroup_Builder alloc] init];
}

+ (TestAllTypes_RepeatedGroup_Builder *)builderWithPrototype:(TestAllTypes_RepeatedGroup *)prototype
{
  return [[TestAllTypes_RepeatedGroup builder] mergeFrom:prototype];
}

- (TestAllTypes_RepeatedGroup_Builder *)builder
{
  return [TestAllTypes_RepeatedGroup builder];
}

- (TestAllTypes_RepeatedGroup_Builder *)toBuilder
{
  return [TestAllTypes_RepeatedGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_RepeatedGroup class]]) {
    return NO;
  }
  TestAllTypes_RepeatedGroup *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypes_RepeatedGroup_Builder()

@property (strong) TestAllTypes_RepeatedGroup *result;

@end


@implementation TestAllTypes_RepeatedGroup_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypes_RepeatedGroup alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypes_RepeatedGroup_Builder *)clear
{
  self.result = [[TestAllTypes_RepeatedGroup alloc] init];
  return self;
}

- (TestAllTypes_RepeatedGroup_Builder *)clone
{
  return [TestAllTypes_RepeatedGroup builderWithPrototype:_result];
}

- (TestAllTypes_RepeatedGroup *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypes_RepeatedGroup *)buildPartial
{
  TestAllTypes_RepeatedGroup *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypes_RepeatedGroup_Builder *)mergeFrom:(TestAllTypes_RepeatedGroup *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypes_RepeatedGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypes_RepeatedGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestAllTypes_RepeatedGroup_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestAllTypes_RepeatedGroup_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestAllTypes_Builder()

@property (strong) TestAllTypes *result;

@end


@implementation TestAllTypes_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypes alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypes_Builder *)clear
{
  self.result = [[TestAllTypes alloc] init];
  return self;
}

- (TestAllTypes_Builder *)clone
{
  return [TestAllTypes builderWithPrototype:_result];
}

- (TestAllTypes *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypes *)buildPartial
{
  TestAllTypes *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypes_Builder *)mergeFrom:(TestAllTypes *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalForeignMessage) {
    [self mergeOptionalForeignMessage:other.optionalForeignMessage];
  }
  if (other.hasOptionalImportMessage) {
    [self mergeOptionalImportMessage:other.optionalImportMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalForeignEnum) {
    [self setOptionalForeignEnum:other.optionalForeignEnum];
  }
  if (other.hasOptionalImportEnum) {
    [self setOptionalImportEnum:other.optionalImportEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.repeatedInt32.count > 0) {
    if (_result.repeatedInt32 == nil) {
      _result.repeatedInt32 = [other.repeatedInt32 copy];
    } else {
      [_result.repeatedInt32 appendArray:other.repeatedInt32];
    }
  }
  if (other.repeatedInt64.count > 0) {
    if (_result.repeatedInt64 == nil) {
      _result.repeatedInt64 = [other.repeatedInt64 copy];
    } else {
      [_result.repeatedInt64 appendArray:other.repeatedInt64];
    }
  }
  if (other.repeatedUint32.count > 0) {
    if (_result.repeatedUint32 == nil) {
      _result.repeatedUint32 = [other.repeatedUint32 copy];
    } else {
      [_result.repeatedUint32 appendArray:other.repeatedUint32];
    }
  }
  if (other.repeatedUint64.count > 0) {
    if (_result.repeatedUint64 == nil) {
      _result.repeatedUint64 = [other.repeatedUint64 copy];
    } else {
      [_result.repeatedUint64 appendArray:other.repeatedUint64];
    }
  }
  if (other.repeatedSint32.count > 0) {
    if (_result.repeatedSint32 == nil) {
      _result.repeatedSint32 = [other.repeatedSint32 copy];
    } else {
      [_result.repeatedSint32 appendArray:other.repeatedSint32];
    }
  }
  if (other.repeatedSint64.count > 0) {
    if (_result.repeatedSint64 == nil) {
      _result.repeatedSint64 = [other.repeatedSint64 copy];
    } else {
      [_result.repeatedSint64 appendArray:other.repeatedSint64];
    }
  }
  if (other.repeatedFixed32.count > 0) {
    if (_result.repeatedFixed32 == nil) {
      _result.repeatedFixed32 = [other.repeatedFixed32 copy];
    } else {
      [_result.repeatedFixed32 appendArray:other.repeatedFixed32];
    }
  }
  if (other.repeatedFixed64.count > 0) {
    if (_result.repeatedFixed64 == nil) {
      _result.repeatedFixed64 = [other.repeatedFixed64 copy];
    } else {
      [_result.repeatedFixed64 appendArray:other.repeatedFixed64];
    }
  }
  if (other.repeatedSfixed32.count > 0) {
    if (_result.repeatedSfixed32 == nil) {
      _result.repeatedSfixed32 = [other.repeatedSfixed32 copy];
    } else {
      [_result.repeatedSfixed32 appendArray:other.repeatedSfixed32];
    }
  }
  if (other.repeatedSfixed64.count > 0) {
    if (_result.repeatedSfixed64 == nil) {
      _result.repeatedSfixed64 = [other.repeatedSfixed64 copy];
    } else {
      [_result.repeatedSfixed64 appendArray:other.repeatedSfixed64];
    }
  }
  if (other.repeatedFloat.count > 0) {
    if (_result.repeatedFloat == nil) {
      _result.repeatedFloat = [other.repeatedFloat copy];
    } else {
      [_result.repeatedFloat appendArray:other.repeatedFloat];
    }
  }
  if (other.repeatedDouble.count > 0) {
    if (_result.repeatedDouble == nil) {
      _result.repeatedDouble = [other.repeatedDouble copy];
    } else {
      [_result.repeatedDouble appendArray:other.repeatedDouble];
    }
  }
  if (other.repeatedBool.count > 0) {
    if (_result.repeatedBool == nil) {
      _result.repeatedBool = [other.repeatedBool copy];
    } else {
      [_result.repeatedBool appendArray:other.repeatedBool];
    }
  }
  if (other.repeatedString.count > 0) {
    if (_result.repeatedString == nil) {
      _result.repeatedString = [[NSMutableArray alloc] initWithArray:other.repeatedString];
    } else {
      [_result.repeatedString addObjectsFromArray:other.repeatedString];
    }
  }
  if (other.repeatedBytes.count > 0) {
    if (_result.repeatedBytes == nil) {
      _result.repeatedBytes = [[NSMutableArray alloc] initWithArray:other.repeatedBytes];
    } else {
      [_result.repeatedBytes addObjectsFromArray:other.repeatedBytes];
    }
  }
  if (other.repeatedGroup.count > 0) {
    if (_result.repeatedGroup == nil) {
      _result.repeatedGroup = [[NSMutableArray alloc] initWithArray:other.repeatedGroup];
    } else {
      [_result.repeatedGroup addObjectsFromArray:other.repeatedGroup];
    }
  }
  if (other.repeatedNestedMessage.count > 0) {
    if (_result.repeatedNestedMessage == nil) {
      _result.repeatedNestedMessage = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessage];
    } else {
      [_result.repeatedNestedMessage addObjectsFromArray:other.repeatedNestedMessage];
    }
  }
  if (other.repeatedForeignMessage.count > 0) {
    if (_result.repeatedForeignMessage == nil) {
      _result.repeatedForeignMessage = [[NSMutableArray alloc] initWithArray:other.repeatedForeignMessage];
    } else {
      [_result.repeatedForeignMessage addObjectsFromArray:other.repeatedForeignMessage];
    }
  }
  if (other.repeatedImportMessage.count > 0) {
    if (_result.repeatedImportMessage == nil) {
      _result.repeatedImportMessage = [[NSMutableArray alloc] initWithArray:other.repeatedImportMessage];
    } else {
      [_result.repeatedImportMessage addObjectsFromArray:other.repeatedImportMessage];
    }
  }
  if (other.repeatedNestedEnum.count > 0) {
    if (_result.repeatedNestedEnum == nil) {
      _result.repeatedNestedEnum = [other.repeatedNestedEnum copy];
    } else {
      [_result.repeatedNestedEnum appendArray:other.repeatedNestedEnum];
    }
  }
  if (other.repeatedForeignEnum.count > 0) {
    if (_result.repeatedForeignEnum == nil) {
      _result.repeatedForeignEnum = [other.repeatedForeignEnum copy];
    } else {
      [_result.repeatedForeignEnum appendArray:other.repeatedForeignEnum];
    }
  }
  if (other.repeatedImportEnum.count > 0) {
    if (_result.repeatedImportEnum == nil) {
      _result.repeatedImportEnum = [other.repeatedImportEnum copy];
    } else {
      [_result.repeatedImportEnum appendArray:other.repeatedImportEnum];
    }
  }
  if (other.repeatedStringPiece.count > 0) {
    if (_result.repeatedStringPiece == nil) {
      _result.repeatedStringPiece = [[NSMutableArray alloc] initWithArray:other.repeatedStringPiece];
    } else {
      [_result.repeatedStringPiece addObjectsFromArray:other.repeatedStringPiece];
    }
  }
  if (other.repeatedCord.count > 0) {
    if (_result.repeatedCord == nil) {
      _result.repeatedCord = [[NSMutableArray alloc] initWithArray:other.repeatedCord];
    } else {
      [_result.repeatedCord addObjectsFromArray:other.repeatedCord];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultForeignEnum) {
    [self setDefaultForeignEnum:other.defaultForeignEnum];
  }
  if (other.hasDefaultImportEnum) {
    [self setDefaultImportEnum:other.defaultImportEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypes_OptionalGroup_Builder *subBuilder = [TestAllTypes_OptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypes_NestedMessage_Builder *subBuilder = [TestAllTypes_NestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        if (self.hasOptionalForeignMessage) {
          [subBuilder mergeFrom:self.optionalForeignMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ImportMessage_Builder *subBuilder = [ImportMessage builder];
        if (self.hasOptionalImportMessage) {
          [subBuilder mergeFrom:self.optionalImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue((TestAllTypes_NestedEnum)value)) {
          [self setOptionalNestedEnum:(TestAllTypes_NestedEnum)value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue((ForeignEnum)value)) {
          [self setOptionalForeignEnum:(ForeignEnum)value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue((ImportEnum)value)) {
          [self setOptionalImportEnum:(ImportEnum)value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypes_RepeatedGroup_Builder *subBuilder = [TestAllTypes_RepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypes_NestedMessage_Builder *subBuilder = [TestAllTypes_NestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        ImportMessage_Builder *subBuilder = [ImportMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 416: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:52 value:value];
        }
        break;
      }
      case 424: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self addRepeatedImportEnum:value];
        } else {
          [unknownFields mergeVarintField:53 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue((TestAllTypes_NestedEnum)value)) {
          [self setDefaultNestedEnum:(TestAllTypes_NestedEnum)value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 656: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue((ForeignEnum)value)) {
          [self setDefaultForeignEnum:(ForeignEnum)value];
        } else {
          [unknownFields mergeVarintField:82 value:value];
        }
        break;
      }
      case 664: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue((ImportEnum)value)) {
          [self setDefaultImportEnum:(ImportEnum)value];
        } else {
          [unknownFields mergeVarintField:83 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
    }
  }
}

- (BOOL)hasOptionalInt32
{
  return _result.hasOptionalInt32;
}

- (int32_t)optionalInt32
{
  return _result.optionalInt32;
}

- (TestAllTypes_Builder*)setOptionalInt32:(int32_t)value
{
  _result.optionalInt32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalInt32
{
  [_result clearOptionalInt32];
  return self;
}

- (BOOL)hasOptionalInt64
{
  return _result.hasOptionalInt64;
}

- (int64_t)optionalInt64
{
  return _result.optionalInt64;
}

- (TestAllTypes_Builder*)setOptionalInt64:(int64_t)value
{
  _result.optionalInt64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalInt64
{
  [_result clearOptionalInt64];
  return self;
}

- (BOOL)hasOptionalUint32
{
  return _result.hasOptionalUint32;
}

- (uint32_t)optionalUint32
{
  return _result.optionalUint32;
}

- (TestAllTypes_Builder*)setOptionalUint32:(uint32_t)value
{
  _result.optionalUint32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalUint32
{
  [_result clearOptionalUint32];
  return self;
}

- (BOOL)hasOptionalUint64
{
  return _result.hasOptionalUint64;
}

- (uint64_t)optionalUint64
{
  return _result.optionalUint64;
}

- (TestAllTypes_Builder*)setOptionalUint64:(uint64_t)value
{
  _result.optionalUint64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalUint64
{
  [_result clearOptionalUint64];
  return self;
}

- (BOOL)hasOptionalSint32
{
  return _result.hasOptionalSint32;
}

- (int32_t)optionalSint32
{
  return _result.optionalSint32;
}

- (TestAllTypes_Builder*)setOptionalSint32:(int32_t)value
{
  _result.optionalSint32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalSint32
{
  [_result clearOptionalSint32];
  return self;
}

- (BOOL)hasOptionalSint64
{
  return _result.hasOptionalSint64;
}

- (int64_t)optionalSint64
{
  return _result.optionalSint64;
}

- (TestAllTypes_Builder*)setOptionalSint64:(int64_t)value
{
  _result.optionalSint64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalSint64
{
  [_result clearOptionalSint64];
  return self;
}

- (BOOL)hasOptionalFixed32
{
  return _result.hasOptionalFixed32;
}

- (uint32_t)optionalFixed32
{
  return _result.optionalFixed32;
}

- (TestAllTypes_Builder*)setOptionalFixed32:(uint32_t)value
{
  _result.optionalFixed32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalFixed32
{
  [_result clearOptionalFixed32];
  return self;
}

- (BOOL)hasOptionalFixed64
{
  return _result.hasOptionalFixed64;
}

- (uint64_t)optionalFixed64
{
  return _result.optionalFixed64;
}

- (TestAllTypes_Builder*)setOptionalFixed64:(uint64_t)value
{
  _result.optionalFixed64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalFixed64
{
  [_result clearOptionalFixed64];
  return self;
}

- (BOOL)hasOptionalSfixed32
{
  return _result.hasOptionalSfixed32;
}

- (int32_t)optionalSfixed32
{
  return _result.optionalSfixed32;
}

- (TestAllTypes_Builder*)setOptionalSfixed32:(int32_t)value
{
  _result.optionalSfixed32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalSfixed32
{
  [_result clearOptionalSfixed32];
  return self;
}

- (BOOL)hasOptionalSfixed64
{
  return _result.hasOptionalSfixed64;
}

- (int64_t)optionalSfixed64
{
  return _result.optionalSfixed64;
}

- (TestAllTypes_Builder*)setOptionalSfixed64:(int64_t)value
{
  _result.optionalSfixed64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalSfixed64
{
  [_result clearOptionalSfixed64];
  return self;
}

- (BOOL)hasOptionalFloat
{
  return _result.hasOptionalFloat;
}

- (Float32)optionalFloat
{
  return _result.optionalFloat;
}

- (TestAllTypes_Builder*)setOptionalFloat:(Float32)value
{
  _result.optionalFloat = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalFloat
{
  [_result clearOptionalFloat];
  return self;
}

- (BOOL)hasOptionalDouble
{
  return _result.hasOptionalDouble;
}

- (Float64)optionalDouble
{
  return _result.optionalDouble;
}

- (TestAllTypes_Builder*)setOptionalDouble:(Float64)value
{
  _result.optionalDouble = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalDouble
{
  [_result clearOptionalDouble];
  return self;
}

- (BOOL)hasOptionalBool
{
  return _result.hasOptionalBool;
}

- (BOOL)optionalBool
{
  return _result.optionalBool;
}

- (TestAllTypes_Builder*)setOptionalBool:(BOOL)value
{
  _result.optionalBool = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalBool
{
  [_result clearOptionalBool];
  return self;
}

- (BOOL)hasOptionalString
{
  return _result.hasOptionalString;
}

- (NSString *)optionalString
{
  return _result.optionalString;
}

- (TestAllTypes_Builder*)setOptionalString:(NSString *)value
{
  _result.optionalString = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalString
{
  [_result clearOptionalString];
  return self;
}

- (BOOL)hasOptionalBytes
{
  return _result.hasOptionalBytes;
}

- (NSData *)optionalBytes
{
  return _result.optionalBytes;
}

- (TestAllTypes_Builder*)setOptionalBytes:(NSData *)value
{
  _result.optionalBytes = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalBytes
{
  [_result clearOptionalBytes];
  return self;
}

- (BOOL)hasOptionalGroup
{
  return _result.hasOptionalGroup;
}

- (TestAllTypes_OptionalGroup *)optionalGroup
{
  return _result.optionalGroup;
}

- (TestAllTypes_Builder *)setOptionalGroup:(TestAllTypes_OptionalGroup *)value
{
  _result.optionalGroup = value;
  return self;
}

- (TestAllTypes_Builder *)setOptionalGroupBuilder:(TestAllTypes_OptionalGroup_Builder *)builderForValue
{
  return [self setOptionalGroup:[builderForValue build]];
}

- (TestAllTypes_Builder *)mergeOptionalGroup:(TestAllTypes_OptionalGroup *)value
{
  if (_result.hasOptionalGroup && _result.optionalGroup != nil) {
    _result.optionalGroup = [[[TestAllTypes_OptionalGroup builderWithPrototype:_result.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    _result.optionalGroup = value;
  }
  return self;
}

- (TestAllTypes_Builder *)clearOptionalGroup
{
  [_result clearOptionalGroup];
  return self;
}

- (BOOL)hasOptionalNestedMessage
{
  return _result.hasOptionalNestedMessage;
}

- (TestAllTypes_NestedMessage *)optionalNestedMessage
{
  return _result.optionalNestedMessage;
}

- (TestAllTypes_Builder *)setOptionalNestedMessage:(TestAllTypes_NestedMessage *)value
{
  _result.optionalNestedMessage = value;
  return self;
}

- (TestAllTypes_Builder *)setOptionalNestedMessageBuilder:(TestAllTypes_NestedMessage_Builder *)builderForValue
{
  return [self setOptionalNestedMessage:[builderForValue build]];
}

- (TestAllTypes_Builder *)mergeOptionalNestedMessage:(TestAllTypes_NestedMessage *)value
{
  if (_result.hasOptionalNestedMessage && _result.optionalNestedMessage != nil) {
    _result.optionalNestedMessage = [[[TestAllTypes_NestedMessage builderWithPrototype:_result.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalNestedMessage = value;
  }
  return self;
}

- (TestAllTypes_Builder *)clearOptionalNestedMessage
{
  [_result clearOptionalNestedMessage];
  return self;
}

- (BOOL)hasOptionalForeignMessage
{
  return _result.hasOptionalForeignMessage;
}

- (ForeignMessage *)optionalForeignMessage
{
  return _result.optionalForeignMessage;
}

- (TestAllTypes_Builder *)setOptionalForeignMessage:(ForeignMessage *)value
{
  _result.optionalForeignMessage = value;
  return self;
}

- (TestAllTypes_Builder *)setOptionalForeignMessageBuilder:(ForeignMessage_Builder *)builderForValue
{
  return [self setOptionalForeignMessage:[builderForValue build]];
}

- (TestAllTypes_Builder *)mergeOptionalForeignMessage:(ForeignMessage *)value
{
  if (_result.hasOptionalForeignMessage && _result.optionalForeignMessage != nil) {
    _result.optionalForeignMessage = [[[ForeignMessage builderWithPrototype:_result.optionalForeignMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalForeignMessage = value;
  }
  return self;
}

- (TestAllTypes_Builder *)clearOptionalForeignMessage
{
  [_result clearOptionalForeignMessage];
  return self;
}

- (BOOL)hasOptionalImportMessage
{
  return _result.hasOptionalImportMessage;
}

- (ImportMessage *)optionalImportMessage
{
  return _result.optionalImportMessage;
}

- (TestAllTypes_Builder *)setOptionalImportMessage:(ImportMessage *)value
{
  _result.optionalImportMessage = value;
  return self;
}

- (TestAllTypes_Builder *)setOptionalImportMessageBuilder:(ImportMessage_Builder *)builderForValue
{
  return [self setOptionalImportMessage:[builderForValue build]];
}

- (TestAllTypes_Builder *)mergeOptionalImportMessage:(ImportMessage *)value
{
  if (_result.hasOptionalImportMessage && _result.optionalImportMessage != nil) {
    _result.optionalImportMessage = [[[ImportMessage builderWithPrototype:_result.optionalImportMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalImportMessage = value;
  }
  return self;
}

- (TestAllTypes_Builder *)clearOptionalImportMessage
{
  [_result clearOptionalImportMessage];
  return self;
}

- (BOOL)hasOptionalNestedEnum
{
  return _result.hasOptionalNestedEnum;
}

- (TestAllTypes_NestedEnum)optionalNestedEnum
{
  return _result.optionalNestedEnum;
}

- (TestAllTypes_Builder *)setOptionalNestedEnum:(TestAllTypes_NestedEnum)value
{
  _result.optionalNestedEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearOptionalNestedEnum
{
  [_result clearOptionalNestedEnum];
  return self;
}

- (BOOL)hasOptionalForeignEnum
{
  return _result.hasOptionalForeignEnum;
}

- (ForeignEnum)optionalForeignEnum
{
  return _result.optionalForeignEnum;
}

- (TestAllTypes_Builder *)setOptionalForeignEnum:(ForeignEnum)value
{
  _result.optionalForeignEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearOptionalForeignEnum
{
  [_result clearOptionalForeignEnum];
  return self;
}

- (BOOL)hasOptionalImportEnum
{
  return _result.hasOptionalImportEnum;
}

- (ImportEnum)optionalImportEnum
{
  return _result.optionalImportEnum;
}

- (TestAllTypes_Builder *)setOptionalImportEnum:(ImportEnum)value
{
  _result.optionalImportEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearOptionalImportEnum
{
  [_result clearOptionalImportEnum];
  return self;
}

- (BOOL)hasOptionalStringPiece
{
  return _result.hasOptionalStringPiece;
}

- (NSString *)optionalStringPiece
{
  return _result.optionalStringPiece;
}

- (TestAllTypes_Builder*)setOptionalStringPiece:(NSString *)value
{
  _result.optionalStringPiece = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalStringPiece
{
  [_result clearOptionalStringPiece];
  return self;
}

- (BOOL)hasOptionalCord
{
  return _result.hasOptionalCord;
}

- (NSString *)optionalCord
{
  return _result.optionalCord;
}

- (TestAllTypes_Builder*)setOptionalCord:(NSString *)value
{
  _result.optionalCord = value;
  return self;
}

- (TestAllTypes_Builder*)clearOptionalCord
{
  [_result clearOptionalCord];
  return self;
}

- (PBAppendableArray *)repeatedInt32
{
  return _result.repeatedInt32;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_result repeatedInt32AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedInt32:(int32_t)value
{
  [_result addRepeatedInt32:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedInt32Array:(NSArray *)array
{
  [_result setRepeatedInt32Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt32Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedInt32
{
  [_result clearRepeatedInt32];
  return self;
}

- (PBAppendableArray *)repeatedInt64
{
  return _result.repeatedInt64;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_result repeatedInt64AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedInt64:(int64_t)value
{
  [_result addRepeatedInt64:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedInt64Array:(NSArray *)array
{
  [_result setRepeatedInt64Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt64Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedInt64
{
  [_result clearRepeatedInt64];
  return self;
}

- (PBAppendableArray *)repeatedUint32
{
  return _result.repeatedUint32;
}

- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index
{
  return [_result repeatedUint32AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedUint32:(uint32_t)value
{
  [_result addRepeatedUint32:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedUint32Array:(NSArray *)array
{
  [_result setRepeatedUint32Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedUint32Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedUint32
{
  [_result clearRepeatedUint32];
  return self;
}

- (PBAppendableArray *)repeatedUint64
{
  return _result.repeatedUint64;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_result repeatedUint64AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedUint64:(uint64_t)value
{
  [_result addRepeatedUint64:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedUint64Array:(NSArray *)array
{
  [_result setRepeatedUint64Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedUint64Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedUint64
{
  [_result clearRepeatedUint64];
  return self;
}

- (PBAppendableArray *)repeatedSint32
{
  return _result.repeatedSint32;
}

- (int32_t)repeatedSint32AtIndex:(NSUInteger)index
{
  return [_result repeatedSint32AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedSint32:(int32_t)value
{
  [_result addRepeatedSint32:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSint32Array:(NSArray *)array
{
  [_result setRepeatedSint32Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSint32Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedSint32
{
  [_result clearRepeatedSint32];
  return self;
}

- (PBAppendableArray *)repeatedSint64
{
  return _result.repeatedSint64;
}

- (int64_t)repeatedSint64AtIndex:(NSUInteger)index
{
  return [_result repeatedSint64AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedSint64:(int64_t)value
{
  [_result addRepeatedSint64:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSint64Array:(NSArray *)array
{
  [_result setRepeatedSint64Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSint64Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedSint64
{
  [_result clearRepeatedSint64];
  return self;
}

- (PBAppendableArray *)repeatedFixed32
{
  return _result.repeatedFixed32;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed32AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedFixed32:(uint32_t)value
{
  [_result addRepeatedFixed32:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFixed32Array:(NSArray *)array
{
  [_result setRepeatedFixed32Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed32Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedFixed32
{
  [_result clearRepeatedFixed32];
  return self;
}

- (PBAppendableArray *)repeatedFixed64
{
  return _result.repeatedFixed64;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed64AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedFixed64:(uint64_t)value
{
  [_result addRepeatedFixed64:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFixed64Array:(NSArray *)array
{
  [_result setRepeatedFixed64Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed64Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedFixed64
{
  [_result clearRepeatedFixed64];
  return self;
}

- (PBAppendableArray *)repeatedSfixed32
{
  return _result.repeatedSfixed32;
}

- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index
{
  return [_result repeatedSfixed32AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedSfixed32:(int32_t)value
{
  [_result addRepeatedSfixed32:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSfixed32Array:(NSArray *)array
{
  [_result setRepeatedSfixed32Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSfixed32Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedSfixed32
{
  [_result clearRepeatedSfixed32];
  return self;
}

- (PBAppendableArray *)repeatedSfixed64
{
  return _result.repeatedSfixed64;
}

- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index
{
  return [_result repeatedSfixed64AtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedSfixed64:(int64_t)value
{
  [_result addRepeatedSfixed64:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSfixed64Array:(NSArray *)array
{
  [_result setRepeatedSfixed64Array:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSfixed64Values:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedSfixed64
{
  [_result clearRepeatedSfixed64];
  return self;
}

- (PBAppendableArray *)repeatedFloat
{
  return _result.repeatedFloat;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_result repeatedFloatAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedFloat:(Float32)value
{
  [_result addRepeatedFloat:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFloatArray:(NSArray *)array
{
  [_result setRepeatedFloatArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setRepeatedFloatValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedFloat
{
  [_result clearRepeatedFloat];
  return self;
}

- (PBAppendableArray *)repeatedDouble
{
  return _result.repeatedDouble;
}

- (Float64)repeatedDoubleAtIndex:(NSUInteger)index
{
  return [_result repeatedDoubleAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedDouble:(Float64)value
{
  [_result addRepeatedDouble:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedDoubleArray:(NSArray *)array
{
  [_result setRepeatedDoubleArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  [_result setRepeatedDoubleValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedDouble
{
  [_result clearRepeatedDouble];
  return self;
}

- (PBAppendableArray *)repeatedBool
{
  return _result.repeatedBool;
}

- (BOOL)repeatedBoolAtIndex:(NSUInteger)index
{
  return [_result repeatedBoolAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedBool:(BOOL)value
{
  [_result addRepeatedBool:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedBoolArray:(NSArray *)array
{
  [_result setRepeatedBoolArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  [_result setRepeatedBoolValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedBool
{
  [_result clearRepeatedBool];
  return self;
}

- (NSMutableArray *)repeatedString
{
  return _result.repeatedString;
}

- (NSString *)repeatedStringAtIndex:(NSUInteger)index
{
  return [_result repeatedStringAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedString:(NSString *)value
{
  [_result addRepeatedString:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedStringArray:(NSArray *)array
{
  [_result setRepeatedStringArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedString
{
  [_result clearRepeatedString];
  return self;
}

- (NSMutableArray *)repeatedBytes
{
  return _result.repeatedBytes;
}

- (NSData *)repeatedBytesAtIndex:(NSUInteger)index
{
  return [_result repeatedBytesAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedBytes:(NSData *)value
{
  [_result addRepeatedBytes:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedBytesArray:(NSArray *)array
{
  [_result setRepeatedBytesArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedBytes
{
  [_result clearRepeatedBytes];
  return self;
}

- (NSMutableArray *)repeatedGroup
{
  return _result.repeatedGroup;
}

- (TestAllTypes_RepeatedGroup *)repeatedGroupAtIndex:(NSUInteger)index
{
  return [_result repeatedGroupAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedGroup:(TestAllTypes_RepeatedGroup *)value
{
  [_result addRepeatedGroup:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedGroupArray:(NSArray *)array
{
  [_result setRepeatedGroupArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedGroup
{
  [_result clearRepeatedGroup];
  return self;
}

- (NSMutableArray *)repeatedNestedMessage
{
  return _result.repeatedNestedMessage;
}

- (TestAllTypes_NestedMessage *)repeatedNestedMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedNestedMessageAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedNestedMessage:(TestAllTypes_NestedMessage *)value
{
  [_result addRepeatedNestedMessage:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedNestedMessageArray:(NSArray *)array
{
  [_result setRepeatedNestedMessageArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedNestedMessage
{
  [_result clearRepeatedNestedMessage];
  return self;
}

- (NSMutableArray *)repeatedForeignMessage
{
  return _result.repeatedForeignMessage;
}

- (ForeignMessage *)repeatedForeignMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedForeignMessageAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedForeignMessage:(ForeignMessage *)value
{
  [_result addRepeatedForeignMessage:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedForeignMessageArray:(NSArray *)array
{
  [_result setRepeatedForeignMessageArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedForeignMessage
{
  [_result clearRepeatedForeignMessage];
  return self;
}

- (NSMutableArray *)repeatedImportMessage
{
  return _result.repeatedImportMessage;
}

- (ImportMessage *)repeatedImportMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedImportMessageAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedImportMessage:(ImportMessage *)value
{
  [_result addRepeatedImportMessage:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedImportMessageArray:(NSArray *)array
{
  [_result setRepeatedImportMessageArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedImportMessage
{
  [_result clearRepeatedImportMessage];
  return self;
}

- (PBAppendableArray *)repeatedNestedEnum
{
  return _result.repeatedNestedEnum;
}

- (TestAllTypes_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index{
  return [_result repeatedNestedEnumAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedNestedEnum:(TestAllTypes_NestedEnum)value
{
  [_result addRepeatedNestedEnum:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedNestedEnumArray:(NSArray *)array
{
  [_result setRepeatedNestedEnumArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedNestedEnumValues:(const TestAllTypes_NestedEnum *)values count:(NSUInteger)count
{
  [_result setRepeatedNestedEnumValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedNestedEnum
{
  [_result clearRepeatedNestedEnum];
  return self;
}

- (PBAppendableArray *)repeatedForeignEnum
{
  return _result.repeatedForeignEnum;
}

- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index{
  return [_result repeatedForeignEnumAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedForeignEnum:(ForeignEnum)value
{
  [_result addRepeatedForeignEnum:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedForeignEnumArray:(NSArray *)array
{
  [_result setRepeatedForeignEnumArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedForeignEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  [_result setRepeatedForeignEnumValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedForeignEnum
{
  [_result clearRepeatedForeignEnum];
  return self;
}

- (PBAppendableArray *)repeatedImportEnum
{
  return _result.repeatedImportEnum;
}

- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index{
  return [_result repeatedImportEnumAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedImportEnum:(ImportEnum)value
{
  [_result addRepeatedImportEnum:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedImportEnumArray:(NSArray *)array
{
  [_result setRepeatedImportEnumArray:array];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedImportEnumValues:(const ImportEnum *)values count:(NSUInteger)count
{
  [_result setRepeatedImportEnumValues:values count:count];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedImportEnum
{
  [_result clearRepeatedImportEnum];
  return self;
}

- (NSMutableArray *)repeatedStringPiece
{
  return _result.repeatedStringPiece;
}

- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index
{
  return [_result repeatedStringPieceAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedStringPiece:(NSString *)value
{
  [_result addRepeatedStringPiece:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedStringPieceArray:(NSArray *)array
{
  [_result setRepeatedStringPieceArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedStringPiece
{
  [_result clearRepeatedStringPiece];
  return self;
}

- (NSMutableArray *)repeatedCord
{
  return _result.repeatedCord;
}

- (NSString *)repeatedCordAtIndex:(NSUInteger)index
{
  return [_result repeatedCordAtIndex:index];
}

- (TestAllTypes_Builder *)addRepeatedCord:(NSString *)value
{
  [_result addRepeatedCord:value];
  return self;
}

- (TestAllTypes_Builder *)setRepeatedCordArray:(NSArray *)array
{
  [_result setRepeatedCordArray:array];
  return self;
}

- (TestAllTypes_Builder *)clearRepeatedCord
{
  [_result clearRepeatedCord];
  return self;
}

- (BOOL)hasDefaultInt32
{
  return _result.hasDefaultInt32;
}

- (int32_t)defaultInt32
{
  return _result.defaultInt32;
}

- (TestAllTypes_Builder*)setDefaultInt32:(int32_t)value
{
  _result.defaultInt32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultInt32
{
  [_result clearDefaultInt32];
  return self;
}

- (BOOL)hasDefaultInt64
{
  return _result.hasDefaultInt64;
}

- (int64_t)defaultInt64
{
  return _result.defaultInt64;
}

- (TestAllTypes_Builder*)setDefaultInt64:(int64_t)value
{
  _result.defaultInt64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultInt64
{
  [_result clearDefaultInt64];
  return self;
}

- (BOOL)hasDefaultUint32
{
  return _result.hasDefaultUint32;
}

- (uint32_t)defaultUint32
{
  return _result.defaultUint32;
}

- (TestAllTypes_Builder*)setDefaultUint32:(uint32_t)value
{
  _result.defaultUint32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultUint32
{
  [_result clearDefaultUint32];
  return self;
}

- (BOOL)hasDefaultUint64
{
  return _result.hasDefaultUint64;
}

- (uint64_t)defaultUint64
{
  return _result.defaultUint64;
}

- (TestAllTypes_Builder*)setDefaultUint64:(uint64_t)value
{
  _result.defaultUint64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultUint64
{
  [_result clearDefaultUint64];
  return self;
}

- (BOOL)hasDefaultSint32
{
  return _result.hasDefaultSint32;
}

- (int32_t)defaultSint32
{
  return _result.defaultSint32;
}

- (TestAllTypes_Builder*)setDefaultSint32:(int32_t)value
{
  _result.defaultSint32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultSint32
{
  [_result clearDefaultSint32];
  return self;
}

- (BOOL)hasDefaultSint64
{
  return _result.hasDefaultSint64;
}

- (int64_t)defaultSint64
{
  return _result.defaultSint64;
}

- (TestAllTypes_Builder*)setDefaultSint64:(int64_t)value
{
  _result.defaultSint64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultSint64
{
  [_result clearDefaultSint64];
  return self;
}

- (BOOL)hasDefaultFixed32
{
  return _result.hasDefaultFixed32;
}

- (uint32_t)defaultFixed32
{
  return _result.defaultFixed32;
}

- (TestAllTypes_Builder*)setDefaultFixed32:(uint32_t)value
{
  _result.defaultFixed32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultFixed32
{
  [_result clearDefaultFixed32];
  return self;
}

- (BOOL)hasDefaultFixed64
{
  return _result.hasDefaultFixed64;
}

- (uint64_t)defaultFixed64
{
  return _result.defaultFixed64;
}

- (TestAllTypes_Builder*)setDefaultFixed64:(uint64_t)value
{
  _result.defaultFixed64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultFixed64
{
  [_result clearDefaultFixed64];
  return self;
}

- (BOOL)hasDefaultSfixed32
{
  return _result.hasDefaultSfixed32;
}

- (int32_t)defaultSfixed32
{
  return _result.defaultSfixed32;
}

- (TestAllTypes_Builder*)setDefaultSfixed32:(int32_t)value
{
  _result.defaultSfixed32 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultSfixed32
{
  [_result clearDefaultSfixed32];
  return self;
}

- (BOOL)hasDefaultSfixed64
{
  return _result.hasDefaultSfixed64;
}

- (int64_t)defaultSfixed64
{
  return _result.defaultSfixed64;
}

- (TestAllTypes_Builder*)setDefaultSfixed64:(int64_t)value
{
  _result.defaultSfixed64 = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultSfixed64
{
  [_result clearDefaultSfixed64];
  return self;
}

- (BOOL)hasDefaultFloat
{
  return _result.hasDefaultFloat;
}

- (Float32)defaultFloat
{
  return _result.defaultFloat;
}

- (TestAllTypes_Builder*)setDefaultFloat:(Float32)value
{
  _result.defaultFloat = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultFloat
{
  [_result clearDefaultFloat];
  return self;
}

- (BOOL)hasDefaultDouble
{
  return _result.hasDefaultDouble;
}

- (Float64)defaultDouble
{
  return _result.defaultDouble;
}

- (TestAllTypes_Builder*)setDefaultDouble:(Float64)value
{
  _result.defaultDouble = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultDouble
{
  [_result clearDefaultDouble];
  return self;
}

- (BOOL)hasDefaultBool
{
  return _result.hasDefaultBool;
}

- (BOOL)defaultBool
{
  return _result.defaultBool;
}

- (TestAllTypes_Builder*)setDefaultBool:(BOOL)value
{
  _result.defaultBool = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultBool
{
  [_result clearDefaultBool];
  return self;
}

- (BOOL)hasDefaultString
{
  return _result.hasDefaultString;
}

- (NSString *)defaultString
{
  return _result.defaultString;
}

- (TestAllTypes_Builder*)setDefaultString:(NSString *)value
{
  _result.defaultString = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultString
{
  [_result clearDefaultString];
  return self;
}

- (BOOL)hasDefaultBytes
{
  return _result.hasDefaultBytes;
}

- (NSData *)defaultBytes
{
  return _result.defaultBytes;
}

- (TestAllTypes_Builder*)setDefaultBytes:(NSData *)value
{
  _result.defaultBytes = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultBytes
{
  [_result clearDefaultBytes];
  return self;
}

- (BOOL)hasDefaultNestedEnum
{
  return _result.hasDefaultNestedEnum;
}

- (TestAllTypes_NestedEnum)defaultNestedEnum
{
  return _result.defaultNestedEnum;
}

- (TestAllTypes_Builder *)setDefaultNestedEnum:(TestAllTypes_NestedEnum)value
{
  _result.defaultNestedEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearDefaultNestedEnum
{
  [_result clearDefaultNestedEnum];
  return self;
}

- (BOOL)hasDefaultForeignEnum
{
  return _result.hasDefaultForeignEnum;
}

- (ForeignEnum)defaultForeignEnum
{
  return _result.defaultForeignEnum;
}

- (TestAllTypes_Builder *)setDefaultForeignEnum:(ForeignEnum)value
{
  _result.defaultForeignEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearDefaultForeignEnum
{
  [_result clearDefaultForeignEnum];
  return self;
}

- (BOOL)hasDefaultImportEnum
{
  return _result.hasDefaultImportEnum;
}

- (ImportEnum)defaultImportEnum
{
  return _result.defaultImportEnum;
}

- (TestAllTypes_Builder *)setDefaultImportEnum:(ImportEnum)value
{
  _result.defaultImportEnum = value;
  return self;
}

- (TestAllTypes_Builder *)clearDefaultImportEnum
{
  [_result clearDefaultImportEnum];
  return self;
}

- (BOOL)hasDefaultStringPiece
{
  return _result.hasDefaultStringPiece;
}

- (NSString *)defaultStringPiece
{
  return _result.defaultStringPiece;
}

- (TestAllTypes_Builder*)setDefaultStringPiece:(NSString *)value
{
  _result.defaultStringPiece = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultStringPiece
{
  [_result clearDefaultStringPiece];
  return self;
}

- (BOOL)hasDefaultCord
{
  return _result.hasDefaultCord;
}

- (NSString *)defaultCord
{
  return _result.defaultCord;
}

- (TestAllTypes_Builder*)setDefaultCord:(NSString *)value
{
  _result.defaultCord = value;
  return self;
}

- (TestAllTypes_Builder*)clearDefaultCord
{
  [_result clearDefaultCord];
  return self;
}

@end


@interface TestDeprecatedFields ()


@end


@implementation TestDeprecatedFields

- (BOOL)hasDeprecatedInt32
{
  return _hasDeprecatedInt32;
}

- (void)setDeprecatedInt32:(int32_t)value
{
  _hasDeprecatedInt32 = YES;
  _deprecatedInt32 = value;
}

- (void)clearDeprecatedInt32
{
  _hasDeprecatedInt32 = NO;
  _deprecatedInt32 = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _deprecatedInt32 = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasDeprecatedInt32) {
    [output writeInt32:1 value:self.deprecatedInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasDeprecatedInt32) {
    size_ += computeInt32Size(1, self.deprecatedInt32);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDeprecatedFields *)parseFromData:(NSData *)data
{
  return (TestDeprecatedFields *)[[[TestDeprecatedFields builder] mergeFromData:data] build];
}

+ (TestDeprecatedFields *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedFields *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromInputStream:input] build];
}

+ (TestDeprecatedFields *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedFields *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDeprecatedFields builder] mergeFromCodedInputStream:input] build];
}

+ (TestDeprecatedFields *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDeprecatedFields builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedFields_Builder *)builder
{
  return [[TestDeprecatedFields_Builder alloc] init];
}

+ (TestDeprecatedFields_Builder *)builderWithPrototype:(TestDeprecatedFields *)prototype
{
  return [[TestDeprecatedFields builder] mergeFrom:prototype];
}

- (TestDeprecatedFields_Builder *)builder
{
  return [TestDeprecatedFields builder];
}

- (TestDeprecatedFields_Builder *)toBuilder
{
  return [TestDeprecatedFields builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasDeprecatedInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deprecatedInt32", @(self.deprecatedInt32)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDeprecatedFields class]]) {
    return NO;
  }
  TestDeprecatedFields *otherMessage = other;
  return
    (self.hasDeprecatedInt32 == otherMessage.hasDeprecatedInt32 && (!self.hasDeprecatedInt32 || self.deprecatedInt32 == otherMessage.deprecatedInt32)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasDeprecatedInt32) {
    hashCode = hashCode * 31 + [@(self.deprecatedInt32) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDeprecatedFields_Builder()

@property (strong) TestDeprecatedFields *result;

@end


@implementation TestDeprecatedFields_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDeprecatedFields alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDeprecatedFields_Builder *)clear
{
  self.result = [[TestDeprecatedFields alloc] init];
  return self;
}

- (TestDeprecatedFields_Builder *)clone
{
  return [TestDeprecatedFields builderWithPrototype:_result];
}

- (TestDeprecatedFields *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDeprecatedFields *)buildPartial
{
  TestDeprecatedFields *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDeprecatedFields_Builder *)mergeFrom:(TestDeprecatedFields *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasDeprecatedInt32) {
    [self setDeprecatedInt32:other.deprecatedInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDeprecatedFields_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDeprecatedFields_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeprecatedInt32:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasDeprecatedInt32
{
  return _result.hasDeprecatedInt32;
}

- (int32_t)deprecatedInt32
{
  return _result.deprecatedInt32;
}

- (TestDeprecatedFields_Builder*)setDeprecatedInt32:(int32_t)value
{
  _result.deprecatedInt32 = value;
  return self;
}

- (TestDeprecatedFields_Builder*)clearDeprecatedInt32
{
  [_result clearDeprecatedInt32];
  return self;
}

@end


@interface ForeignMessage ()


@end


@implementation ForeignMessage

- (BOOL)hasC
{
  return _hasC;
}

- (void)setC:(int32_t)value
{
  _hasC = YES;
  _c = value;
}

- (void)clearC
{
  _hasC = NO;
  _c = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _c = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasC) {
    [output writeInt32:1 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasC) {
    size_ += computeInt32Size(1, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (ForeignMessage *)parseFromData:(NSData *)data
{
  return (ForeignMessage *)[[[ForeignMessage builder] mergeFromData:data] build];
}

+ (ForeignMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromInputStream:input] build];
}

+ (ForeignMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[ForeignMessage builder] mergeFromCodedInputStream:input] build];
}

+ (ForeignMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[ForeignMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessage_Builder *)builder
{
  return [[ForeignMessage_Builder alloc] init];
}

+ (ForeignMessage_Builder *)builderWithPrototype:(ForeignMessage *)prototype
{
  return [[ForeignMessage builder] mergeFrom:prototype];
}

- (ForeignMessage_Builder *)builder
{
  return [ForeignMessage builder];
}

- (ForeignMessage_Builder *)toBuilder
{
  return [ForeignMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", @(self.c)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignMessage class]]) {
    return NO;
  }
  ForeignMessage *otherMessage = other;
  return
    (self.hasC == otherMessage.hasC && (!self.hasC || self.c == otherMessage.c)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasC) {
    hashCode = hashCode * 31 + [@(self.c) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface ForeignMessage_Builder()

@property (strong) ForeignMessage *result;

@end


@implementation ForeignMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[ForeignMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (ForeignMessage_Builder *)clear
{
  self.result = [[ForeignMessage alloc] init];
  return self;
}

- (ForeignMessage_Builder *)clone
{
  return [ForeignMessage builderWithPrototype:_result];
}

- (ForeignMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (ForeignMessage *)buildPartial
{
  ForeignMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (ForeignMessage_Builder *)mergeFrom:(ForeignMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (ForeignMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (ForeignMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasC
{
  return _result.hasC;
}

- (int32_t)c
{
  return _result.c;
}

- (ForeignMessage_Builder*)setC:(int32_t)value
{
  _result.c = value;
  return self;
}

- (ForeignMessage_Builder*)clearC
{
  [_result clearC];
  return self;
}

@end


@interface TestAllExtensions ()


@end


@implementation TestAllExtensions

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:1 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllExtensions *)parseFromData:(NSData *)data
{
  return (TestAllExtensions *)[[[TestAllExtensions builder] mergeFromData:data] build];
}

+ (TestAllExtensions *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensions *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromInputStream:input] build];
}

+ (TestAllExtensions *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllExtensions builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensions_Builder *)builder
{
  return [[TestAllExtensions_Builder alloc] init];
}

+ (TestAllExtensions_Builder *)builderWithPrototype:(TestAllExtensions *)prototype
{
  return [[TestAllExtensions builder] mergeFrom:prototype];
}

- (TestAllExtensions_Builder *)builder
{
  return [TestAllExtensions builder];
}

- (TestAllExtensions_Builder *)toBuilder
{
  return [TestAllExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:1 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllExtensions class]]) {
    return NO;
  }
  TestAllExtensions *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllExtensions_Builder()

@property (strong) TestAllExtensions *result;

@end


@implementation TestAllExtensions_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllExtensions alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestAllExtensions_Builder *)clear
{
  self.result = [[TestAllExtensions alloc] init];
  return self;
}

- (TestAllExtensions_Builder *)clone
{
  return [TestAllExtensions builderWithPrototype:_result];
}

- (TestAllExtensions *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllExtensions *)buildPartial
{
  TestAllExtensions *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllExtensions_Builder *)mergeFrom:(TestAllExtensions *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface OptionalGroup_extension ()


@end


@implementation OptionalGroup_extension

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (OptionalGroup_extension *)parseFromData:(NSData *)data
{
  return (OptionalGroup_extension *)[[[OptionalGroup_extension builder] mergeFromData:data] build];
}

+ (OptionalGroup_extension *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension *)parseFromInputStream:(NSInputStream *)input
{
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromInputStream:input] build];
}

+ (OptionalGroup_extension *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[OptionalGroup_extension builder] mergeFromCodedInputStream:input] build];
}

+ (OptionalGroup_extension *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[OptionalGroup_extension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension_Builder *)builder
{
  return [[OptionalGroup_extension_Builder alloc] init];
}

+ (OptionalGroup_extension_Builder *)builderWithPrototype:(OptionalGroup_extension *)prototype
{
  return [[OptionalGroup_extension builder] mergeFrom:prototype];
}

- (OptionalGroup_extension_Builder *)builder
{
  return [OptionalGroup_extension builder];
}

- (OptionalGroup_extension_Builder *)toBuilder
{
  return [OptionalGroup_extension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OptionalGroup_extension class]]) {
    return NO;
  }
  OptionalGroup_extension *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface OptionalGroup_extension_Builder()

@property (strong) OptionalGroup_extension *result;

@end


@implementation OptionalGroup_extension_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[OptionalGroup_extension alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (OptionalGroup_extension_Builder *)clear
{
  self.result = [[OptionalGroup_extension alloc] init];
  return self;
}

- (OptionalGroup_extension_Builder *)clone
{
  return [OptionalGroup_extension builderWithPrototype:_result];
}

- (OptionalGroup_extension *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (OptionalGroup_extension *)buildPartial
{
  OptionalGroup_extension *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (OptionalGroup_extension_Builder *)mergeFrom:(OptionalGroup_extension *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (OptionalGroup_extension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (OptionalGroup_extension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (OptionalGroup_extension_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (OptionalGroup_extension_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface RepeatedGroup_extension ()


@end


@implementation RepeatedGroup_extension

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (RepeatedGroup_extension *)parseFromData:(NSData *)data
{
  return (RepeatedGroup_extension *)[[[RepeatedGroup_extension builder] mergeFromData:data] build];
}

+ (RepeatedGroup_extension *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension *)parseFromInputStream:(NSInputStream *)input
{
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromInputStream:input] build];
}

+ (RepeatedGroup_extension *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[RepeatedGroup_extension builder] mergeFromCodedInputStream:input] build];
}

+ (RepeatedGroup_extension *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[RepeatedGroup_extension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension_Builder *)builder
{
  return [[RepeatedGroup_extension_Builder alloc] init];
}

+ (RepeatedGroup_extension_Builder *)builderWithPrototype:(RepeatedGroup_extension *)prototype
{
  return [[RepeatedGroup_extension builder] mergeFrom:prototype];
}

- (RepeatedGroup_extension_Builder *)builder
{
  return [RepeatedGroup_extension builder];
}

- (RepeatedGroup_extension_Builder *)toBuilder
{
  return [RepeatedGroup_extension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RepeatedGroup_extension class]]) {
    return NO;
  }
  RepeatedGroup_extension *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface RepeatedGroup_extension_Builder()

@property (strong) RepeatedGroup_extension *result;

@end


@implementation RepeatedGroup_extension_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[RepeatedGroup_extension alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (RepeatedGroup_extension_Builder *)clear
{
  self.result = [[RepeatedGroup_extension alloc] init];
  return self;
}

- (RepeatedGroup_extension_Builder *)clone
{
  return [RepeatedGroup_extension builderWithPrototype:_result];
}

- (RepeatedGroup_extension *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (RepeatedGroup_extension *)buildPartial
{
  RepeatedGroup_extension *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (RepeatedGroup_extension_Builder *)mergeFrom:(RepeatedGroup_extension *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (RepeatedGroup_extension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (RepeatedGroup_extension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (RepeatedGroup_extension_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (RepeatedGroup_extension_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestNestedExtension ()


@end


@implementation TestNestedExtension

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

+ (id<PBExtensionField>)test
{
  return TestNestedExtension_test;
}
- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestNestedExtension *)parseFromData:(NSData *)data
{
  return (TestNestedExtension *)[[[TestNestedExtension builder] mergeFromData:data] build];
}

+ (TestNestedExtension *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtension *)parseFromInputStream:(NSInputStream *)input
{
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromInputStream:input] build];
}

+ (TestNestedExtension *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtension *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestNestedExtension builder] mergeFromCodedInputStream:input] build];
}

+ (TestNestedExtension *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestNestedExtension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtension_Builder *)builder
{
  return [[TestNestedExtension_Builder alloc] init];
}

+ (TestNestedExtension_Builder *)builderWithPrototype:(TestNestedExtension *)prototype
{
  return [[TestNestedExtension builder] mergeFrom:prototype];
}

- (TestNestedExtension_Builder *)builder
{
  return [TestNestedExtension builder];
}

- (TestNestedExtension_Builder *)toBuilder
{
  return [TestNestedExtension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedExtension class]]) {
    return NO;
  }
  TestNestedExtension *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestNestedExtension_Builder()

@property (strong) TestNestedExtension *result;

@end


@implementation TestNestedExtension_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestNestedExtension alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestNestedExtension_Builder *)clear
{
  self.result = [[TestNestedExtension alloc] init];
  return self;
}

- (TestNestedExtension_Builder *)clone
{
  return [TestNestedExtension builderWithPrototype:_result];
}

- (TestNestedExtension *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestNestedExtension *)buildPartial
{
  TestNestedExtension *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestNestedExtension_Builder *)mergeFrom:(TestNestedExtension *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestNestedExtension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestNestedExtension_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestRequired ()


@end


@implementation TestRequired

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (BOOL)hasDummy2
{
  return _hasDummy2;
}

- (void)setDummy2:(int32_t)value
{
  _hasDummy2 = YES;
  _dummy2 = value;
}

- (void)clearDummy2
{
  _hasDummy2 = NO;
  _dummy2 = 0;
}

- (BOOL)hasB
{
  return _hasB;
}

- (void)setB:(int32_t)value
{
  _hasB = YES;
  _b = value;
}

- (void)clearB
{
  _hasB = NO;
  _b = 0;
}

- (BOOL)hasDummy4
{
  return _hasDummy4;
}

- (void)setDummy4:(int32_t)value
{
  _hasDummy4 = YES;
  _dummy4 = value;
}

- (void)clearDummy4
{
  _hasDummy4 = NO;
  _dummy4 = 0;
}

- (BOOL)hasDummy5
{
  return _hasDummy5;
}

- (void)setDummy5:(int32_t)value
{
  _hasDummy5 = YES;
  _dummy5 = value;
}

- (void)clearDummy5
{
  _hasDummy5 = NO;
  _dummy5 = 0;
}

- (BOOL)hasDummy6
{
  return _hasDummy6;
}

- (void)setDummy6:(int32_t)value
{
  _hasDummy6 = YES;
  _dummy6 = value;
}

- (void)clearDummy6
{
  _hasDummy6 = NO;
  _dummy6 = 0;
}

- (BOOL)hasDummy7
{
  return _hasDummy7;
}

- (void)setDummy7:(int32_t)value
{
  _hasDummy7 = YES;
  _dummy7 = value;
}

- (void)clearDummy7
{
  _hasDummy7 = NO;
  _dummy7 = 0;
}

- (BOOL)hasDummy8
{
  return _hasDummy8;
}

- (void)setDummy8:(int32_t)value
{
  _hasDummy8 = YES;
  _dummy8 = value;
}

- (void)clearDummy8
{
  _hasDummy8 = NO;
  _dummy8 = 0;
}

- (BOOL)hasDummy9
{
  return _hasDummy9;
}

- (void)setDummy9:(int32_t)value
{
  _hasDummy9 = YES;
  _dummy9 = value;
}

- (void)clearDummy9
{
  _hasDummy9 = NO;
  _dummy9 = 0;
}

- (BOOL)hasDummy10
{
  return _hasDummy10;
}

- (void)setDummy10:(int32_t)value
{
  _hasDummy10 = YES;
  _dummy10 = value;
}

- (void)clearDummy10
{
  _hasDummy10 = NO;
  _dummy10 = 0;
}

- (BOOL)hasDummy11
{
  return _hasDummy11;
}

- (void)setDummy11:(int32_t)value
{
  _hasDummy11 = YES;
  _dummy11 = value;
}

- (void)clearDummy11
{
  _hasDummy11 = NO;
  _dummy11 = 0;
}

- (BOOL)hasDummy12
{
  return _hasDummy12;
}

- (void)setDummy12:(int32_t)value
{
  _hasDummy12 = YES;
  _dummy12 = value;
}

- (void)clearDummy12
{
  _hasDummy12 = NO;
  _dummy12 = 0;
}

- (BOOL)hasDummy13
{
  return _hasDummy13;
}

- (void)setDummy13:(int32_t)value
{
  _hasDummy13 = YES;
  _dummy13 = value;
}

- (void)clearDummy13
{
  _hasDummy13 = NO;
  _dummy13 = 0;
}

- (BOOL)hasDummy14
{
  return _hasDummy14;
}

- (void)setDummy14:(int32_t)value
{
  _hasDummy14 = YES;
  _dummy14 = value;
}

- (void)clearDummy14
{
  _hasDummy14 = NO;
  _dummy14 = 0;
}

- (BOOL)hasDummy15
{
  return _hasDummy15;
}

- (void)setDummy15:(int32_t)value
{
  _hasDummy15 = YES;
  _dummy15 = value;
}

- (void)clearDummy15
{
  _hasDummy15 = NO;
  _dummy15 = 0;
}

- (BOOL)hasDummy16
{
  return _hasDummy16;
}

- (void)setDummy16:(int32_t)value
{
  _hasDummy16 = YES;
  _dummy16 = value;
}

- (void)clearDummy16
{
  _hasDummy16 = NO;
  _dummy16 = 0;
}

- (BOOL)hasDummy17
{
  return _hasDummy17;
}

- (void)setDummy17:(int32_t)value
{
  _hasDummy17 = YES;
  _dummy17 = value;
}

- (void)clearDummy17
{
  _hasDummy17 = NO;
  _dummy17 = 0;
}

- (BOOL)hasDummy18
{
  return _hasDummy18;
}

- (void)setDummy18:(int32_t)value
{
  _hasDummy18 = YES;
  _dummy18 = value;
}

- (void)clearDummy18
{
  _hasDummy18 = NO;
  _dummy18 = 0;
}

- (BOOL)hasDummy19
{
  return _hasDummy19;
}

- (void)setDummy19:(int32_t)value
{
  _hasDummy19 = YES;
  _dummy19 = value;
}

- (void)clearDummy19
{
  _hasDummy19 = NO;
  _dummy19 = 0;
}

- (BOOL)hasDummy20
{
  return _hasDummy20;
}

- (void)setDummy20:(int32_t)value
{
  _hasDummy20 = YES;
  _dummy20 = value;
}

- (void)clearDummy20
{
  _hasDummy20 = NO;
  _dummy20 = 0;
}

- (BOOL)hasDummy21
{
  return _hasDummy21;
}

- (void)setDummy21:(int32_t)value
{
  _hasDummy21 = YES;
  _dummy21 = value;
}

- (void)clearDummy21
{
  _hasDummy21 = NO;
  _dummy21 = 0;
}

- (BOOL)hasDummy22
{
  return _hasDummy22;
}

- (void)setDummy22:(int32_t)value
{
  _hasDummy22 = YES;
  _dummy22 = value;
}

- (void)clearDummy22
{
  _hasDummy22 = NO;
  _dummy22 = 0;
}

- (BOOL)hasDummy23
{
  return _hasDummy23;
}

- (void)setDummy23:(int32_t)value
{
  _hasDummy23 = YES;
  _dummy23 = value;
}

- (void)clearDummy23
{
  _hasDummy23 = NO;
  _dummy23 = 0;
}

- (BOOL)hasDummy24
{
  return _hasDummy24;
}

- (void)setDummy24:(int32_t)value
{
  _hasDummy24 = YES;
  _dummy24 = value;
}

- (void)clearDummy24
{
  _hasDummy24 = NO;
  _dummy24 = 0;
}

- (BOOL)hasDummy25
{
  return _hasDummy25;
}

- (void)setDummy25:(int32_t)value
{
  _hasDummy25 = YES;
  _dummy25 = value;
}

- (void)clearDummy25
{
  _hasDummy25 = NO;
  _dummy25 = 0;
}

- (BOOL)hasDummy26
{
  return _hasDummy26;
}

- (void)setDummy26:(int32_t)value
{
  _hasDummy26 = YES;
  _dummy26 = value;
}

- (void)clearDummy26
{
  _hasDummy26 = NO;
  _dummy26 = 0;
}

- (BOOL)hasDummy27
{
  return _hasDummy27;
}

- (void)setDummy27:(int32_t)value
{
  _hasDummy27 = YES;
  _dummy27 = value;
}

- (void)clearDummy27
{
  _hasDummy27 = NO;
  _dummy27 = 0;
}

- (BOOL)hasDummy28
{
  return _hasDummy28;
}

- (void)setDummy28:(int32_t)value
{
  _hasDummy28 = YES;
  _dummy28 = value;
}

- (void)clearDummy28
{
  _hasDummy28 = NO;
  _dummy28 = 0;
}

- (BOOL)hasDummy29
{
  return _hasDummy29;
}

- (void)setDummy29:(int32_t)value
{
  _hasDummy29 = YES;
  _dummy29 = value;
}

- (void)clearDummy29
{
  _hasDummy29 = NO;
  _dummy29 = 0;
}

- (BOOL)hasDummy30
{
  return _hasDummy30;
}

- (void)setDummy30:(int32_t)value
{
  _hasDummy30 = YES;
  _dummy30 = value;
}

- (void)clearDummy30
{
  _hasDummy30 = NO;
  _dummy30 = 0;
}

- (BOOL)hasDummy31
{
  return _hasDummy31;
}

- (void)setDummy31:(int32_t)value
{
  _hasDummy31 = YES;
  _dummy31 = value;
}

- (void)clearDummy31
{
  _hasDummy31 = NO;
  _dummy31 = 0;
}

- (BOOL)hasDummy32
{
  return _hasDummy32;
}

- (void)setDummy32:(int32_t)value
{
  _hasDummy32 = YES;
  _dummy32 = value;
}

- (void)clearDummy32
{
  _hasDummy32 = NO;
  _dummy32 = 0;
}

- (BOOL)hasC
{
  return _hasC;
}

- (void)setC:(int32_t)value
{
  _hasC = YES;
  _c = value;
}

- (void)clearC
{
  _hasC = NO;
  _c = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
    _dummy2 = 0;
    _b = 0;
    _dummy4 = 0;
    _dummy5 = 0;
    _dummy6 = 0;
    _dummy7 = 0;
    _dummy8 = 0;
    _dummy9 = 0;
    _dummy10 = 0;
    _dummy11 = 0;
    _dummy12 = 0;
    _dummy13 = 0;
    _dummy14 = 0;
    _dummy15 = 0;
    _dummy16 = 0;
    _dummy17 = 0;
    _dummy18 = 0;
    _dummy19 = 0;
    _dummy20 = 0;
    _dummy21 = 0;
    _dummy22 = 0;
    _dummy23 = 0;
    _dummy24 = 0;
    _dummy25 = 0;
    _dummy26 = 0;
    _dummy27 = 0;
    _dummy28 = 0;
    _dummy29 = 0;
    _dummy30 = 0;
    _dummy31 = 0;
    _dummy32 = 0;
    _c = 0;
  }
  return self;
}

+ (id<PBExtensionField>)single
{
  return TestRequired_single;
}
+ (id<PBExtensionField>)multi
{
  return TestRequired_multi;
}
- (BOOL)isInitialized
{
  if (!self.hasA) {
    return NO;
  }
  if (!self.hasB) {
    return NO;
  }
  if (!self.hasC) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasDummy2) {
    [output writeInt32:2 value:self.dummy2];
  }
  if (self.hasB) {
    [output writeInt32:3 value:self.b];
  }
  if (self.hasDummy4) {
    [output writeInt32:4 value:self.dummy4];
  }
  if (self.hasDummy5) {
    [output writeInt32:5 value:self.dummy5];
  }
  if (self.hasDummy6) {
    [output writeInt32:6 value:self.dummy6];
  }
  if (self.hasDummy7) {
    [output writeInt32:7 value:self.dummy7];
  }
  if (self.hasDummy8) {
    [output writeInt32:8 value:self.dummy8];
  }
  if (self.hasDummy9) {
    [output writeInt32:9 value:self.dummy9];
  }
  if (self.hasDummy10) {
    [output writeInt32:10 value:self.dummy10];
  }
  if (self.hasDummy11) {
    [output writeInt32:11 value:self.dummy11];
  }
  if (self.hasDummy12) {
    [output writeInt32:12 value:self.dummy12];
  }
  if (self.hasDummy13) {
    [output writeInt32:13 value:self.dummy13];
  }
  if (self.hasDummy14) {
    [output writeInt32:14 value:self.dummy14];
  }
  if (self.hasDummy15) {
    [output writeInt32:15 value:self.dummy15];
  }
  if (self.hasDummy16) {
    [output writeInt32:16 value:self.dummy16];
  }
  if (self.hasDummy17) {
    [output writeInt32:17 value:self.dummy17];
  }
  if (self.hasDummy18) {
    [output writeInt32:18 value:self.dummy18];
  }
  if (self.hasDummy19) {
    [output writeInt32:19 value:self.dummy19];
  }
  if (self.hasDummy20) {
    [output writeInt32:20 value:self.dummy20];
  }
  if (self.hasDummy21) {
    [output writeInt32:21 value:self.dummy21];
  }
  if (self.hasDummy22) {
    [output writeInt32:22 value:self.dummy22];
  }
  if (self.hasDummy23) {
    [output writeInt32:23 value:self.dummy23];
  }
  if (self.hasDummy24) {
    [output writeInt32:24 value:self.dummy24];
  }
  if (self.hasDummy25) {
    [output writeInt32:25 value:self.dummy25];
  }
  if (self.hasDummy26) {
    [output writeInt32:26 value:self.dummy26];
  }
  if (self.hasDummy27) {
    [output writeInt32:27 value:self.dummy27];
  }
  if (self.hasDummy28) {
    [output writeInt32:28 value:self.dummy28];
  }
  if (self.hasDummy29) {
    [output writeInt32:29 value:self.dummy29];
  }
  if (self.hasDummy30) {
    [output writeInt32:30 value:self.dummy30];
  }
  if (self.hasDummy31) {
    [output writeInt32:31 value:self.dummy31];
  }
  if (self.hasDummy32) {
    [output writeInt32:32 value:self.dummy32];
  }
  if (self.hasC) {
    [output writeInt32:33 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasDummy2) {
    size_ += computeInt32Size(2, self.dummy2);
  }
  if (self.hasB) {
    size_ += computeInt32Size(3, self.b);
  }
  if (self.hasDummy4) {
    size_ += computeInt32Size(4, self.dummy4);
  }
  if (self.hasDummy5) {
    size_ += computeInt32Size(5, self.dummy5);
  }
  if (self.hasDummy6) {
    size_ += computeInt32Size(6, self.dummy6);
  }
  if (self.hasDummy7) {
    size_ += computeInt32Size(7, self.dummy7);
  }
  if (self.hasDummy8) {
    size_ += computeInt32Size(8, self.dummy8);
  }
  if (self.hasDummy9) {
    size_ += computeInt32Size(9, self.dummy9);
  }
  if (self.hasDummy10) {
    size_ += computeInt32Size(10, self.dummy10);
  }
  if (self.hasDummy11) {
    size_ += computeInt32Size(11, self.dummy11);
  }
  if (self.hasDummy12) {
    size_ += computeInt32Size(12, self.dummy12);
  }
  if (self.hasDummy13) {
    size_ += computeInt32Size(13, self.dummy13);
  }
  if (self.hasDummy14) {
    size_ += computeInt32Size(14, self.dummy14);
  }
  if (self.hasDummy15) {
    size_ += computeInt32Size(15, self.dummy15);
  }
  if (self.hasDummy16) {
    size_ += computeInt32Size(16, self.dummy16);
  }
  if (self.hasDummy17) {
    size_ += computeInt32Size(17, self.dummy17);
  }
  if (self.hasDummy18) {
    size_ += computeInt32Size(18, self.dummy18);
  }
  if (self.hasDummy19) {
    size_ += computeInt32Size(19, self.dummy19);
  }
  if (self.hasDummy20) {
    size_ += computeInt32Size(20, self.dummy20);
  }
  if (self.hasDummy21) {
    size_ += computeInt32Size(21, self.dummy21);
  }
  if (self.hasDummy22) {
    size_ += computeInt32Size(22, self.dummy22);
  }
  if (self.hasDummy23) {
    size_ += computeInt32Size(23, self.dummy23);
  }
  if (self.hasDummy24) {
    size_ += computeInt32Size(24, self.dummy24);
  }
  if (self.hasDummy25) {
    size_ += computeInt32Size(25, self.dummy25);
  }
  if (self.hasDummy26) {
    size_ += computeInt32Size(26, self.dummy26);
  }
  if (self.hasDummy27) {
    size_ += computeInt32Size(27, self.dummy27);
  }
  if (self.hasDummy28) {
    size_ += computeInt32Size(28, self.dummy28);
  }
  if (self.hasDummy29) {
    size_ += computeInt32Size(29, self.dummy29);
  }
  if (self.hasDummy30) {
    size_ += computeInt32Size(30, self.dummy30);
  }
  if (self.hasDummy31) {
    size_ += computeInt32Size(31, self.dummy31);
  }
  if (self.hasDummy32) {
    size_ += computeInt32Size(32, self.dummy32);
  }
  if (self.hasC) {
    size_ += computeInt32Size(33, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestRequired *)parseFromData:(NSData *)data
{
  return (TestRequired *)[[[TestRequired builder] mergeFromData:data] build];
}

+ (TestRequired *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRequired*)[[[TestRequired builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestRequired *)parseFromInputStream:(NSInputStream *)input
{
  return (TestRequired*)[[[TestRequired builder] mergeFromInputStream:input] build];
}

+ (TestRequired *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRequired*)[[[TestRequired builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRequired *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestRequired builder] mergeFromCodedInputStream:input] build];
}

+ (TestRequired *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestRequired builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRequired_Builder *)builder
{
  return [[TestRequired_Builder alloc] init];
}

+ (TestRequired_Builder *)builderWithPrototype:(TestRequired *)prototype
{
  return [[TestRequired builder] mergeFrom:prototype];
}

- (TestRequired_Builder *)builder
{
  return [TestRequired builder];
}

- (TestRequired_Builder *)toBuilder
{
  return [TestRequired builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasDummy2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy2", @(self.dummy2)];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", @(self.b)];
  }
  if (self.hasDummy4) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy4", @(self.dummy4)];
  }
  if (self.hasDummy5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy5", @(self.dummy5)];
  }
  if (self.hasDummy6) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy6", @(self.dummy6)];
  }
  if (self.hasDummy7) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy7", @(self.dummy7)];
  }
  if (self.hasDummy8) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy8", @(self.dummy8)];
  }
  if (self.hasDummy9) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy9", @(self.dummy9)];
  }
  if (self.hasDummy10) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy10", @(self.dummy10)];
  }
  if (self.hasDummy11) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy11", @(self.dummy11)];
  }
  if (self.hasDummy12) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy12", @(self.dummy12)];
  }
  if (self.hasDummy13) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy13", @(self.dummy13)];
  }
  if (self.hasDummy14) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy14", @(self.dummy14)];
  }
  if (self.hasDummy15) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy15", @(self.dummy15)];
  }
  if (self.hasDummy16) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy16", @(self.dummy16)];
  }
  if (self.hasDummy17) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy17", @(self.dummy17)];
  }
  if (self.hasDummy18) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy18", @(self.dummy18)];
  }
  if (self.hasDummy19) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy19", @(self.dummy19)];
  }
  if (self.hasDummy20) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy20", @(self.dummy20)];
  }
  if (self.hasDummy21) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy21", @(self.dummy21)];
  }
  if (self.hasDummy22) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy22", @(self.dummy22)];
  }
  if (self.hasDummy23) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy23", @(self.dummy23)];
  }
  if (self.hasDummy24) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy24", @(self.dummy24)];
  }
  if (self.hasDummy25) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy25", @(self.dummy25)];
  }
  if (self.hasDummy26) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy26", @(self.dummy26)];
  }
  if (self.hasDummy27) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy27", @(self.dummy27)];
  }
  if (self.hasDummy28) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy28", @(self.dummy28)];
  }
  if (self.hasDummy29) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy29", @(self.dummy29)];
  }
  if (self.hasDummy30) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy30", @(self.dummy30)];
  }
  if (self.hasDummy31) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy31", @(self.dummy31)];
  }
  if (self.hasDummy32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy32", @(self.dummy32)];
  }
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", @(self.c)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequired class]]) {
    return NO;
  }
  TestRequired *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.hasDummy2 == otherMessage.hasDummy2 && (!self.hasDummy2 || self.dummy2 == otherMessage.dummy2)) &&
    (self.hasB == otherMessage.hasB && (!self.hasB || self.b == otherMessage.b)) &&
    (self.hasDummy4 == otherMessage.hasDummy4 && (!self.hasDummy4 || self.dummy4 == otherMessage.dummy4)) &&
    (self.hasDummy5 == otherMessage.hasDummy5 && (!self.hasDummy5 || self.dummy5 == otherMessage.dummy5)) &&
    (self.hasDummy6 == otherMessage.hasDummy6 && (!self.hasDummy6 || self.dummy6 == otherMessage.dummy6)) &&
    (self.hasDummy7 == otherMessage.hasDummy7 && (!self.hasDummy7 || self.dummy7 == otherMessage.dummy7)) &&
    (self.hasDummy8 == otherMessage.hasDummy8 && (!self.hasDummy8 || self.dummy8 == otherMessage.dummy8)) &&
    (self.hasDummy9 == otherMessage.hasDummy9 && (!self.hasDummy9 || self.dummy9 == otherMessage.dummy9)) &&
    (self.hasDummy10 == otherMessage.hasDummy10 && (!self.hasDummy10 || self.dummy10 == otherMessage.dummy10)) &&
    (self.hasDummy11 == otherMessage.hasDummy11 && (!self.hasDummy11 || self.dummy11 == otherMessage.dummy11)) &&
    (self.hasDummy12 == otherMessage.hasDummy12 && (!self.hasDummy12 || self.dummy12 == otherMessage.dummy12)) &&
    (self.hasDummy13 == otherMessage.hasDummy13 && (!self.hasDummy13 || self.dummy13 == otherMessage.dummy13)) &&
    (self.hasDummy14 == otherMessage.hasDummy14 && (!self.hasDummy14 || self.dummy14 == otherMessage.dummy14)) &&
    (self.hasDummy15 == otherMessage.hasDummy15 && (!self.hasDummy15 || self.dummy15 == otherMessage.dummy15)) &&
    (self.hasDummy16 == otherMessage.hasDummy16 && (!self.hasDummy16 || self.dummy16 == otherMessage.dummy16)) &&
    (self.hasDummy17 == otherMessage.hasDummy17 && (!self.hasDummy17 || self.dummy17 == otherMessage.dummy17)) &&
    (self.hasDummy18 == otherMessage.hasDummy18 && (!self.hasDummy18 || self.dummy18 == otherMessage.dummy18)) &&
    (self.hasDummy19 == otherMessage.hasDummy19 && (!self.hasDummy19 || self.dummy19 == otherMessage.dummy19)) &&
    (self.hasDummy20 == otherMessage.hasDummy20 && (!self.hasDummy20 || self.dummy20 == otherMessage.dummy20)) &&
    (self.hasDummy21 == otherMessage.hasDummy21 && (!self.hasDummy21 || self.dummy21 == otherMessage.dummy21)) &&
    (self.hasDummy22 == otherMessage.hasDummy22 && (!self.hasDummy22 || self.dummy22 == otherMessage.dummy22)) &&
    (self.hasDummy23 == otherMessage.hasDummy23 && (!self.hasDummy23 || self.dummy23 == otherMessage.dummy23)) &&
    (self.hasDummy24 == otherMessage.hasDummy24 && (!self.hasDummy24 || self.dummy24 == otherMessage.dummy24)) &&
    (self.hasDummy25 == otherMessage.hasDummy25 && (!self.hasDummy25 || self.dummy25 == otherMessage.dummy25)) &&
    (self.hasDummy26 == otherMessage.hasDummy26 && (!self.hasDummy26 || self.dummy26 == otherMessage.dummy26)) &&
    (self.hasDummy27 == otherMessage.hasDummy27 && (!self.hasDummy27 || self.dummy27 == otherMessage.dummy27)) &&
    (self.hasDummy28 == otherMessage.hasDummy28 && (!self.hasDummy28 || self.dummy28 == otherMessage.dummy28)) &&
    (self.hasDummy29 == otherMessage.hasDummy29 && (!self.hasDummy29 || self.dummy29 == otherMessage.dummy29)) &&
    (self.hasDummy30 == otherMessage.hasDummy30 && (!self.hasDummy30 || self.dummy30 == otherMessage.dummy30)) &&
    (self.hasDummy31 == otherMessage.hasDummy31 && (!self.hasDummy31 || self.dummy31 == otherMessage.dummy31)) &&
    (self.hasDummy32 == otherMessage.hasDummy32 && (!self.hasDummy32 || self.dummy32 == otherMessage.dummy32)) &&
    (self.hasC == otherMessage.hasC && (!self.hasC || self.c == otherMessage.c)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasDummy2) {
    hashCode = hashCode * 31 + [@(self.dummy2) hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [@(self.b) hash];
  }
  if (self.hasDummy4) {
    hashCode = hashCode * 31 + [@(self.dummy4) hash];
  }
  if (self.hasDummy5) {
    hashCode = hashCode * 31 + [@(self.dummy5) hash];
  }
  if (self.hasDummy6) {
    hashCode = hashCode * 31 + [@(self.dummy6) hash];
  }
  if (self.hasDummy7) {
    hashCode = hashCode * 31 + [@(self.dummy7) hash];
  }
  if (self.hasDummy8) {
    hashCode = hashCode * 31 + [@(self.dummy8) hash];
  }
  if (self.hasDummy9) {
    hashCode = hashCode * 31 + [@(self.dummy9) hash];
  }
  if (self.hasDummy10) {
    hashCode = hashCode * 31 + [@(self.dummy10) hash];
  }
  if (self.hasDummy11) {
    hashCode = hashCode * 31 + [@(self.dummy11) hash];
  }
  if (self.hasDummy12) {
    hashCode = hashCode * 31 + [@(self.dummy12) hash];
  }
  if (self.hasDummy13) {
    hashCode = hashCode * 31 + [@(self.dummy13) hash];
  }
  if (self.hasDummy14) {
    hashCode = hashCode * 31 + [@(self.dummy14) hash];
  }
  if (self.hasDummy15) {
    hashCode = hashCode * 31 + [@(self.dummy15) hash];
  }
  if (self.hasDummy16) {
    hashCode = hashCode * 31 + [@(self.dummy16) hash];
  }
  if (self.hasDummy17) {
    hashCode = hashCode * 31 + [@(self.dummy17) hash];
  }
  if (self.hasDummy18) {
    hashCode = hashCode * 31 + [@(self.dummy18) hash];
  }
  if (self.hasDummy19) {
    hashCode = hashCode * 31 + [@(self.dummy19) hash];
  }
  if (self.hasDummy20) {
    hashCode = hashCode * 31 + [@(self.dummy20) hash];
  }
  if (self.hasDummy21) {
    hashCode = hashCode * 31 + [@(self.dummy21) hash];
  }
  if (self.hasDummy22) {
    hashCode = hashCode * 31 + [@(self.dummy22) hash];
  }
  if (self.hasDummy23) {
    hashCode = hashCode * 31 + [@(self.dummy23) hash];
  }
  if (self.hasDummy24) {
    hashCode = hashCode * 31 + [@(self.dummy24) hash];
  }
  if (self.hasDummy25) {
    hashCode = hashCode * 31 + [@(self.dummy25) hash];
  }
  if (self.hasDummy26) {
    hashCode = hashCode * 31 + [@(self.dummy26) hash];
  }
  if (self.hasDummy27) {
    hashCode = hashCode * 31 + [@(self.dummy27) hash];
  }
  if (self.hasDummy28) {
    hashCode = hashCode * 31 + [@(self.dummy28) hash];
  }
  if (self.hasDummy29) {
    hashCode = hashCode * 31 + [@(self.dummy29) hash];
  }
  if (self.hasDummy30) {
    hashCode = hashCode * 31 + [@(self.dummy30) hash];
  }
  if (self.hasDummy31) {
    hashCode = hashCode * 31 + [@(self.dummy31) hash];
  }
  if (self.hasDummy32) {
    hashCode = hashCode * 31 + [@(self.dummy32) hash];
  }
  if (self.hasC) {
    hashCode = hashCode * 31 + [@(self.c) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestRequired_Builder()

@property (strong) TestRequired *result;

@end


@implementation TestRequired_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestRequired alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestRequired_Builder *)clear
{
  self.result = [[TestRequired alloc] init];
  return self;
}

- (TestRequired_Builder *)clone
{
  return [TestRequired builderWithPrototype:_result];
}

- (TestRequired *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestRequired *)buildPartial
{
  TestRequired *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestRequired_Builder *)mergeFrom:(TestRequired *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasDummy2) {
    [self setDummy2:other.dummy2];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  if (other.hasDummy4) {
    [self setDummy4:other.dummy4];
  }
  if (other.hasDummy5) {
    [self setDummy5:other.dummy5];
  }
  if (other.hasDummy6) {
    [self setDummy6:other.dummy6];
  }
  if (other.hasDummy7) {
    [self setDummy7:other.dummy7];
  }
  if (other.hasDummy8) {
    [self setDummy8:other.dummy8];
  }
  if (other.hasDummy9) {
    [self setDummy9:other.dummy9];
  }
  if (other.hasDummy10) {
    [self setDummy10:other.dummy10];
  }
  if (other.hasDummy11) {
    [self setDummy11:other.dummy11];
  }
  if (other.hasDummy12) {
    [self setDummy12:other.dummy12];
  }
  if (other.hasDummy13) {
    [self setDummy13:other.dummy13];
  }
  if (other.hasDummy14) {
    [self setDummy14:other.dummy14];
  }
  if (other.hasDummy15) {
    [self setDummy15:other.dummy15];
  }
  if (other.hasDummy16) {
    [self setDummy16:other.dummy16];
  }
  if (other.hasDummy17) {
    [self setDummy17:other.dummy17];
  }
  if (other.hasDummy18) {
    [self setDummy18:other.dummy18];
  }
  if (other.hasDummy19) {
    [self setDummy19:other.dummy19];
  }
  if (other.hasDummy20) {
    [self setDummy20:other.dummy20];
  }
  if (other.hasDummy21) {
    [self setDummy21:other.dummy21];
  }
  if (other.hasDummy22) {
    [self setDummy22:other.dummy22];
  }
  if (other.hasDummy23) {
    [self setDummy23:other.dummy23];
  }
  if (other.hasDummy24) {
    [self setDummy24:other.dummy24];
  }
  if (other.hasDummy25) {
    [self setDummy25:other.dummy25];
  }
  if (other.hasDummy26) {
    [self setDummy26:other.dummy26];
  }
  if (other.hasDummy27) {
    [self setDummy27:other.dummy27];
  }
  if (other.hasDummy28) {
    [self setDummy28:other.dummy28];
  }
  if (other.hasDummy29) {
    [self setDummy29:other.dummy29];
  }
  if (other.hasDummy30) {
    [self setDummy30:other.dummy30];
  }
  if (other.hasDummy31) {
    [self setDummy31:other.dummy31];
  }
  if (other.hasDummy32) {
    [self setDummy32:other.dummy32];
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestRequired_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestRequired_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 16: {
        [self setDummy2:[input readInt32]];
        break;
      }
      case 24: {
        [self setB:[input readInt32]];
        break;
      }
      case 32: {
        [self setDummy4:[input readInt32]];
        break;
      }
      case 40: {
        [self setDummy5:[input readInt32]];
        break;
      }
      case 48: {
        [self setDummy6:[input readInt32]];
        break;
      }
      case 56: {
        [self setDummy7:[input readInt32]];
        break;
      }
      case 64: {
        [self setDummy8:[input readInt32]];
        break;
      }
      case 72: {
        [self setDummy9:[input readInt32]];
        break;
      }
      case 80: {
        [self setDummy10:[input readInt32]];
        break;
      }
      case 88: {
        [self setDummy11:[input readInt32]];
        break;
      }
      case 96: {
        [self setDummy12:[input readInt32]];
        break;
      }
      case 104: {
        [self setDummy13:[input readInt32]];
        break;
      }
      case 112: {
        [self setDummy14:[input readInt32]];
        break;
      }
      case 120: {
        [self setDummy15:[input readInt32]];
        break;
      }
      case 128: {
        [self setDummy16:[input readInt32]];
        break;
      }
      case 136: {
        [self setDummy17:[input readInt32]];
        break;
      }
      case 144: {
        [self setDummy18:[input readInt32]];
        break;
      }
      case 152: {
        [self setDummy19:[input readInt32]];
        break;
      }
      case 160: {
        [self setDummy20:[input readInt32]];
        break;
      }
      case 168: {
        [self setDummy21:[input readInt32]];
        break;
      }
      case 176: {
        [self setDummy22:[input readInt32]];
        break;
      }
      case 184: {
        [self setDummy23:[input readInt32]];
        break;
      }
      case 192: {
        [self setDummy24:[input readInt32]];
        break;
      }
      case 200: {
        [self setDummy25:[input readInt32]];
        break;
      }
      case 208: {
        [self setDummy26:[input readInt32]];
        break;
      }
      case 216: {
        [self setDummy27:[input readInt32]];
        break;
      }
      case 224: {
        [self setDummy28:[input readInt32]];
        break;
      }
      case 232: {
        [self setDummy29:[input readInt32]];
        break;
      }
      case 240: {
        [self setDummy30:[input readInt32]];
        break;
      }
      case 248: {
        [self setDummy31:[input readInt32]];
        break;
      }
      case 256: {
        [self setDummy32:[input readInt32]];
        break;
      }
      case 264: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestRequired_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestRequired_Builder*)clearA
{
  [_result clearA];
  return self;
}

- (BOOL)hasDummy2
{
  return _result.hasDummy2;
}

- (int32_t)dummy2
{
  return _result.dummy2;
}

- (TestRequired_Builder*)setDummy2:(int32_t)value
{
  _result.dummy2 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy2
{
  [_result clearDummy2];
  return self;
}

- (BOOL)hasB
{
  return _result.hasB;
}

- (int32_t)b
{
  return _result.b;
}

- (TestRequired_Builder*)setB:(int32_t)value
{
  _result.b = value;
  return self;
}

- (TestRequired_Builder*)clearB
{
  [_result clearB];
  return self;
}

- (BOOL)hasDummy4
{
  return _result.hasDummy4;
}

- (int32_t)dummy4
{
  return _result.dummy4;
}

- (TestRequired_Builder*)setDummy4:(int32_t)value
{
  _result.dummy4 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy4
{
  [_result clearDummy4];
  return self;
}

- (BOOL)hasDummy5
{
  return _result.hasDummy5;
}

- (int32_t)dummy5
{
  return _result.dummy5;
}

- (TestRequired_Builder*)setDummy5:(int32_t)value
{
  _result.dummy5 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy5
{
  [_result clearDummy5];
  return self;
}

- (BOOL)hasDummy6
{
  return _result.hasDummy6;
}

- (int32_t)dummy6
{
  return _result.dummy6;
}

- (TestRequired_Builder*)setDummy6:(int32_t)value
{
  _result.dummy6 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy6
{
  [_result clearDummy6];
  return self;
}

- (BOOL)hasDummy7
{
  return _result.hasDummy7;
}

- (int32_t)dummy7
{
  return _result.dummy7;
}

- (TestRequired_Builder*)setDummy7:(int32_t)value
{
  _result.dummy7 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy7
{
  [_result clearDummy7];
  return self;
}

- (BOOL)hasDummy8
{
  return _result.hasDummy8;
}

- (int32_t)dummy8
{
  return _result.dummy8;
}

- (TestRequired_Builder*)setDummy8:(int32_t)value
{
  _result.dummy8 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy8
{
  [_result clearDummy8];
  return self;
}

- (BOOL)hasDummy9
{
  return _result.hasDummy9;
}

- (int32_t)dummy9
{
  return _result.dummy9;
}

- (TestRequired_Builder*)setDummy9:(int32_t)value
{
  _result.dummy9 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy9
{
  [_result clearDummy9];
  return self;
}

- (BOOL)hasDummy10
{
  return _result.hasDummy10;
}

- (int32_t)dummy10
{
  return _result.dummy10;
}

- (TestRequired_Builder*)setDummy10:(int32_t)value
{
  _result.dummy10 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy10
{
  [_result clearDummy10];
  return self;
}

- (BOOL)hasDummy11
{
  return _result.hasDummy11;
}

- (int32_t)dummy11
{
  return _result.dummy11;
}

- (TestRequired_Builder*)setDummy11:(int32_t)value
{
  _result.dummy11 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy11
{
  [_result clearDummy11];
  return self;
}

- (BOOL)hasDummy12
{
  return _result.hasDummy12;
}

- (int32_t)dummy12
{
  return _result.dummy12;
}

- (TestRequired_Builder*)setDummy12:(int32_t)value
{
  _result.dummy12 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy12
{
  [_result clearDummy12];
  return self;
}

- (BOOL)hasDummy13
{
  return _result.hasDummy13;
}

- (int32_t)dummy13
{
  return _result.dummy13;
}

- (TestRequired_Builder*)setDummy13:(int32_t)value
{
  _result.dummy13 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy13
{
  [_result clearDummy13];
  return self;
}

- (BOOL)hasDummy14
{
  return _result.hasDummy14;
}

- (int32_t)dummy14
{
  return _result.dummy14;
}

- (TestRequired_Builder*)setDummy14:(int32_t)value
{
  _result.dummy14 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy14
{
  [_result clearDummy14];
  return self;
}

- (BOOL)hasDummy15
{
  return _result.hasDummy15;
}

- (int32_t)dummy15
{
  return _result.dummy15;
}

- (TestRequired_Builder*)setDummy15:(int32_t)value
{
  _result.dummy15 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy15
{
  [_result clearDummy15];
  return self;
}

- (BOOL)hasDummy16
{
  return _result.hasDummy16;
}

- (int32_t)dummy16
{
  return _result.dummy16;
}

- (TestRequired_Builder*)setDummy16:(int32_t)value
{
  _result.dummy16 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy16
{
  [_result clearDummy16];
  return self;
}

- (BOOL)hasDummy17
{
  return _result.hasDummy17;
}

- (int32_t)dummy17
{
  return _result.dummy17;
}

- (TestRequired_Builder*)setDummy17:(int32_t)value
{
  _result.dummy17 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy17
{
  [_result clearDummy17];
  return self;
}

- (BOOL)hasDummy18
{
  return _result.hasDummy18;
}

- (int32_t)dummy18
{
  return _result.dummy18;
}

- (TestRequired_Builder*)setDummy18:(int32_t)value
{
  _result.dummy18 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy18
{
  [_result clearDummy18];
  return self;
}

- (BOOL)hasDummy19
{
  return _result.hasDummy19;
}

- (int32_t)dummy19
{
  return _result.dummy19;
}

- (TestRequired_Builder*)setDummy19:(int32_t)value
{
  _result.dummy19 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy19
{
  [_result clearDummy19];
  return self;
}

- (BOOL)hasDummy20
{
  return _result.hasDummy20;
}

- (int32_t)dummy20
{
  return _result.dummy20;
}

- (TestRequired_Builder*)setDummy20:(int32_t)value
{
  _result.dummy20 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy20
{
  [_result clearDummy20];
  return self;
}

- (BOOL)hasDummy21
{
  return _result.hasDummy21;
}

- (int32_t)dummy21
{
  return _result.dummy21;
}

- (TestRequired_Builder*)setDummy21:(int32_t)value
{
  _result.dummy21 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy21
{
  [_result clearDummy21];
  return self;
}

- (BOOL)hasDummy22
{
  return _result.hasDummy22;
}

- (int32_t)dummy22
{
  return _result.dummy22;
}

- (TestRequired_Builder*)setDummy22:(int32_t)value
{
  _result.dummy22 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy22
{
  [_result clearDummy22];
  return self;
}

- (BOOL)hasDummy23
{
  return _result.hasDummy23;
}

- (int32_t)dummy23
{
  return _result.dummy23;
}

- (TestRequired_Builder*)setDummy23:(int32_t)value
{
  _result.dummy23 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy23
{
  [_result clearDummy23];
  return self;
}

- (BOOL)hasDummy24
{
  return _result.hasDummy24;
}

- (int32_t)dummy24
{
  return _result.dummy24;
}

- (TestRequired_Builder*)setDummy24:(int32_t)value
{
  _result.dummy24 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy24
{
  [_result clearDummy24];
  return self;
}

- (BOOL)hasDummy25
{
  return _result.hasDummy25;
}

- (int32_t)dummy25
{
  return _result.dummy25;
}

- (TestRequired_Builder*)setDummy25:(int32_t)value
{
  _result.dummy25 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy25
{
  [_result clearDummy25];
  return self;
}

- (BOOL)hasDummy26
{
  return _result.hasDummy26;
}

- (int32_t)dummy26
{
  return _result.dummy26;
}

- (TestRequired_Builder*)setDummy26:(int32_t)value
{
  _result.dummy26 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy26
{
  [_result clearDummy26];
  return self;
}

- (BOOL)hasDummy27
{
  return _result.hasDummy27;
}

- (int32_t)dummy27
{
  return _result.dummy27;
}

- (TestRequired_Builder*)setDummy27:(int32_t)value
{
  _result.dummy27 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy27
{
  [_result clearDummy27];
  return self;
}

- (BOOL)hasDummy28
{
  return _result.hasDummy28;
}

- (int32_t)dummy28
{
  return _result.dummy28;
}

- (TestRequired_Builder*)setDummy28:(int32_t)value
{
  _result.dummy28 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy28
{
  [_result clearDummy28];
  return self;
}

- (BOOL)hasDummy29
{
  return _result.hasDummy29;
}

- (int32_t)dummy29
{
  return _result.dummy29;
}

- (TestRequired_Builder*)setDummy29:(int32_t)value
{
  _result.dummy29 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy29
{
  [_result clearDummy29];
  return self;
}

- (BOOL)hasDummy30
{
  return _result.hasDummy30;
}

- (int32_t)dummy30
{
  return _result.dummy30;
}

- (TestRequired_Builder*)setDummy30:(int32_t)value
{
  _result.dummy30 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy30
{
  [_result clearDummy30];
  return self;
}

- (BOOL)hasDummy31
{
  return _result.hasDummy31;
}

- (int32_t)dummy31
{
  return _result.dummy31;
}

- (TestRequired_Builder*)setDummy31:(int32_t)value
{
  _result.dummy31 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy31
{
  [_result clearDummy31];
  return self;
}

- (BOOL)hasDummy32
{
  return _result.hasDummy32;
}

- (int32_t)dummy32
{
  return _result.dummy32;
}

- (TestRequired_Builder*)setDummy32:(int32_t)value
{
  _result.dummy32 = value;
  return self;
}

- (TestRequired_Builder*)clearDummy32
{
  [_result clearDummy32];
  return self;
}

- (BOOL)hasC
{
  return _result.hasC;
}

- (int32_t)c
{
  return _result.c;
}

- (TestRequired_Builder*)setC:(int32_t)value
{
  _result.c = value;
  return self;
}

- (TestRequired_Builder*)clearC
{
  [_result clearC];
  return self;
}

@end


@interface TestRequiredForeign ()


@end


@implementation TestRequiredForeign

- (BOOL)hasOptionalMessage
{
  return _hasOptionalMessage;
}

- (void)setOptionalMessage:(TestRequired *)value
{
  _hasOptionalMessage = value != nil;
  _optionalMessage = value;
}

- (void)clearOptionalMessage
{
  _hasOptionalMessage = NO;
  _optionalMessage = nil;
}

- (BOOL)hasDummy
{
  return _hasDummy;
}

- (void)setDummy:(int32_t)value
{
  _hasDummy = YES;
  _dummy = value;
}

- (void)clearDummy
{
  _hasDummy = NO;
  _dummy = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _optionalMessage = nil;
    _dummy = 0;
  }
  return self;
}

- (TestRequired *)repeatedMessageAtIndex:(NSUInteger)index
{
  return _repeatedMessage[index];
}
- (void)addRepeatedMessage:(TestRequired *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedMessage == nil) {
    _repeatedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedMessage addObject:value];
}

- (void)addRepeatedMessageArray:(NSArray *)array
{
  if (_repeatedMessage == nil) {
    _repeatedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedMessage addObjectsFromArray:array];
}

- (void)setRepeatedMessageArray:(NSArray *)array
{
  _repeatedMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedMessage
{
  _repeatedMessage = nil;
}

- (BOOL)isInitialized
{
  if (self.hasOptionalMessage && !self.optionalMessage.isInitialized) {
    return NO;
  }
  for (TestRequired *element in self.repeatedMessage) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasOptionalMessage) {
    [output writeMessage:1 value:self.optionalMessage];
  }
  for (TestRequired *element in self.repeatedMessage) {
    [output writeMessage:2 value:element];
  }
  if (self.hasDummy) {
    [output writeInt32:3 value:self.dummy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasOptionalMessage) {
    size_ += computeMessageSize(1, self.optionalMessage);
  }
  for (TestRequired *element in self.repeatedMessage) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasDummy) {
    size_ += computeInt32Size(3, self.dummy);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestRequiredForeign *)parseFromData:(NSData *)data
{
  return (TestRequiredForeign *)[[[TestRequiredForeign builder] mergeFromData:data] build];
}

+ (TestRequiredForeign *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestRequiredForeign *)parseFromInputStream:(NSInputStream *)input
{
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromInputStream:input] build];
}

+ (TestRequiredForeign *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRequiredForeign *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestRequiredForeign builder] mergeFromCodedInputStream:input] build];
}

+ (TestRequiredForeign *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestRequiredForeign builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRequiredForeign_Builder *)builder
{
  return [[TestRequiredForeign_Builder alloc] init];
}

+ (TestRequiredForeign_Builder *)builderWithPrototype:(TestRequiredForeign *)prototype
{
  return [[TestRequiredForeign builder] mergeFrom:prototype];
}

- (TestRequiredForeign_Builder *)builder
{
  return [TestRequiredForeign builder];
}

- (TestRequiredForeign_Builder *)toBuilder
{
  return [TestRequiredForeign builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasOptionalMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalMessage"];
    [self.optionalMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestRequired *element in self.repeatedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDummy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy", @(self.dummy)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequiredForeign class]]) {
    return NO;
  }
  TestRequiredForeign *otherMessage = other;
  return
    (self.hasOptionalMessage == otherMessage.hasOptionalMessage && (!self.hasOptionalMessage || [self.optionalMessage isEqual:otherMessage.optionalMessage])) &&
    [self.repeatedMessage isEqualToArray:otherMessage.repeatedMessage] &&
    (self.hasDummy == otherMessage.hasDummy && (!self.hasDummy || self.dummy == otherMessage.dummy)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasOptionalMessage) {
    hashCode = hashCode * 31 + [self.optionalMessage hash];
  }
  for (TestRequired *element in self.repeatedMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDummy) {
    hashCode = hashCode * 31 + [@(self.dummy) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestRequiredForeign_Builder()

@property (strong) TestRequiredForeign *result;

@end


@implementation TestRequiredForeign_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestRequiredForeign alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestRequiredForeign_Builder *)clear
{
  self.result = [[TestRequiredForeign alloc] init];
  return self;
}

- (TestRequiredForeign_Builder *)clone
{
  return [TestRequiredForeign builderWithPrototype:_result];
}

- (TestRequiredForeign *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestRequiredForeign *)buildPartial
{
  TestRequiredForeign *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestRequiredForeign_Builder *)mergeFrom:(TestRequiredForeign *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasOptionalMessage) {
    [self mergeOptionalMessage:other.optionalMessage];
  }
  if (other.repeatedMessage.count > 0) {
    if (_result.repeatedMessage == nil) {
      _result.repeatedMessage = [[NSMutableArray alloc] initWithArray:other.repeatedMessage];
    } else {
      [_result.repeatedMessage addObjectsFromArray:other.repeatedMessage];
    }
  }
  if (other.hasDummy) {
    [self setDummy:other.dummy];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestRequiredForeign_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestRequiredForeign_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRequired_Builder *subBuilder = [TestRequired builder];
        if (self.hasOptionalMessage) {
          [subBuilder mergeFrom:self.optionalMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalMessage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestRequired_Builder *subBuilder = [TestRequired builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessage:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setDummy:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasOptionalMessage
{
  return _result.hasOptionalMessage;
}

- (TestRequired *)optionalMessage
{
  return _result.optionalMessage;
}

- (TestRequiredForeign_Builder *)setOptionalMessage:(TestRequired *)value
{
  _result.optionalMessage = value;
  return self;
}

- (TestRequiredForeign_Builder *)setOptionalMessageBuilder:(TestRequired_Builder *)builderForValue
{
  return [self setOptionalMessage:[builderForValue build]];
}

- (TestRequiredForeign_Builder *)mergeOptionalMessage:(TestRequired *)value
{
  if (_result.hasOptionalMessage && _result.optionalMessage != nil) {
    _result.optionalMessage = [[[TestRequired builderWithPrototype:_result.optionalMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalMessage = value;
  }
  return self;
}

- (TestRequiredForeign_Builder *)clearOptionalMessage
{
  [_result clearOptionalMessage];
  return self;
}

- (NSMutableArray *)repeatedMessage
{
  return _result.repeatedMessage;
}

- (TestRequired *)repeatedMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedMessageAtIndex:index];
}

- (TestRequiredForeign_Builder *)addRepeatedMessage:(TestRequired *)value
{
  [_result addRepeatedMessage:value];
  return self;
}

- (TestRequiredForeign_Builder *)setRepeatedMessageArray:(NSArray *)array
{
  [_result setRepeatedMessageArray:array];
  return self;
}

- (TestRequiredForeign_Builder *)clearRepeatedMessage
{
  [_result clearRepeatedMessage];
  return self;
}

- (BOOL)hasDummy
{
  return _result.hasDummy;
}

- (int32_t)dummy
{
  return _result.dummy;
}

- (TestRequiredForeign_Builder*)setDummy:(int32_t)value
{
  _result.dummy = value;
  return self;
}

- (TestRequiredForeign_Builder*)clearDummy
{
  [_result clearDummy];
  return self;
}

@end


@interface TestForeignNested ()


@end


@implementation TestForeignNested

- (BOOL)hasForeignNested
{
  return _hasForeignNested;
}

- (void)setForeignNested:(TestAllTypes_NestedMessage *)value
{
  _hasForeignNested = value != nil;
  _foreignNested = value;
}

- (void)clearForeignNested
{
  _hasForeignNested = NO;
  _foreignNested = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _foreignNested = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasForeignNested) {
    [output writeMessage:1 value:self.foreignNested];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasForeignNested) {
    size_ += computeMessageSize(1, self.foreignNested);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestForeignNested *)parseFromData:(NSData *)data
{
  return (TestForeignNested *)[[[TestForeignNested builder] mergeFromData:data] build];
}

+ (TestForeignNested *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestForeignNested *)parseFromInputStream:(NSInputStream *)input
{
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromInputStream:input] build];
}

+ (TestForeignNested *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestForeignNested *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestForeignNested builder] mergeFromCodedInputStream:input] build];
}

+ (TestForeignNested *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestForeignNested builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestForeignNested_Builder *)builder
{
  return [[TestForeignNested_Builder alloc] init];
}

+ (TestForeignNested_Builder *)builderWithPrototype:(TestForeignNested *)prototype
{
  return [[TestForeignNested builder] mergeFrom:prototype];
}

- (TestForeignNested_Builder *)builder
{
  return [TestForeignNested builder];
}

- (TestForeignNested_Builder *)toBuilder
{
  return [TestForeignNested builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasForeignNested) {
    [output appendFormat:@"%@%@ {\n", indent, @"foreignNested"];
    [self.foreignNested writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestForeignNested class]]) {
    return NO;
  }
  TestForeignNested *otherMessage = other;
  return
    (self.hasForeignNested == otherMessage.hasForeignNested && (!self.hasForeignNested || [self.foreignNested isEqual:otherMessage.foreignNested])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasForeignNested) {
    hashCode = hashCode * 31 + [self.foreignNested hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestForeignNested_Builder()

@property (strong) TestForeignNested *result;

@end


@implementation TestForeignNested_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestForeignNested alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestForeignNested_Builder *)clear
{
  self.result = [[TestForeignNested alloc] init];
  return self;
}

- (TestForeignNested_Builder *)clone
{
  return [TestForeignNested builderWithPrototype:_result];
}

- (TestForeignNested *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestForeignNested *)buildPartial
{
  TestForeignNested *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestForeignNested_Builder *)mergeFrom:(TestForeignNested *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasForeignNested) {
    [self mergeForeignNested:other.foreignNested];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestForeignNested_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestForeignNested_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_NestedMessage_Builder *subBuilder = [TestAllTypes_NestedMessage builder];
        if (self.hasForeignNested) {
          [subBuilder mergeFrom:self.foreignNested];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setForeignNested:[subBuilder buildPartial]];
        break;
      }
    }
  }
}

- (BOOL)hasForeignNested
{
  return _result.hasForeignNested;
}

- (TestAllTypes_NestedMessage *)foreignNested
{
  return _result.foreignNested;
}

- (TestForeignNested_Builder *)setForeignNested:(TestAllTypes_NestedMessage *)value
{
  _result.foreignNested = value;
  return self;
}

- (TestForeignNested_Builder *)setForeignNestedBuilder:(TestAllTypes_NestedMessage_Builder *)builderForValue
{
  return [self setForeignNested:[builderForValue build]];
}

- (TestForeignNested_Builder *)mergeForeignNested:(TestAllTypes_NestedMessage *)value
{
  if (_result.hasForeignNested && _result.foreignNested != nil) {
    _result.foreignNested = [[[TestAllTypes_NestedMessage builderWithPrototype:_result.foreignNested] mergeFrom:value] buildPartial];
  } else {
    _result.foreignNested = value;
  }
  return self;
}

- (TestForeignNested_Builder *)clearForeignNested
{
  [_result clearForeignNested];
  return self;
}

@end


@interface TestEmptyMessage ()


@end


@implementation TestEmptyMessage

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestEmptyMessage *)parseFromData:(NSData *)data
{
  return (TestEmptyMessage *)[[[TestEmptyMessage builder] mergeFromData:data] build];
}

+ (TestEmptyMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromInputStream:input] build];
}

+ (TestEmptyMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestEmptyMessage builder] mergeFromCodedInputStream:input] build];
}

+ (TestEmptyMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestEmptyMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessage_Builder *)builder
{
  return [[TestEmptyMessage_Builder alloc] init];
}

+ (TestEmptyMessage_Builder *)builderWithPrototype:(TestEmptyMessage *)prototype
{
  return [[TestEmptyMessage builder] mergeFrom:prototype];
}

- (TestEmptyMessage_Builder *)builder
{
  return [TestEmptyMessage builder];
}

- (TestEmptyMessage_Builder *)toBuilder
{
  return [TestEmptyMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessage class]]) {
    return NO;
  }
  TestEmptyMessage *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestEmptyMessage_Builder()

@property (strong) TestEmptyMessage *result;

@end


@implementation TestEmptyMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestEmptyMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestEmptyMessage_Builder *)clear
{
  self.result = [[TestEmptyMessage alloc] init];
  return self;
}

- (TestEmptyMessage_Builder *)clone
{
  return [TestEmptyMessage builderWithPrototype:_result];
}

- (TestEmptyMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestEmptyMessage *)buildPartial
{
  TestEmptyMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestEmptyMessage_Builder *)mergeFrom:(TestEmptyMessage *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestEmptyMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestEmptyMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestEmptyMessageWithExtensions ()


@end


@implementation TestEmptyMessageWithExtensions

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:1 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestEmptyMessageWithExtensions *)parseFromData:(NSData *)data
{
  return (TestEmptyMessageWithExtensions *)[[[TestEmptyMessageWithExtensions builder] mergeFromData:data] build];
}

+ (TestEmptyMessageWithExtensions *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessageWithExtensions *)parseFromInputStream:(NSInputStream *)input
{
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromInputStream:input] build];
}

+ (TestEmptyMessageWithExtensions *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessageWithExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestEmptyMessageWithExtensions builder] mergeFromCodedInputStream:input] build];
}

+ (TestEmptyMessageWithExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestEmptyMessageWithExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestEmptyMessageWithExtensions_Builder *)builder
{
  return [[TestEmptyMessageWithExtensions_Builder alloc] init];
}

+ (TestEmptyMessageWithExtensions_Builder *)builderWithPrototype:(TestEmptyMessageWithExtensions *)prototype
{
  return [[TestEmptyMessageWithExtensions builder] mergeFrom:prototype];
}

- (TestEmptyMessageWithExtensions_Builder *)builder
{
  return [TestEmptyMessageWithExtensions builder];
}

- (TestEmptyMessageWithExtensions_Builder *)toBuilder
{
  return [TestEmptyMessageWithExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:1 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessageWithExtensions class]]) {
    return NO;
  }
  TestEmptyMessageWithExtensions *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestEmptyMessageWithExtensions_Builder()

@property (strong) TestEmptyMessageWithExtensions *result;

@end


@implementation TestEmptyMessageWithExtensions_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestEmptyMessageWithExtensions alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestEmptyMessageWithExtensions_Builder *)clear
{
  self.result = [[TestEmptyMessageWithExtensions alloc] init];
  return self;
}

- (TestEmptyMessageWithExtensions_Builder *)clone
{
  return [TestEmptyMessageWithExtensions builderWithPrototype:_result];
}

- (TestEmptyMessageWithExtensions *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestEmptyMessageWithExtensions *)buildPartial
{
  TestEmptyMessageWithExtensions *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestEmptyMessageWithExtensions_Builder *)mergeFrom:(TestEmptyMessageWithExtensions *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestEmptyMessageWithExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestEmptyMessageWithExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestMultipleExtensionRanges ()


@end


@implementation TestMultipleExtensionRanges

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:42 to:43];
  [self writeExtensionsToCodedOutputStream:output from:4143 to:4244];
  [self writeExtensionsToCodedOutputStream:output from:65536 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestMultipleExtensionRanges *)parseFromData:(NSData *)data
{
  return (TestMultipleExtensionRanges *)[[[TestMultipleExtensionRanges builder] mergeFromData:data] build];
}

+ (TestMultipleExtensionRanges *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestMultipleExtensionRanges *)parseFromInputStream:(NSInputStream *)input
{
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromInputStream:input] build];
}

+ (TestMultipleExtensionRanges *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMultipleExtensionRanges *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestMultipleExtensionRanges builder] mergeFromCodedInputStream:input] build];
}

+ (TestMultipleExtensionRanges *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestMultipleExtensionRanges builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMultipleExtensionRanges_Builder *)builder
{
  return [[TestMultipleExtensionRanges_Builder alloc] init];
}

+ (TestMultipleExtensionRanges_Builder *)builderWithPrototype:(TestMultipleExtensionRanges *)prototype
{
  return [[TestMultipleExtensionRanges builder] mergeFrom:prototype];
}

- (TestMultipleExtensionRanges_Builder *)builder
{
  return [TestMultipleExtensionRanges builder];
}

- (TestMultipleExtensionRanges_Builder *)toBuilder
{
  return [TestMultipleExtensionRanges builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:42 to:43 withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:4143 to:4244 withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:65536 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMultipleExtensionRanges class]]) {
    return NO;
  }
  TestMultipleExtensionRanges *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:42 to:43] &&

    [self isEqualExtensionsInOther:otherMessage from:4143 to:4244] &&

    [self isEqualExtensionsInOther:otherMessage from:65536 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:42 to:43];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:4143 to:4244];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:65536 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestMultipleExtensionRanges_Builder()

@property (strong) TestMultipleExtensionRanges *result;

@end


@implementation TestMultipleExtensionRanges_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestMultipleExtensionRanges alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestMultipleExtensionRanges_Builder *)clear
{
  self.result = [[TestMultipleExtensionRanges alloc] init];
  return self;
}

- (TestMultipleExtensionRanges_Builder *)clone
{
  return [TestMultipleExtensionRanges builderWithPrototype:_result];
}

- (TestMultipleExtensionRanges *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestMultipleExtensionRanges *)buildPartial
{
  TestMultipleExtensionRanges *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestMultipleExtensionRanges_Builder *)mergeFrom:(TestMultipleExtensionRanges *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestMultipleExtensionRanges_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestMultipleExtensionRanges_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestReallyLargeTagNumber ()


@end


@implementation TestReallyLargeTagNumber

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (BOOL)hasBb
{
  return _hasBb;
}

- (void)setBb:(int32_t)value
{
  _hasBb = YES;
  _bb = value;
}

- (void)clearBb
{
  _hasBb = NO;
  _bb = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
    _bb = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasBb) {
    [output writeInt32:268435455 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasBb) {
    size_ += computeInt32Size(268435455, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestReallyLargeTagNumber *)parseFromData:(NSData *)data
{
  return (TestReallyLargeTagNumber *)[[[TestReallyLargeTagNumber builder] mergeFromData:data] build];
}

+ (TestReallyLargeTagNumber *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestReallyLargeTagNumber *)parseFromInputStream:(NSInputStream *)input
{
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromInputStream:input] build];
}

+ (TestReallyLargeTagNumber *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestReallyLargeTagNumber *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestReallyLargeTagNumber builder] mergeFromCodedInputStream:input] build];
}

+ (TestReallyLargeTagNumber *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestReallyLargeTagNumber builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestReallyLargeTagNumber_Builder *)builder
{
  return [[TestReallyLargeTagNumber_Builder alloc] init];
}

+ (TestReallyLargeTagNumber_Builder *)builderWithPrototype:(TestReallyLargeTagNumber *)prototype
{
  return [[TestReallyLargeTagNumber builder] mergeFrom:prototype];
}

- (TestReallyLargeTagNumber_Builder *)builder
{
  return [TestReallyLargeTagNumber builder];
}

- (TestReallyLargeTagNumber_Builder *)toBuilder
{
  return [TestReallyLargeTagNumber builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", @(self.bb)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestReallyLargeTagNumber class]]) {
    return NO;
  }
  TestReallyLargeTagNumber *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.hasBb == otherMessage.hasBb && (!self.hasBb || self.bb == otherMessage.bb)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasBb) {
    hashCode = hashCode * 31 + [@(self.bb) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestReallyLargeTagNumber_Builder()

@property (strong) TestReallyLargeTagNumber *result;

@end


@implementation TestReallyLargeTagNumber_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestReallyLargeTagNumber alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestReallyLargeTagNumber_Builder *)clear
{
  self.result = [[TestReallyLargeTagNumber alloc] init];
  return self;
}

- (TestReallyLargeTagNumber_Builder *)clone
{
  return [TestReallyLargeTagNumber builderWithPrototype:_result];
}

- (TestReallyLargeTagNumber *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestReallyLargeTagNumber *)buildPartial
{
  TestReallyLargeTagNumber *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestReallyLargeTagNumber_Builder *)mergeFrom:(TestReallyLargeTagNumber *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestReallyLargeTagNumber_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestReallyLargeTagNumber_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 2147483640: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestReallyLargeTagNumber_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestReallyLargeTagNumber_Builder*)clearA
{
  [_result clearA];
  return self;
}

- (BOOL)hasBb
{
  return _result.hasBb;
}

- (int32_t)bb
{
  return _result.bb;
}

- (TestReallyLargeTagNumber_Builder*)setBb:(int32_t)value
{
  _result.bb = value;
  return self;
}

- (TestReallyLargeTagNumber_Builder*)clearBb
{
  [_result clearBb];
  return self;
}

@end


@interface TestRecursiveMessage ()


@end


@implementation TestRecursiveMessage

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(TestRecursiveMessage *)value
{
  _hasA = value != nil;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = nil;
}

- (BOOL)hasI
{
  return _hasI;
}

- (void)setI:(int32_t)value
{
  _hasI = YES;
  _i = value;
}

- (void)clearI
{
  _hasI = NO;
  _i = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = nil;
    _i = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasI) {
    [output writeInt32:2 value:self.i];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasI) {
    size_ += computeInt32Size(2, self.i);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestRecursiveMessage *)parseFromData:(NSData *)data
{
  return (TestRecursiveMessage *)[[[TestRecursiveMessage builder] mergeFromData:data] build];
}

+ (TestRecursiveMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestRecursiveMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromInputStream:input] build];
}

+ (TestRecursiveMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRecursiveMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestRecursiveMessage builder] mergeFromCodedInputStream:input] build];
}

+ (TestRecursiveMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestRecursiveMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRecursiveMessage_Builder *)builder
{
  return [[TestRecursiveMessage_Builder alloc] init];
}

+ (TestRecursiveMessage_Builder *)builderWithPrototype:(TestRecursiveMessage *)prototype
{
  return [[TestRecursiveMessage builder] mergeFrom:prototype];
}

- (TestRecursiveMessage_Builder *)builder
{
  return [TestRecursiveMessage builder];
}

- (TestRecursiveMessage_Builder *)toBuilder
{
  return [TestRecursiveMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"i", @(self.i)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRecursiveMessage class]]) {
    return NO;
  }
  TestRecursiveMessage *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || [self.a isEqual:otherMessage.a])) &&
    (self.hasI == otherMessage.hasI && (!self.hasI || self.i == otherMessage.i)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasI) {
    hashCode = hashCode * 31 + [@(self.i) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestRecursiveMessage_Builder()

@property (strong) TestRecursiveMessage *result;

@end


@implementation TestRecursiveMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestRecursiveMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestRecursiveMessage_Builder *)clear
{
  self.result = [[TestRecursiveMessage alloc] init];
  return self;
}

- (TestRecursiveMessage_Builder *)clone
{
  return [TestRecursiveMessage builderWithPrototype:_result];
}

- (TestRecursiveMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestRecursiveMessage *)buildPartial
{
  TestRecursiveMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestRecursiveMessage_Builder *)mergeFrom:(TestRecursiveMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasI) {
    [self setI:other.i];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestRecursiveMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestRecursiveMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRecursiveMessage_Builder *subBuilder = [TestRecursiveMessage builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setI:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (TestRecursiveMessage *)a
{
  return _result.a;
}

- (TestRecursiveMessage_Builder *)setA:(TestRecursiveMessage *)value
{
  _result.a = value;
  return self;
}

- (TestRecursiveMessage_Builder *)setABuilder:(TestRecursiveMessage_Builder *)builderForValue
{
  return [self setA:[builderForValue build]];
}

- (TestRecursiveMessage_Builder *)mergeA:(TestRecursiveMessage *)value
{
  if (_result.hasA && _result.a != nil) {
    _result.a = [[[TestRecursiveMessage builderWithPrototype:_result.a] mergeFrom:value] buildPartial];
  } else {
    _result.a = value;
  }
  return self;
}

- (TestRecursiveMessage_Builder *)clearA
{
  [_result clearA];
  return self;
}

- (BOOL)hasI
{
  return _result.hasI;
}

- (int32_t)i
{
  return _result.i;
}

- (TestRecursiveMessage_Builder*)setI:(int32_t)value
{
  _result.i = value;
  return self;
}

- (TestRecursiveMessage_Builder*)clearI
{
  [_result clearI];
  return self;
}

@end


@interface TestMutualRecursionA ()


@end


@implementation TestMutualRecursionA

- (BOOL)hasBb
{
  return _hasBb;
}

- (void)setBb:(TestMutualRecursionB *)value
{
  _hasBb = value != nil;
  _bb = value;
}

- (void)clearBb
{
  _hasBb = NO;
  _bb = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _bb = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasBb) {
    [output writeMessage:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasBb) {
    size_ += computeMessageSize(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestMutualRecursionA *)parseFromData:(NSData *)data
{
  return (TestMutualRecursionA *)[[[TestMutualRecursionA builder] mergeFromData:data] build];
}

+ (TestMutualRecursionA *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionA *)parseFromInputStream:(NSInputStream *)input
{
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromInputStream:input] build];
}

+ (TestMutualRecursionA *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionA *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestMutualRecursionA builder] mergeFromCodedInputStream:input] build];
}

+ (TestMutualRecursionA *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestMutualRecursionA builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionA_Builder *)builder
{
  return [[TestMutualRecursionA_Builder alloc] init];
}

+ (TestMutualRecursionA_Builder *)builderWithPrototype:(TestMutualRecursionA *)prototype
{
  return [[TestMutualRecursionA builder] mergeFrom:prototype];
}

- (TestMutualRecursionA_Builder *)builder
{
  return [TestMutualRecursionA builder];
}

- (TestMutualRecursionA_Builder *)toBuilder
{
  return [TestMutualRecursionA builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasBb) {
    [output appendFormat:@"%@%@ {\n", indent, @"bb"];
    [self.bb writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionA class]]) {
    return NO;
  }
  TestMutualRecursionA *otherMessage = other;
  return
    (self.hasBb == otherMessage.hasBb && (!self.hasBb || [self.bb isEqual:otherMessage.bb])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [self.bb hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestMutualRecursionA_Builder()

@property (strong) TestMutualRecursionA *result;

@end


@implementation TestMutualRecursionA_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestMutualRecursionA alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestMutualRecursionA_Builder *)clear
{
  self.result = [[TestMutualRecursionA alloc] init];
  return self;
}

- (TestMutualRecursionA_Builder *)clone
{
  return [TestMutualRecursionA builderWithPrototype:_result];
}

- (TestMutualRecursionA *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestMutualRecursionA *)buildPartial
{
  TestMutualRecursionA *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestMutualRecursionA_Builder *)mergeFrom:(TestMutualRecursionA *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasBb) {
    [self mergeBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestMutualRecursionA_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestMutualRecursionA_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionB_Builder *subBuilder = [TestMutualRecursionB builder];
        if (self.hasBb) {
          [subBuilder mergeFrom:self.bb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}

- (BOOL)hasBb
{
  return _result.hasBb;
}

- (TestMutualRecursionB *)bb
{
  return _result.bb;
}

- (TestMutualRecursionA_Builder *)setBb:(TestMutualRecursionB *)value
{
  _result.bb = value;
  return self;
}

- (TestMutualRecursionA_Builder *)setBbBuilder:(TestMutualRecursionB_Builder *)builderForValue
{
  return [self setBb:[builderForValue build]];
}

- (TestMutualRecursionA_Builder *)mergeBb:(TestMutualRecursionB *)value
{
  if (_result.hasBb && _result.bb != nil) {
    _result.bb = [[[TestMutualRecursionB builderWithPrototype:_result.bb] mergeFrom:value] buildPartial];
  } else {
    _result.bb = value;
  }
  return self;
}

- (TestMutualRecursionA_Builder *)clearBb
{
  [_result clearBb];
  return self;
}

@end


@interface TestMutualRecursionB ()


@end


@implementation TestMutualRecursionB

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(TestMutualRecursionA *)value
{
  _hasA = value != nil;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = nil;
}

- (BOOL)hasOptionalInt32
{
  return _hasOptionalInt32;
}

- (void)setOptionalInt32:(int32_t)value
{
  _hasOptionalInt32 = YES;
  _optionalInt32 = value;
}

- (void)clearOptionalInt32
{
  _hasOptionalInt32 = NO;
  _optionalInt32 = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = nil;
    _optionalInt32 = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasOptionalInt32) {
    [output writeInt32:2 value:self.optionalInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(2, self.optionalInt32);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestMutualRecursionB *)parseFromData:(NSData *)data
{
  return (TestMutualRecursionB *)[[[TestMutualRecursionB builder] mergeFromData:data] build];
}

+ (TestMutualRecursionB *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionB *)parseFromInputStream:(NSInputStream *)input
{
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromInputStream:input] build];
}

+ (TestMutualRecursionB *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionB *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestMutualRecursionB builder] mergeFromCodedInputStream:input] build];
}

+ (TestMutualRecursionB *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestMutualRecursionB builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestMutualRecursionB_Builder *)builder
{
  return [[TestMutualRecursionB_Builder alloc] init];
}

+ (TestMutualRecursionB_Builder *)builderWithPrototype:(TestMutualRecursionB *)prototype
{
  return [[TestMutualRecursionB builder] mergeFrom:prototype];
}

- (TestMutualRecursionB_Builder *)builder
{
  return [TestMutualRecursionB builder];
}

- (TestMutualRecursionB_Builder *)toBuilder
{
  return [TestMutualRecursionB builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", @(self.optionalInt32)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionB class]]) {
    return NO;
  }
  TestMutualRecursionB *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || [self.a isEqual:otherMessage.a])) &&
    (self.hasOptionalInt32 == otherMessage.hasOptionalInt32 && (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [@(self.optionalInt32) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestMutualRecursionB_Builder()

@property (strong) TestMutualRecursionB *result;

@end


@implementation TestMutualRecursionB_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestMutualRecursionB alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestMutualRecursionB_Builder *)clear
{
  self.result = [[TestMutualRecursionB alloc] init];
  return self;
}

- (TestMutualRecursionB_Builder *)clone
{
  return [TestMutualRecursionB builderWithPrototype:_result];
}

- (TestMutualRecursionB *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestMutualRecursionB *)buildPartial
{
  TestMutualRecursionB *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestMutualRecursionB_Builder *)mergeFrom:(TestMutualRecursionB *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestMutualRecursionB_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestMutualRecursionB_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionA_Builder *subBuilder = [TestMutualRecursionA builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (TestMutualRecursionA *)a
{
  return _result.a;
}

- (TestMutualRecursionB_Builder *)setA:(TestMutualRecursionA *)value
{
  _result.a = value;
  return self;
}

- (TestMutualRecursionB_Builder *)setABuilder:(TestMutualRecursionA_Builder *)builderForValue
{
  return [self setA:[builderForValue build]];
}

- (TestMutualRecursionB_Builder *)mergeA:(TestMutualRecursionA *)value
{
  if (_result.hasA && _result.a != nil) {
    _result.a = [[[TestMutualRecursionA builderWithPrototype:_result.a] mergeFrom:value] buildPartial];
  } else {
    _result.a = value;
  }
  return self;
}

- (TestMutualRecursionB_Builder *)clearA
{
  [_result clearA];
  return self;
}

- (BOOL)hasOptionalInt32
{
  return _result.hasOptionalInt32;
}

- (int32_t)optionalInt32
{
  return _result.optionalInt32;
}

- (TestMutualRecursionB_Builder*)setOptionalInt32:(int32_t)value
{
  _result.optionalInt32 = value;
  return self;
}

- (TestMutualRecursionB_Builder*)clearOptionalInt32
{
  [_result clearOptionalInt32];
  return self;
}

@end


@interface TestDupFieldNumber ()


@end


@implementation TestDupFieldNumber

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (BOOL)hasFoo
{
  return _hasFoo;
}

- (void)setFoo:(TestDupFieldNumber_Foo *)value
{
  _hasFoo = value != nil;
  _foo = value;
}

- (void)clearFoo
{
  _hasFoo = NO;
  _foo = nil;
}

- (BOOL)hasBar
{
  return _hasBar;
}

- (void)setBar:(TestDupFieldNumber_Bar *)value
{
  _hasBar = value != nil;
  _bar = value;
}

- (void)clearBar
{
  _hasBar = NO;
  _bar = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
    _foo = nil;
    _bar = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasFoo) {
    [output writeGroup:2 value:self.foo];
  }
  if (self.hasBar) {
    [output writeGroup:3 value:self.bar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasFoo) {
    size_ += computeGroupSize(2, self.foo);
  }
  if (self.hasBar) {
    size_ += computeGroupSize(3, self.bar);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDupFieldNumber *)parseFromData:(NSData *)data
{
  return (TestDupFieldNumber *)[[[TestDupFieldNumber builder] mergeFromData:data] build];
}

+ (TestDupFieldNumber *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromInputStream:input] build];
}

+ (TestDupFieldNumber *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDupFieldNumber builder] mergeFromCodedInputStream:input] build];
}

+ (TestDupFieldNumber *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDupFieldNumber builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Builder *)builder
{
  return [[TestDupFieldNumber_Builder alloc] init];
}

+ (TestDupFieldNumber_Builder *)builderWithPrototype:(TestDupFieldNumber *)prototype
{
  return [[TestDupFieldNumber builder] mergeFrom:prototype];
}

- (TestDupFieldNumber_Builder *)builder
{
  return [TestDupFieldNumber builder];
}

- (TestDupFieldNumber_Builder *)toBuilder
{
  return [TestDupFieldNumber builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasFoo) {
    [output appendFormat:@"%@%@ {\n", indent, @"foo"];
    [self.foo writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBar) {
    [output appendFormat:@"%@%@ {\n", indent, @"bar"];
    [self.bar writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber class]]) {
    return NO;
  }
  TestDupFieldNumber *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.hasFoo == otherMessage.hasFoo && (!self.hasFoo || [self.foo isEqual:otherMessage.foo])) &&
    (self.hasBar == otherMessage.hasBar && (!self.hasBar || [self.bar isEqual:otherMessage.bar])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasFoo) {
    hashCode = hashCode * 31 + [self.foo hash];
  }
  if (self.hasBar) {
    hashCode = hashCode * 31 + [self.bar hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDupFieldNumber_Foo ()


@end


@implementation TestDupFieldNumber_Foo

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDupFieldNumber_Foo *)parseFromData:(NSData *)data
{
  return (TestDupFieldNumber_Foo *)[[[TestDupFieldNumber_Foo builder] mergeFromData:data] build];
}

+ (TestDupFieldNumber_Foo *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber_Foo*)[[[TestDupFieldNumber_Foo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Foo *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDupFieldNumber_Foo*)[[[TestDupFieldNumber_Foo builder] mergeFromInputStream:input] build];
}

+ (TestDupFieldNumber_Foo *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber_Foo*)[[[TestDupFieldNumber_Foo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Foo *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDupFieldNumber_Foo builder] mergeFromCodedInputStream:input] build];
}

+ (TestDupFieldNumber_Foo *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDupFieldNumber_Foo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Foo_Builder *)builder
{
  return [[TestDupFieldNumber_Foo_Builder alloc] init];
}

+ (TestDupFieldNumber_Foo_Builder *)builderWithPrototype:(TestDupFieldNumber_Foo *)prototype
{
  return [[TestDupFieldNumber_Foo builder] mergeFrom:prototype];
}

- (TestDupFieldNumber_Foo_Builder *)builder
{
  return [TestDupFieldNumber_Foo builder];
}

- (TestDupFieldNumber_Foo_Builder *)toBuilder
{
  return [TestDupFieldNumber_Foo builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber_Foo class]]) {
    return NO;
  }
  TestDupFieldNumber_Foo *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDupFieldNumber_Foo_Builder()

@property (strong) TestDupFieldNumber_Foo *result;

@end


@implementation TestDupFieldNumber_Foo_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDupFieldNumber_Foo alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDupFieldNumber_Foo_Builder *)clear
{
  self.result = [[TestDupFieldNumber_Foo alloc] init];
  return self;
}

- (TestDupFieldNumber_Foo_Builder *)clone
{
  return [TestDupFieldNumber_Foo builderWithPrototype:_result];
}

- (TestDupFieldNumber_Foo *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDupFieldNumber_Foo *)buildPartial
{
  TestDupFieldNumber_Foo *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDupFieldNumber_Foo_Builder *)mergeFrom:(TestDupFieldNumber_Foo *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDupFieldNumber_Foo_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDupFieldNumber_Foo_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestDupFieldNumber_Foo_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestDupFieldNumber_Foo_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestDupFieldNumber_Bar ()


@end


@implementation TestDupFieldNumber_Bar

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDupFieldNumber_Bar *)parseFromData:(NSData *)data
{
  return (TestDupFieldNumber_Bar *)[[[TestDupFieldNumber_Bar builder] mergeFromData:data] build];
}

+ (TestDupFieldNumber_Bar *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber_Bar*)[[[TestDupFieldNumber_Bar builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Bar *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDupFieldNumber_Bar*)[[[TestDupFieldNumber_Bar builder] mergeFromInputStream:input] build];
}

+ (TestDupFieldNumber_Bar *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDupFieldNumber_Bar*)[[[TestDupFieldNumber_Bar builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Bar *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDupFieldNumber_Bar builder] mergeFromCodedInputStream:input] build];
}

+ (TestDupFieldNumber_Bar *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDupFieldNumber_Bar builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDupFieldNumber_Bar_Builder *)builder
{
  return [[TestDupFieldNumber_Bar_Builder alloc] init];
}

+ (TestDupFieldNumber_Bar_Builder *)builderWithPrototype:(TestDupFieldNumber_Bar *)prototype
{
  return [[TestDupFieldNumber_Bar builder] mergeFrom:prototype];
}

- (TestDupFieldNumber_Bar_Builder *)builder
{
  return [TestDupFieldNumber_Bar builder];
}

- (TestDupFieldNumber_Bar_Builder *)toBuilder
{
  return [TestDupFieldNumber_Bar builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber_Bar class]]) {
    return NO;
  }
  TestDupFieldNumber_Bar *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDupFieldNumber_Bar_Builder()

@property (strong) TestDupFieldNumber_Bar *result;

@end


@implementation TestDupFieldNumber_Bar_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDupFieldNumber_Bar alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDupFieldNumber_Bar_Builder *)clear
{
  self.result = [[TestDupFieldNumber_Bar alloc] init];
  return self;
}

- (TestDupFieldNumber_Bar_Builder *)clone
{
  return [TestDupFieldNumber_Bar builderWithPrototype:_result];
}

- (TestDupFieldNumber_Bar *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDupFieldNumber_Bar *)buildPartial
{
  TestDupFieldNumber_Bar *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDupFieldNumber_Bar_Builder *)mergeFrom:(TestDupFieldNumber_Bar *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDupFieldNumber_Bar_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDupFieldNumber_Bar_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestDupFieldNumber_Bar_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestDupFieldNumber_Bar_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestDupFieldNumber_Builder()

@property (strong) TestDupFieldNumber *result;

@end


@implementation TestDupFieldNumber_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDupFieldNumber alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDupFieldNumber_Builder *)clear
{
  self.result = [[TestDupFieldNumber alloc] init];
  return self;
}

- (TestDupFieldNumber_Builder *)clone
{
  return [TestDupFieldNumber builderWithPrototype:_result];
}

- (TestDupFieldNumber *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDupFieldNumber *)buildPartial
{
  TestDupFieldNumber *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDupFieldNumber_Builder *)mergeFrom:(TestDupFieldNumber *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasFoo) {
    [self mergeFoo:other.foo];
  }
  if (other.hasBar) {
    [self mergeBar:other.bar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDupFieldNumber_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDupFieldNumber_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 19: {
        TestDupFieldNumber_Foo_Builder *subBuilder = [TestDupFieldNumber_Foo builder];
        if (self.hasFoo) {
          [subBuilder mergeFrom:self.foo];
        }
        [input readGroup:2 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFoo:[subBuilder buildPartial]];
        break;
      }
      case 27: {
        TestDupFieldNumber_Bar_Builder *subBuilder = [TestDupFieldNumber_Bar builder];
        if (self.hasBar) {
          [subBuilder mergeFrom:self.bar];
        }
        [input readGroup:3 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setBar:[subBuilder buildPartial]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestDupFieldNumber_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestDupFieldNumber_Builder*)clearA
{
  [_result clearA];
  return self;
}

- (BOOL)hasFoo
{
  return _result.hasFoo;
}

- (TestDupFieldNumber_Foo *)foo
{
  return _result.foo;
}

- (TestDupFieldNumber_Builder *)setFoo:(TestDupFieldNumber_Foo *)value
{
  _result.foo = value;
  return self;
}

- (TestDupFieldNumber_Builder *)setFooBuilder:(TestDupFieldNumber_Foo_Builder *)builderForValue
{
  return [self setFoo:[builderForValue build]];
}

- (TestDupFieldNumber_Builder *)mergeFoo:(TestDupFieldNumber_Foo *)value
{
  if (_result.hasFoo && _result.foo != nil) {
    _result.foo = [[[TestDupFieldNumber_Foo builderWithPrototype:_result.foo] mergeFrom:value] buildPartial];
  } else {
    _result.foo = value;
  }
  return self;
}

- (TestDupFieldNumber_Builder *)clearFoo
{
  [_result clearFoo];
  return self;
}

- (BOOL)hasBar
{
  return _result.hasBar;
}

- (TestDupFieldNumber_Bar *)bar
{
  return _result.bar;
}

- (TestDupFieldNumber_Builder *)setBar:(TestDupFieldNumber_Bar *)value
{
  _result.bar = value;
  return self;
}

- (TestDupFieldNumber_Builder *)setBarBuilder:(TestDupFieldNumber_Bar_Builder *)builderForValue
{
  return [self setBar:[builderForValue build]];
}

- (TestDupFieldNumber_Builder *)mergeBar:(TestDupFieldNumber_Bar *)value
{
  if (_result.hasBar && _result.bar != nil) {
    _result.bar = [[[TestDupFieldNumber_Bar builderWithPrototype:_result.bar] mergeFrom:value] buildPartial];
  } else {
    _result.bar = value;
  }
  return self;
}

- (TestDupFieldNumber_Builder *)clearBar
{
  [_result clearBar];
  return self;
}

@end


@interface TestNestedMessageHasBits ()


@end


@implementation TestNestedMessageHasBits

- (BOOL)hasOptionalNestedMessage
{
  return _hasOptionalNestedMessage;
}

- (void)setOptionalNestedMessage:(TestNestedMessageHasBits_NestedMessage *)value
{
  _hasOptionalNestedMessage = value != nil;
  _optionalNestedMessage = value;
}

- (void)clearOptionalNestedMessage
{
  _hasOptionalNestedMessage = NO;
  _optionalNestedMessage = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _optionalNestedMessage = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:1 value:self.optionalNestedMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(1, self.optionalNestedMessage);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestNestedMessageHasBits *)parseFromData:(NSData *)data
{
  return (TestNestedMessageHasBits *)[[[TestNestedMessageHasBits builder] mergeFromData:data] build];
}

+ (TestNestedMessageHasBits *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits *)parseFromInputStream:(NSInputStream *)input
{
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromInputStream:input] build];
}

+ (TestNestedMessageHasBits *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestNestedMessageHasBits builder] mergeFromCodedInputStream:input] build];
}

+ (TestNestedMessageHasBits *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestNestedMessageHasBits builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits_Builder *)builder
{
  return [[TestNestedMessageHasBits_Builder alloc] init];
}

+ (TestNestedMessageHasBits_Builder *)builderWithPrototype:(TestNestedMessageHasBits *)prototype
{
  return [[TestNestedMessageHasBits builder] mergeFrom:prototype];
}

- (TestNestedMessageHasBits_Builder *)builder
{
  return [TestNestedMessageHasBits builder];
}

- (TestNestedMessageHasBits_Builder *)toBuilder
{
  return [TestNestedMessageHasBits builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBits class]]) {
    return NO;
  }
  TestNestedMessageHasBits *otherMessage = other;
  return
    (self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage && (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestNestedMessageHasBits_NestedMessage ()


@end


@implementation TestNestedMessageHasBits_NestedMessage

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (int32_t)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index
{
  return [_nestedmessageRepeatedInt32 int32AtIndex:index];
}
- (void)addNestedmessageRepeatedInt32:(int32_t)value
{
  if (_nestedmessageRepeatedInt32 == nil) {
    _nestedmessageRepeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_nestedmessageRepeatedInt32 addInt32:value];
}

- (void)addNestedmessageRepeatedInt32Array:(NSArray *)array
{
  if (_nestedmessageRepeatedInt32 == nil) {
    _nestedmessageRepeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_nestedmessageRepeatedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setNestedmessageRepeatedInt32Array:(NSArray *)array
{
  _nestedmessageRepeatedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setNestedmessageRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _nestedmessageRepeatedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearNestedmessageRepeatedInt32
{
  _nestedmessageRepeatedInt32 = nil;
}

- (ForeignMessage *)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index
{
  return _nestedmessageRepeatedForeignmessage[index];
}
- (void)addNestedmessageRepeatedForeignmessage:(ForeignMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_nestedmessageRepeatedForeignmessage == nil) {
    _nestedmessageRepeatedForeignmessage = [[NSMutableArray alloc] init];
  }
  [_nestedmessageRepeatedForeignmessage addObject:value];
}

- (void)addNestedmessageRepeatedForeignmessageArray:(NSArray *)array
{
  if (_nestedmessageRepeatedForeignmessage == nil) {
    _nestedmessageRepeatedForeignmessage = [[NSMutableArray alloc] init];
  }
  [_nestedmessageRepeatedForeignmessage addObjectsFromArray:array];
}

- (void)setNestedmessageRepeatedForeignmessageArray:(NSArray *)array
{
  _nestedmessageRepeatedForeignmessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearNestedmessageRepeatedForeignmessage
{
  _nestedmessageRepeatedForeignmessage = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  const NSUInteger nestedmessageRepeatedInt32Count = self.nestedmessageRepeatedInt32.count;
  if (nestedmessageRepeatedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.nestedmessageRepeatedInt32.data;
    for (NSUInteger i = 0; i < nestedmessageRepeatedInt32Count; ++i) {
      [output writeInt32:1 value:values[i]];
    }
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessage) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.nestedmessageRepeatedInt32.count;
    const int32_t *values = (const int32_t *)self.nestedmessageRepeatedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessage) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromData:(NSData *)data
{
  return (TestNestedMessageHasBits_NestedMessage *)[[[TestNestedMessageHasBits_NestedMessage builder] mergeFromData:data] build];
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedMessageHasBits_NestedMessage*)[[[TestNestedMessageHasBits_NestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (TestNestedMessageHasBits_NestedMessage*)[[[TestNestedMessageHasBits_NestedMessage builder] mergeFromInputStream:input] build];
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedMessageHasBits_NestedMessage*)[[[TestNestedMessageHasBits_NestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestNestedMessageHasBits_NestedMessage builder] mergeFromCodedInputStream:input] build];
}

+ (TestNestedMessageHasBits_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestNestedMessageHasBits_NestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedMessageHasBits_NestedMessage_Builder *)builder
{
  return [[TestNestedMessageHasBits_NestedMessage_Builder alloc] init];
}

+ (TestNestedMessageHasBits_NestedMessage_Builder *)builderWithPrototype:(TestNestedMessageHasBits_NestedMessage *)prototype
{
  return [[TestNestedMessageHasBits_NestedMessage builder] mergeFrom:prototype];
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)builder
{
  return [TestNestedMessageHasBits_NestedMessage builder];
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)toBuilder
{
  return [TestNestedMessageHasBits_NestedMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  for (NSUInteger i = 0, listCount = self.nestedmessageRepeatedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nestedmessageRepeatedInt32", @([self.nestedmessageRepeatedInt32 int32AtIndex:i])];
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"nestedmessageRepeatedForeignmessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBits_NestedMessage class]]) {
    return NO;
  }
  TestNestedMessageHasBits_NestedMessage *otherMessage = other;
  return
    [self.nestedmessageRepeatedInt32 isEqualToArray:otherMessage.nestedmessageRepeatedInt32] &&
    [self.nestedmessageRepeatedForeignmessage isEqualToArray:otherMessage.nestedmessageRepeatedForeignmessage] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  for (NSUInteger i = 0, listCount = self.nestedmessageRepeatedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.nestedmessageRepeatedInt32 int32AtIndex:i]) hash];
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestNestedMessageHasBits_NestedMessage_Builder()

@property (strong) TestNestedMessageHasBits_NestedMessage *result;

@end


@implementation TestNestedMessageHasBits_NestedMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestNestedMessageHasBits_NestedMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)clear
{
  self.result = [[TestNestedMessageHasBits_NestedMessage alloc] init];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)clone
{
  return [TestNestedMessageHasBits_NestedMessage builderWithPrototype:_result];
}

- (TestNestedMessageHasBits_NestedMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestNestedMessageHasBits_NestedMessage *)buildPartial
{
  TestNestedMessageHasBits_NestedMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)mergeFrom:(TestNestedMessageHasBits_NestedMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.nestedmessageRepeatedInt32.count > 0) {
    if (_result.nestedmessageRepeatedInt32 == nil) {
      _result.nestedmessageRepeatedInt32 = [other.nestedmessageRepeatedInt32 copy];
    } else {
      [_result.nestedmessageRepeatedInt32 appendArray:other.nestedmessageRepeatedInt32];
    }
  }
  if (other.nestedmessageRepeatedForeignmessage.count > 0) {
    if (_result.nestedmessageRepeatedForeignmessage == nil) {
      _result.nestedmessageRepeatedForeignmessage = [[NSMutableArray alloc] initWithArray:other.nestedmessageRepeatedForeignmessage];
    } else {
      [_result.nestedmessageRepeatedForeignmessage addObjectsFromArray:other.nestedmessageRepeatedForeignmessage];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addNestedmessageRepeatedInt32:[input readInt32]];
        break;
      }
      case 18: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNestedmessageRepeatedForeignmessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}

- (PBAppendableArray *)nestedmessageRepeatedInt32
{
  return _result.nestedmessageRepeatedInt32;
}

- (int32_t)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index
{
  return [_result nestedmessageRepeatedInt32AtIndex:index];
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)addNestedmessageRepeatedInt32:(int32_t)value
{
  [_result addNestedmessageRepeatedInt32:value];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)setNestedmessageRepeatedInt32Array:(NSArray *)array
{
  [_result setNestedmessageRepeatedInt32Array:array];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)setNestedmessageRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setNestedmessageRepeatedInt32Values:values count:count];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)clearNestedmessageRepeatedInt32
{
  [_result clearNestedmessageRepeatedInt32];
  return self;
}

- (NSMutableArray *)nestedmessageRepeatedForeignmessage
{
  return _result.nestedmessageRepeatedForeignmessage;
}

- (ForeignMessage *)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index
{
  return [_result nestedmessageRepeatedForeignmessageAtIndex:index];
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)addNestedmessageRepeatedForeignmessage:(ForeignMessage *)value
{
  [_result addNestedmessageRepeatedForeignmessage:value];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)setNestedmessageRepeatedForeignmessageArray:(NSArray *)array
{
  [_result setNestedmessageRepeatedForeignmessageArray:array];
  return self;
}

- (TestNestedMessageHasBits_NestedMessage_Builder *)clearNestedmessageRepeatedForeignmessage
{
  [_result clearNestedmessageRepeatedForeignmessage];
  return self;
}

@end


@interface TestNestedMessageHasBits_Builder()

@property (strong) TestNestedMessageHasBits *result;

@end


@implementation TestNestedMessageHasBits_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestNestedMessageHasBits alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestNestedMessageHasBits_Builder *)clear
{
  self.result = [[TestNestedMessageHasBits alloc] init];
  return self;
}

- (TestNestedMessageHasBits_Builder *)clone
{
  return [TestNestedMessageHasBits builderWithPrototype:_result];
}

- (TestNestedMessageHasBits *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestNestedMessageHasBits *)buildPartial
{
  TestNestedMessageHasBits *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestNestedMessageHasBits_Builder *)mergeFrom:(TestNestedMessageHasBits *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestNestedMessageHasBits_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestNestedMessageHasBits_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestNestedMessageHasBits_NestedMessage_Builder *subBuilder = [TestNestedMessageHasBits_NestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}

- (BOOL)hasOptionalNestedMessage
{
  return _result.hasOptionalNestedMessage;
}

- (TestNestedMessageHasBits_NestedMessage *)optionalNestedMessage
{
  return _result.optionalNestedMessage;
}

- (TestNestedMessageHasBits_Builder *)setOptionalNestedMessage:(TestNestedMessageHasBits_NestedMessage *)value
{
  _result.optionalNestedMessage = value;
  return self;
}

- (TestNestedMessageHasBits_Builder *)setOptionalNestedMessageBuilder:(TestNestedMessageHasBits_NestedMessage_Builder *)builderForValue
{
  return [self setOptionalNestedMessage:[builderForValue build]];
}

- (TestNestedMessageHasBits_Builder *)mergeOptionalNestedMessage:(TestNestedMessageHasBits_NestedMessage *)value
{
  if (_result.hasOptionalNestedMessage && _result.optionalNestedMessage != nil) {
    _result.optionalNestedMessage = [[[TestNestedMessageHasBits_NestedMessage builderWithPrototype:_result.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalNestedMessage = value;
  }
  return self;
}

- (TestNestedMessageHasBits_Builder *)clearOptionalNestedMessage
{
  [_result clearOptionalNestedMessage];
  return self;
}

@end


@interface TestCamelCaseFieldNames ()


@end


@implementation TestCamelCaseFieldNames

- (BOOL)hasPrimitiveField
{
  return _hasPrimitiveField;
}

- (void)setPrimitiveField:(int32_t)value
{
  _hasPrimitiveField = YES;
  _primitiveField = value;
}

- (void)clearPrimitiveField
{
  _hasPrimitiveField = NO;
  _primitiveField = 0;
}

- (BOOL)hasStringField
{
  return _hasStringField;
}

- (void)setStringField:(NSString *)value
{
  _hasStringField = value != nil;
  _stringField = value;
}

- (void)clearStringField
{
  _hasStringField = NO;
  _stringField = nil;
}

- (BOOL)hasEnumField
{
  return _hasEnumField;
}

- (void)setEnumField:(ForeignEnum)value
{
  _hasEnumField = YES;
  _enumField = value;
}

- (void)clearEnumField
{
  _hasEnumField = NO;
  _enumField = ForeignEnumForeignFoo;
}

- (BOOL)hasMessageField
{
  return _hasMessageField;
}

- (void)setMessageField:(ForeignMessage *)value
{
  _hasMessageField = value != nil;
  _messageField = value;
}

- (void)clearMessageField
{
  _hasMessageField = NO;
  _messageField = nil;
}

- (BOOL)hasStringPieceField
{
  return _hasStringPieceField;
}

- (void)setStringPieceField:(NSString *)value
{
  _hasStringPieceField = value != nil;
  _stringPieceField = value;
}

- (void)clearStringPieceField
{
  _hasStringPieceField = NO;
  _stringPieceField = nil;
}

- (BOOL)hasCordField
{
  return _hasCordField;
}

- (void)setCordField:(NSString *)value
{
  _hasCordField = value != nil;
  _cordField = value;
}

- (void)clearCordField
{
  _hasCordField = NO;
  _cordField = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _primitiveField = 0;
    _stringField = nil;
    _enumField = ForeignEnumForeignFoo;
    _messageField = nil;
    _stringPieceField = nil;
    _cordField = nil;
  }
  return self;
}

- (int32_t)repeatedPrimitiveFieldAtIndex:(NSUInteger)index
{
  return [_repeatedPrimitiveField int32AtIndex:index];
}
- (void)addRepeatedPrimitiveField:(int32_t)value
{
  if (_repeatedPrimitiveField == nil) {
    _repeatedPrimitiveField = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedPrimitiveField addInt32:value];
}

- (void)addRepeatedPrimitiveFieldArray:(NSArray *)array
{
  if (_repeatedPrimitiveField == nil) {
    _repeatedPrimitiveField = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedPrimitiveField appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedPrimitiveFieldArray:(NSArray *)array
{
  _repeatedPrimitiveField = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedPrimitiveFieldValues:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedPrimitiveField = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedPrimitiveField
{
  _repeatedPrimitiveField = nil;
}

- (NSString *)repeatedStringFieldAtIndex:(NSUInteger)index
{
  return _repeatedStringField[index];
}

- (void)addRepeatedStringField:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedStringField == nil) {
    _repeatedStringField = [[NSMutableArray alloc] init];
  }
  [_repeatedStringField addObject:value];
}

- (void)addRepeatedStringFieldArray:(NSArray *)array
{
  if (_repeatedStringField == nil) {
    _repeatedStringField = [[NSMutableArray alloc] init];
  }
  [_repeatedStringField addObjectsFromArray:array];
}

- (void)setRepeatedStringFieldArray:(NSArray *)array
{
  _repeatedStringField = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedStringField
{
  _repeatedStringField = nil;
}

- (ForeignEnum)repeatedEnumFieldAtIndex:(NSUInteger)index
{
  return (ForeignEnum)[_repeatedEnumField int32AtIndex:index];
}

- (void)addRepeatedEnumField:(ForeignEnum)value
{
  if (_repeatedEnumField == nil) {
    _repeatedEnumField = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedEnumField addInt32:value];
}

- (void)addRepeatedEnumFieldArray:(NSArray *)array
{
  if (_repeatedEnumField == nil) {
    _repeatedEnumField = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedEnumField appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedEnumFieldArray:(NSArray *)array
{
  _repeatedEnumField = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedEnumFieldValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  _repeatedEnumField = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedEnumField
{
  _repeatedEnumField = nil;
}

- (ForeignMessage *)repeatedMessageFieldAtIndex:(NSUInteger)index
{
  return _repeatedMessageField[index];
}
- (void)addRepeatedMessageField:(ForeignMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedMessageField == nil) {
    _repeatedMessageField = [[NSMutableArray alloc] init];
  }
  [_repeatedMessageField addObject:value];
}

- (void)addRepeatedMessageFieldArray:(NSArray *)array
{
  if (_repeatedMessageField == nil) {
    _repeatedMessageField = [[NSMutableArray alloc] init];
  }
  [_repeatedMessageField addObjectsFromArray:array];
}

- (void)setRepeatedMessageFieldArray:(NSArray *)array
{
  _repeatedMessageField = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedMessageField
{
  _repeatedMessageField = nil;
}

- (NSString *)repeatedStringPieceFieldAtIndex:(NSUInteger)index
{
  return _repeatedStringPieceField[index];
}

- (void)addRepeatedStringPieceField:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedStringPieceField == nil) {
    _repeatedStringPieceField = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPieceField addObject:value];
}

- (void)addRepeatedStringPieceFieldArray:(NSArray *)array
{
  if (_repeatedStringPieceField == nil) {
    _repeatedStringPieceField = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPieceField addObjectsFromArray:array];
}

- (void)setRepeatedStringPieceFieldArray:(NSArray *)array
{
  _repeatedStringPieceField = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedStringPieceField
{
  _repeatedStringPieceField = nil;
}

- (NSString *)repeatedCordFieldAtIndex:(NSUInteger)index
{
  return _repeatedCordField[index];
}

- (void)addRepeatedCordField:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedCordField == nil) {
    _repeatedCordField = [[NSMutableArray alloc] init];
  }
  [_repeatedCordField addObject:value];
}

- (void)addRepeatedCordFieldArray:(NSArray *)array
{
  if (_repeatedCordField == nil) {
    _repeatedCordField = [[NSMutableArray alloc] init];
  }
  [_repeatedCordField addObjectsFromArray:array];
}

- (void)setRepeatedCordFieldArray:(NSArray *)array
{
  _repeatedCordField = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedCordField
{
  _repeatedCordField = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasPrimitiveField) {
    [output writeInt32:1 value:self.primitiveField];
  }
  if (self.hasStringField) {
    [output writeString:2 value:self.stringField];
  }
  if (self.hasEnumField) {
    [output writeEnum:3 value:self.enumField];
  }
  if (self.hasMessageField) {
    [output writeMessage:4 value:self.messageField];
  }
  if (self.hasStringPieceField) {
    [output writeString:5 value:self.stringPieceField];
  }
  if (self.hasCordField) {
    [output writeString:6 value:self.cordField];
  }
  const NSUInteger repeatedPrimitiveFieldCount = self.repeatedPrimitiveField.count;
  if (repeatedPrimitiveFieldCount > 0) {
    const int32_t *values = (const int32_t *)self.repeatedPrimitiveField.data;
    for (NSUInteger i = 0; i < repeatedPrimitiveFieldCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  const NSUInteger repeatedStringFieldCount = self.repeatedStringField.count;
  if (repeatedStringFieldCount > 0) {
    NSMutableArray *values = self.repeatedStringField;
    for (NSUInteger i = 0; i < repeatedStringFieldCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  const NSUInteger repeatedEnumFieldCount = self.repeatedEnumField.count;
  const ForeignEnum *repeatedEnumFieldValues = (const ForeignEnum *)self.repeatedEnumField.data;
  for (NSUInteger i = 0; i < repeatedEnumFieldCount; ++i) {
    [output writeEnum:9 value:repeatedEnumFieldValues[i]];
  }
  for (ForeignMessage *element in self.repeatedMessageField) {
    [output writeMessage:10 value:element];
  }
  const NSUInteger repeatedStringPieceFieldCount = self.repeatedStringPieceField.count;
  if (repeatedStringPieceFieldCount > 0) {
    NSMutableArray *values = self.repeatedStringPieceField;
    for (NSUInteger i = 0; i < repeatedStringPieceFieldCount; ++i) {
      [output writeString:11 value:values[i]];
    }
  }
  const NSUInteger repeatedCordFieldCount = self.repeatedCordField.count;
  if (repeatedCordFieldCount > 0) {
    NSMutableArray *values = self.repeatedCordField;
    for (NSUInteger i = 0; i < repeatedCordFieldCount; ++i) {
      [output writeString:12 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasPrimitiveField) {
    size_ += computeInt32Size(1, self.primitiveField);
  }
  if (self.hasStringField) {
    size_ += computeStringSize(2, self.stringField);
  }
  if (self.hasEnumField) {
    size_ += computeEnumSize(3, self.enumField);
  }
  if (self.hasMessageField) {
    size_ += computeMessageSize(4, self.messageField);
  }
  if (self.hasStringPieceField) {
    size_ += computeStringSize(5, self.stringPieceField);
  }
  if (self.hasCordField) {
    size_ += computeStringSize(6, self.cordField);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedPrimitiveField.count;
    const int32_t *values = (const int32_t *)self.repeatedPrimitiveField.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedStringField.count;
    NSMutableArray *values = self.repeatedStringField;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedEnumField.count;
    const ForeignEnum *values = (const ForeignEnum *)self.repeatedEnumField.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  for (ForeignMessage *element in self.repeatedMessageField) {
    size_ += computeMessageSize(10, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedStringPieceField.count;
    NSMutableArray *values = self.repeatedStringPieceField;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedCordField.count;
    NSMutableArray *values = self.repeatedCordField;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestCamelCaseFieldNames *)parseFromData:(NSData *)data
{
  return (TestCamelCaseFieldNames *)[[[TestCamelCaseFieldNames builder] mergeFromData:data] build];
}

+ (TestCamelCaseFieldNames *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestCamelCaseFieldNames *)parseFromInputStream:(NSInputStream *)input
{
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromInputStream:input] build];
}

+ (TestCamelCaseFieldNames *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestCamelCaseFieldNames *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestCamelCaseFieldNames builder] mergeFromCodedInputStream:input] build];
}

+ (TestCamelCaseFieldNames *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestCamelCaseFieldNames builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestCamelCaseFieldNames_Builder *)builder
{
  return [[TestCamelCaseFieldNames_Builder alloc] init];
}

+ (TestCamelCaseFieldNames_Builder *)builderWithPrototype:(TestCamelCaseFieldNames *)prototype
{
  return [[TestCamelCaseFieldNames builder] mergeFrom:prototype];
}

- (TestCamelCaseFieldNames_Builder *)builder
{
  return [TestCamelCaseFieldNames builder];
}

- (TestCamelCaseFieldNames_Builder *)toBuilder
{
  return [TestCamelCaseFieldNames builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasPrimitiveField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"primitiveField", @(self.primitiveField)];
  }
  if (self.hasStringField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringField", self.stringField];
  }
  if (self.hasEnumField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enumField", ForeignEnumToString((ForeignEnum)self.enumField)];
  }
  if (self.hasMessageField) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageField"];
    [self.messageField writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStringPieceField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringPieceField", self.stringPieceField];
  }
  if (self.hasCordField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cordField", self.cordField];
  }
  for (NSUInteger i = 0, listCount = self.repeatedPrimitiveField.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedPrimitiveField", @([self.repeatedPrimitiveField int32AtIndex:i])];
  }
  for (NSString * element in self.repeatedStringField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringField", element];
  }
  for (NSUInteger i = 0, listCount = self.repeatedEnumField.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedEnumField", ForeignEnumToString((ForeignEnum)[self.repeatedEnumField int32AtIndex:i])];
  }
  for (ForeignMessage *element in self.repeatedMessageField) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedMessageField"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSString * element in self.repeatedStringPieceField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPieceField", element];
  }
  for (NSString * element in self.repeatedCordField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCordField", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestCamelCaseFieldNames class]]) {
    return NO;
  }
  TestCamelCaseFieldNames *otherMessage = other;
  return
    (self.hasPrimitiveField == otherMessage.hasPrimitiveField && (!self.hasPrimitiveField || self.primitiveField == otherMessage.primitiveField)) &&
    (self.hasStringField == otherMessage.hasStringField && (!self.hasStringField || [self.stringField isEqual:otherMessage.stringField])) &&
    (self.hasEnumField == otherMessage.hasEnumField && (!self.hasEnumField || self.enumField == otherMessage.enumField)) &&
    (self.hasMessageField == otherMessage.hasMessageField && (!self.hasMessageField || [self.messageField isEqual:otherMessage.messageField])) &&
    (self.hasStringPieceField == otherMessage.hasStringPieceField && (!self.hasStringPieceField || [self.stringPieceField isEqual:otherMessage.stringPieceField])) &&
    (self.hasCordField == otherMessage.hasCordField && (!self.hasCordField || [self.cordField isEqual:otherMessage.cordField])) &&
    [self.repeatedPrimitiveField isEqualToArray:otherMessage.repeatedPrimitiveField] &&
    [self.repeatedStringField isEqualToArray:otherMessage.repeatedStringField] &&
    [self.repeatedEnumField isEqualToArray:otherMessage.repeatedEnumField] &&
    [self.repeatedMessageField isEqualToArray:otherMessage.repeatedMessageField] &&
    [self.repeatedStringPieceField isEqualToArray:otherMessage.repeatedStringPieceField] &&
    [self.repeatedCordField isEqualToArray:otherMessage.repeatedCordField] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasPrimitiveField) {
    hashCode = hashCode * 31 + [@(self.primitiveField) hash];
  }
  if (self.hasStringField) {
    hashCode = hashCode * 31 + [self.stringField hash];
  }
  if (self.hasEnumField) {
    hashCode = hashCode * 31 + self.enumField;
  }
  if (self.hasMessageField) {
    hashCode = hashCode * 31 + [self.messageField hash];
  }
  if (self.hasStringPieceField) {
    hashCode = hashCode * 31 + [self.stringPieceField hash];
  }
  if (self.hasCordField) {
    hashCode = hashCode * 31 + [self.cordField hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedPrimitiveField.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedPrimitiveField int32AtIndex:i]) hash];
  }
  for (NSString * element in self.repeatedStringField) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedEnumField.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedEnumField int32AtIndex:i];
  }
  for (ForeignMessage *element in self.repeatedMessageField) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.repeatedStringPieceField) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.repeatedCordField) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestCamelCaseFieldNames_Builder()

@property (strong) TestCamelCaseFieldNames *result;

@end


@implementation TestCamelCaseFieldNames_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestCamelCaseFieldNames alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestCamelCaseFieldNames_Builder *)clear
{
  self.result = [[TestCamelCaseFieldNames alloc] init];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clone
{
  return [TestCamelCaseFieldNames builderWithPrototype:_result];
}

- (TestCamelCaseFieldNames *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestCamelCaseFieldNames *)buildPartial
{
  TestCamelCaseFieldNames *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestCamelCaseFieldNames_Builder *)mergeFrom:(TestCamelCaseFieldNames *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasPrimitiveField) {
    [self setPrimitiveField:other.primitiveField];
  }
  if (other.hasStringField) {
    [self setStringField:other.stringField];
  }
  if (other.hasEnumField) {
    [self setEnumField:other.enumField];
  }
  if (other.hasMessageField) {
    [self mergeMessageField:other.messageField];
  }
  if (other.hasStringPieceField) {
    [self setStringPieceField:other.stringPieceField];
  }
  if (other.hasCordField) {
    [self setCordField:other.cordField];
  }
  if (other.repeatedPrimitiveField.count > 0) {
    if (_result.repeatedPrimitiveField == nil) {
      _result.repeatedPrimitiveField = [other.repeatedPrimitiveField copy];
    } else {
      [_result.repeatedPrimitiveField appendArray:other.repeatedPrimitiveField];
    }
  }
  if (other.repeatedStringField.count > 0) {
    if (_result.repeatedStringField == nil) {
      _result.repeatedStringField = [[NSMutableArray alloc] initWithArray:other.repeatedStringField];
    } else {
      [_result.repeatedStringField addObjectsFromArray:other.repeatedStringField];
    }
  }
  if (other.repeatedEnumField.count > 0) {
    if (_result.repeatedEnumField == nil) {
      _result.repeatedEnumField = [other.repeatedEnumField copy];
    } else {
      [_result.repeatedEnumField appendArray:other.repeatedEnumField];
    }
  }
  if (other.repeatedMessageField.count > 0) {
    if (_result.repeatedMessageField == nil) {
      _result.repeatedMessageField = [[NSMutableArray alloc] initWithArray:other.repeatedMessageField];
    } else {
      [_result.repeatedMessageField addObjectsFromArray:other.repeatedMessageField];
    }
  }
  if (other.repeatedStringPieceField.count > 0) {
    if (_result.repeatedStringPieceField == nil) {
      _result.repeatedStringPieceField = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceField];
    } else {
      [_result.repeatedStringPieceField addObjectsFromArray:other.repeatedStringPieceField];
    }
  }
  if (other.repeatedCordField.count > 0) {
    if (_result.repeatedCordField == nil) {
      _result.repeatedCordField = [[NSMutableArray alloc] initWithArray:other.repeatedCordField];
    } else {
      [_result.repeatedCordField addObjectsFromArray:other.repeatedCordField];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestCamelCaseFieldNames_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrimitiveField:[input readInt32]];
        break;
      }
      case 18: {
        [self setStringField:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue((ForeignEnum)value)) {
          [self setEnumField:(ForeignEnum)value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        if (self.hasMessageField) {
          [subBuilder mergeFrom:self.messageField];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageField:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setStringPieceField:[input readString]];
        break;
      }
      case 50: {
        [self setCordField:[input readString]];
        break;
      }
      case 56: {
        [self addRepeatedPrimitiveField:[input readInt32]];
        break;
      }
      case 66: {
        [self addRepeatedStringField:[input readString]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedEnumField:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 82: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessageField:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self addRepeatedStringPieceField:[input readString]];
        break;
      }
      case 98: {
        [self addRepeatedCordField:[input readString]];
        break;
      }
    }
  }
}

- (BOOL)hasPrimitiveField
{
  return _result.hasPrimitiveField;
}

- (int32_t)primitiveField
{
  return _result.primitiveField;
}

- (TestCamelCaseFieldNames_Builder*)setPrimitiveField:(int32_t)value
{
  _result.primitiveField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder*)clearPrimitiveField
{
  [_result clearPrimitiveField];
  return self;
}

- (BOOL)hasStringField
{
  return _result.hasStringField;
}

- (NSString *)stringField
{
  return _result.stringField;
}

- (TestCamelCaseFieldNames_Builder*)setStringField:(NSString *)value
{
  _result.stringField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder*)clearStringField
{
  [_result clearStringField];
  return self;
}

- (BOOL)hasEnumField
{
  return _result.hasEnumField;
}

- (ForeignEnum)enumField
{
  return _result.enumField;
}

- (TestCamelCaseFieldNames_Builder *)setEnumField:(ForeignEnum)value
{
  _result.enumField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearEnumField
{
  [_result clearEnumField];
  return self;
}

- (BOOL)hasMessageField
{
  return _result.hasMessageField;
}

- (ForeignMessage *)messageField
{
  return _result.messageField;
}

- (TestCamelCaseFieldNames_Builder *)setMessageField:(ForeignMessage *)value
{
  _result.messageField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setMessageFieldBuilder:(ForeignMessage_Builder *)builderForValue
{
  return [self setMessageField:[builderForValue build]];
}

- (TestCamelCaseFieldNames_Builder *)mergeMessageField:(ForeignMessage *)value
{
  if (_result.hasMessageField && _result.messageField != nil) {
    _result.messageField = [[[ForeignMessage builderWithPrototype:_result.messageField] mergeFrom:value] buildPartial];
  } else {
    _result.messageField = value;
  }
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearMessageField
{
  [_result clearMessageField];
  return self;
}

- (BOOL)hasStringPieceField
{
  return _result.hasStringPieceField;
}

- (NSString *)stringPieceField
{
  return _result.stringPieceField;
}

- (TestCamelCaseFieldNames_Builder*)setStringPieceField:(NSString *)value
{
  _result.stringPieceField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder*)clearStringPieceField
{
  [_result clearStringPieceField];
  return self;
}

- (BOOL)hasCordField
{
  return _result.hasCordField;
}

- (NSString *)cordField
{
  return _result.cordField;
}

- (TestCamelCaseFieldNames_Builder*)setCordField:(NSString *)value
{
  _result.cordField = value;
  return self;
}

- (TestCamelCaseFieldNames_Builder*)clearCordField
{
  [_result clearCordField];
  return self;
}

- (PBAppendableArray *)repeatedPrimitiveField
{
  return _result.repeatedPrimitiveField;
}

- (int32_t)repeatedPrimitiveFieldAtIndex:(NSUInteger)index
{
  return [_result repeatedPrimitiveFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedPrimitiveField:(int32_t)value
{
  [_result addRepeatedPrimitiveField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedPrimitiveFieldArray:(NSArray *)array
{
  [_result setRepeatedPrimitiveFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedPrimitiveFieldValues:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedPrimitiveFieldValues:values count:count];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedPrimitiveField
{
  [_result clearRepeatedPrimitiveField];
  return self;
}

- (NSMutableArray *)repeatedStringField
{
  return _result.repeatedStringField;
}

- (NSString *)repeatedStringFieldAtIndex:(NSUInteger)index
{
  return [_result repeatedStringFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedStringField:(NSString *)value
{
  [_result addRepeatedStringField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedStringFieldArray:(NSArray *)array
{
  [_result setRepeatedStringFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedStringField
{
  [_result clearRepeatedStringField];
  return self;
}

- (PBAppendableArray *)repeatedEnumField
{
  return _result.repeatedEnumField;
}

- (ForeignEnum)repeatedEnumFieldAtIndex:(NSUInteger)index{
  return [_result repeatedEnumFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedEnumField:(ForeignEnum)value
{
  [_result addRepeatedEnumField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedEnumFieldArray:(NSArray *)array
{
  [_result setRepeatedEnumFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedEnumFieldValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  [_result setRepeatedEnumFieldValues:values count:count];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedEnumField
{
  [_result clearRepeatedEnumField];
  return self;
}

- (NSMutableArray *)repeatedMessageField
{
  return _result.repeatedMessageField;
}

- (ForeignMessage *)repeatedMessageFieldAtIndex:(NSUInteger)index
{
  return [_result repeatedMessageFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedMessageField:(ForeignMessage *)value
{
  [_result addRepeatedMessageField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedMessageFieldArray:(NSArray *)array
{
  [_result setRepeatedMessageFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedMessageField
{
  [_result clearRepeatedMessageField];
  return self;
}

- (NSMutableArray *)repeatedStringPieceField
{
  return _result.repeatedStringPieceField;
}

- (NSString *)repeatedStringPieceFieldAtIndex:(NSUInteger)index
{
  return [_result repeatedStringPieceFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedStringPieceField:(NSString *)value
{
  [_result addRepeatedStringPieceField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedStringPieceFieldArray:(NSArray *)array
{
  [_result setRepeatedStringPieceFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedStringPieceField
{
  [_result clearRepeatedStringPieceField];
  return self;
}

- (NSMutableArray *)repeatedCordField
{
  return _result.repeatedCordField;
}

- (NSString *)repeatedCordFieldAtIndex:(NSUInteger)index
{
  return [_result repeatedCordFieldAtIndex:index];
}

- (TestCamelCaseFieldNames_Builder *)addRepeatedCordField:(NSString *)value
{
  [_result addRepeatedCordField:value];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)setRepeatedCordFieldArray:(NSArray *)array
{
  [_result setRepeatedCordFieldArray:array];
  return self;
}

- (TestCamelCaseFieldNames_Builder *)clearRepeatedCordField
{
  [_result clearRepeatedCordField];
  return self;
}

@end


@interface TestFieldOrderings ()


@end


@implementation TestFieldOrderings

- (BOOL)hasMyString
{
  return _hasMyString;
}

- (void)setMyString:(NSString *)value
{
  _hasMyString = value != nil;
  _myString = value;
}

- (void)clearMyString
{
  _hasMyString = NO;
  _myString = nil;
}

- (BOOL)hasMyInt
{
  return _hasMyInt;
}

- (void)setMyInt:(int64_t)value
{
  _hasMyInt = YES;
  _myInt = value;
}

- (void)clearMyInt
{
  _hasMyInt = NO;
  _myInt = 0L;
}

- (BOOL)hasMyFloat
{
  return _hasMyFloat;
}

- (void)setMyFloat:(Float32)value
{
  _hasMyFloat = YES;
  _myFloat = value;
}

- (void)clearMyFloat
{
  _hasMyFloat = NO;
  _myFloat = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _myString = nil;
    _myInt = 0L;
    _myFloat = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasMyInt) {
    [output writeInt64:1 value:self.myInt];
  }
  [self writeExtensionsToCodedOutputStream:output from:2 to:11];
  if (self.hasMyString) {
    [output writeString:11 value:self.myString];
  }
  [self writeExtensionsToCodedOutputStream:output from:12 to:101];
  if (self.hasMyFloat) {
    [output writeFloat:101 value:self.myFloat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasMyInt) {
    size_ += computeInt64Size(1, self.myInt);
  }
  if (self.hasMyString) {
    size_ += computeStringSize(11, self.myString);
  }
  if (self.hasMyFloat) {
    size_ += computeFloatSize(101, self.myFloat);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestFieldOrderings *)parseFromData:(NSData *)data
{
  return (TestFieldOrderings *)[[[TestFieldOrderings builder] mergeFromData:data] build];
}

+ (TestFieldOrderings *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestFieldOrderings *)parseFromInputStream:(NSInputStream *)input
{
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromInputStream:input] build];
}

+ (TestFieldOrderings *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestFieldOrderings *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestFieldOrderings builder] mergeFromCodedInputStream:input] build];
}

+ (TestFieldOrderings *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestFieldOrderings builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestFieldOrderings_Builder *)builder
{
  return [[TestFieldOrderings_Builder alloc] init];
}

+ (TestFieldOrderings_Builder *)builderWithPrototype:(TestFieldOrderings *)prototype
{
  return [[TestFieldOrderings builder] mergeFrom:prototype];
}

- (TestFieldOrderings_Builder *)builder
{
  return [TestFieldOrderings builder];
}

- (TestFieldOrderings_Builder *)toBuilder
{
  return [TestFieldOrderings builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasMyInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myInt", @(self.myInt)];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:2 to:11 withIndent:indent];
  if (self.hasMyString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myString", self.myString];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:12 to:101 withIndent:indent];
  if (self.hasMyFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myFloat", @(self.myFloat)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestFieldOrderings class]]) {
    return NO;
  }
  TestFieldOrderings *otherMessage = other;
  return
    (self.hasMyInt == otherMessage.hasMyInt && (!self.hasMyInt || self.myInt == otherMessage.myInt)) &&
    [self isEqualExtensionsInOther:otherMessage from:2 to:11] &&

    (self.hasMyString == otherMessage.hasMyString && (!self.hasMyString || [self.myString isEqual:otherMessage.myString])) &&
    [self isEqualExtensionsInOther:otherMessage from:12 to:101] &&

    (self.hasMyFloat == otherMessage.hasMyFloat && (!self.hasMyFloat || self.myFloat == otherMessage.myFloat)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasMyInt) {
    hashCode = hashCode * 31 + [@(self.myInt) hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:2 to:11];
  if (self.hasMyString) {
    hashCode = hashCode * 31 + [self.myString hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:12 to:101];
  if (self.hasMyFloat) {
    hashCode = hashCode * 31 + [@(self.myFloat) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestFieldOrderings_Builder()

@property (strong) TestFieldOrderings *result;

@end


@implementation TestFieldOrderings_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestFieldOrderings alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestFieldOrderings_Builder *)clear
{
  self.result = [[TestFieldOrderings alloc] init];
  return self;
}

- (TestFieldOrderings_Builder *)clone
{
  return [TestFieldOrderings builderWithPrototype:_result];
}

- (TestFieldOrderings *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestFieldOrderings *)buildPartial
{
  TestFieldOrderings *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestFieldOrderings_Builder *)mergeFrom:(TestFieldOrderings *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasMyString) {
    [self setMyString:other.myString];
  }
  if (other.hasMyInt) {
    [self setMyInt:other.myInt];
  }
  if (other.hasMyFloat) {
    [self setMyFloat:other.myFloat];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestFieldOrderings_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestFieldOrderings_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyInt:[input readInt64]];
        break;
      }
      case 90: {
        [self setMyString:[input readString]];
        break;
      }
      case 813: {
        [self setMyFloat:[input readFloat]];
        break;
      }
    }
  }
}

- (BOOL)hasMyString
{
  return _result.hasMyString;
}

- (NSString *)myString
{
  return _result.myString;
}

- (TestFieldOrderings_Builder*)setMyString:(NSString *)value
{
  _result.myString = value;
  return self;
}

- (TestFieldOrderings_Builder*)clearMyString
{
  [_result clearMyString];
  return self;
}

- (BOOL)hasMyInt
{
  return _result.hasMyInt;
}

- (int64_t)myInt
{
  return _result.myInt;
}

- (TestFieldOrderings_Builder*)setMyInt:(int64_t)value
{
  _result.myInt = value;
  return self;
}

- (TestFieldOrderings_Builder*)clearMyInt
{
  [_result clearMyInt];
  return self;
}

- (BOOL)hasMyFloat
{
  return _result.hasMyFloat;
}

- (Float32)myFloat
{
  return _result.myFloat;
}

- (TestFieldOrderings_Builder*)setMyFloat:(Float32)value
{
  _result.myFloat = value;
  return self;
}

- (TestFieldOrderings_Builder*)clearMyFloat
{
  [_result clearMyFloat];
  return self;
}

@end


@interface TestExtremeDefaultValues ()


@end


@implementation TestExtremeDefaultValues

- (BOOL)hasEscapedBytes
{
  return _hasEscapedBytes;
}

- (void)setEscapedBytes:(NSData *)value
{
  _hasEscapedBytes = value != nil;
  _escapedBytes = value;
}

- (void)clearEscapedBytes
{
  _hasEscapedBytes = NO;
  _escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
}

- (BOOL)hasLargeUint32
{
  return _hasLargeUint32;
}

- (void)setLargeUint32:(uint32_t)value
{
  _hasLargeUint32 = YES;
  _largeUint32 = value;
}

- (void)clearLargeUint32
{
  _hasLargeUint32 = NO;
  _largeUint32 = -1;
}

- (BOOL)hasLargeUint64
{
  return _hasLargeUint64;
}

- (void)setLargeUint64:(uint64_t)value
{
  _hasLargeUint64 = YES;
  _largeUint64 = value;
}

- (void)clearLargeUint64
{
  _hasLargeUint64 = NO;
  _largeUint64 = -1L;
}

- (BOOL)hasSmallInt32
{
  return _hasSmallInt32;
}

- (void)setSmallInt32:(int32_t)value
{
  _hasSmallInt32 = YES;
  _smallInt32 = value;
}

- (void)clearSmallInt32
{
  _hasSmallInt32 = NO;
  _smallInt32 = -2147483647;
}

- (BOOL)hasSmallInt64
{
  return _hasSmallInt64;
}

- (void)setSmallInt64:(int64_t)value
{
  _hasSmallInt64 = YES;
  _smallInt64 = value;
}

- (void)clearSmallInt64
{
  _hasSmallInt64 = NO;
  _smallInt64 = -9223372036854775807L;
}

- (BOOL)hasUtf8String
{
  return _hasUtf8String;
}

- (void)setUtf8String:(NSString *)value
{
  _hasUtf8String = value != nil;
  _utf8String = value;
}

- (void)clearUtf8String
{
  _hasUtf8String = NO;
  _utf8String = [NSString stringWithUTF8String:"\341\210\264"];
}

- (BOOL)hasZeroFloat
{
  return _hasZeroFloat;
}

- (void)setZeroFloat:(Float32)value
{
  _hasZeroFloat = YES;
  _zeroFloat = value;
}

- (void)clearZeroFloat
{
  _hasZeroFloat = NO;
  _zeroFloat = 0;
}

- (BOOL)hasOneFloat
{
  return _hasOneFloat;
}

- (void)setOneFloat:(Float32)value
{
  _hasOneFloat = YES;
  _oneFloat = value;
}

- (void)clearOneFloat
{
  _hasOneFloat = NO;
  _oneFloat = 1;
}

- (BOOL)hasSmallFloat
{
  return _hasSmallFloat;
}

- (void)setSmallFloat:(Float32)value
{
  _hasSmallFloat = YES;
  _smallFloat = value;
}

- (void)clearSmallFloat
{
  _hasSmallFloat = NO;
  _smallFloat = 1.5;
}

- (BOOL)hasNegativeOneFloat
{
  return _hasNegativeOneFloat;
}

- (void)setNegativeOneFloat:(Float32)value
{
  _hasNegativeOneFloat = YES;
  _negativeOneFloat = value;
}

- (void)clearNegativeOneFloat
{
  _hasNegativeOneFloat = NO;
  _negativeOneFloat = -1;
}

- (BOOL)hasNegativeFloat
{
  return _hasNegativeFloat;
}

- (void)setNegativeFloat:(Float32)value
{
  _hasNegativeFloat = YES;
  _negativeFloat = value;
}

- (void)clearNegativeFloat
{
  _hasNegativeFloat = NO;
  _negativeFloat = -1.5;
}

- (BOOL)hasLargeFloat
{
  return _hasLargeFloat;
}

- (void)setLargeFloat:(Float32)value
{
  _hasLargeFloat = YES;
  _largeFloat = value;
}

- (void)clearLargeFloat
{
  _hasLargeFloat = NO;
  _largeFloat = 2e+08;
}

- (BOOL)hasSmallNegativeFloat
{
  return _hasSmallNegativeFloat;
}

- (void)setSmallNegativeFloat:(Float32)value
{
  _hasSmallNegativeFloat = YES;
  _smallNegativeFloat = value;
}

- (void)clearSmallNegativeFloat
{
  _hasSmallNegativeFloat = NO;
  _smallNegativeFloat = -8e-28;
}

- (BOOL)hasInfDouble
{
  return _hasInfDouble;
}

- (void)setInfDouble:(Float64)value
{
  _hasInfDouble = YES;
  _infDouble = value;
}

- (void)clearInfDouble
{
  _hasInfDouble = NO;
  _infDouble = HUGE_VAL;
}

- (BOOL)hasNegInfDouble
{
  return _hasNegInfDouble;
}

- (void)setNegInfDouble:(Float64)value
{
  _hasNegInfDouble = YES;
  _negInfDouble = value;
}

- (void)clearNegInfDouble
{
  _hasNegInfDouble = NO;
  _negInfDouble = -HUGE_VAL;
}

- (BOOL)hasNanDouble
{
  return _hasNanDouble;
}

- (void)setNanDouble:(Float64)value
{
  _hasNanDouble = YES;
  _nanDouble = value;
}

- (void)clearNanDouble
{
  _hasNanDouble = NO;
  _nanDouble = NAN;
}

- (BOOL)hasInfFloat
{
  return _hasInfFloat;
}

- (void)setInfFloat:(Float32)value
{
  _hasInfFloat = YES;
  _infFloat = value;
}

- (void)clearInfFloat
{
  _hasInfFloat = NO;
  _infFloat = HUGE_VALF;
}

- (BOOL)hasNegInfFloat
{
  return _hasNegInfFloat;
}

- (void)setNegInfFloat:(Float32)value
{
  _hasNegInfFloat = YES;
  _negInfFloat = value;
}

- (void)clearNegInfFloat
{
  _hasNegInfFloat = NO;
  _negInfFloat = -HUGE_VALF;
}

- (BOOL)hasNanFloat
{
  return _hasNanFloat;
}

- (void)setNanFloat:(Float32)value
{
  _hasNanFloat = YES;
  _nanFloat = value;
}

- (void)clearNanFloat
{
  _hasNanFloat = NO;
  _nanFloat = NAN;
}

- (BOOL)hasCppTrigraph
{
  return _hasCppTrigraph;
}

- (void)setCppTrigraph:(NSString *)value
{
  _hasCppTrigraph = value != nil;
  _cppTrigraph = value;
}

- (void)clearCppTrigraph
{
  _hasCppTrigraph = NO;
  _cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
}

- (instancetype)init
{
  if ((self = [super init])) {
    _escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
    _largeUint32 = -1;
    _largeUint64 = -1L;
    _smallInt32 = -2147483647;
    _smallInt64 = -9223372036854775807L;
    _utf8String = [NSString stringWithUTF8String:"\341\210\264"];
    _zeroFloat = 0;
    _oneFloat = 1;
    _smallFloat = 1.5;
    _negativeOneFloat = -1;
    _negativeFloat = -1.5;
    _largeFloat = 2e+08;
    _smallNegativeFloat = -8e-28;
    _infDouble = HUGE_VAL;
    _negInfDouble = -HUGE_VAL;
    _nanDouble = NAN;
    _infFloat = HUGE_VALF;
    _negInfFloat = -HUGE_VALF;
    _nanFloat = NAN;
    _cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasEscapedBytes) {
    [output writeData:1 value:self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output writeUInt32:2 value:self.largeUint32];
  }
  if (self.hasLargeUint64) {
    [output writeUInt64:3 value:self.largeUint64];
  }
  if (self.hasSmallInt32) {
    [output writeInt32:4 value:self.smallInt32];
  }
  if (self.hasSmallInt64) {
    [output writeInt64:5 value:self.smallInt64];
  }
  if (self.hasUtf8String) {
    [output writeString:6 value:self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output writeFloat:7 value:self.zeroFloat];
  }
  if (self.hasOneFloat) {
    [output writeFloat:8 value:self.oneFloat];
  }
  if (self.hasSmallFloat) {
    [output writeFloat:9 value:self.smallFloat];
  }
  if (self.hasNegativeOneFloat) {
    [output writeFloat:10 value:self.negativeOneFloat];
  }
  if (self.hasNegativeFloat) {
    [output writeFloat:11 value:self.negativeFloat];
  }
  if (self.hasLargeFloat) {
    [output writeFloat:12 value:self.largeFloat];
  }
  if (self.hasSmallNegativeFloat) {
    [output writeFloat:13 value:self.smallNegativeFloat];
  }
  if (self.hasInfDouble) {
    [output writeDouble:14 value:self.infDouble];
  }
  if (self.hasNegInfDouble) {
    [output writeDouble:15 value:self.negInfDouble];
  }
  if (self.hasNanDouble) {
    [output writeDouble:16 value:self.nanDouble];
  }
  if (self.hasInfFloat) {
    [output writeFloat:17 value:self.infFloat];
  }
  if (self.hasNegInfFloat) {
    [output writeFloat:18 value:self.negInfFloat];
  }
  if (self.hasNanFloat) {
    [output writeFloat:19 value:self.nanFloat];
  }
  if (self.hasCppTrigraph) {
    [output writeString:20 value:self.cppTrigraph];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasEscapedBytes) {
    size_ += computeDataSize(1, self.escapedBytes);
  }
  if (self.hasLargeUint32) {
    size_ += computeUInt32Size(2, self.largeUint32);
  }
  if (self.hasLargeUint64) {
    size_ += computeUInt64Size(3, self.largeUint64);
  }
  if (self.hasSmallInt32) {
    size_ += computeInt32Size(4, self.smallInt32);
  }
  if (self.hasSmallInt64) {
    size_ += computeInt64Size(5, self.smallInt64);
  }
  if (self.hasUtf8String) {
    size_ += computeStringSize(6, self.utf8String);
  }
  if (self.hasZeroFloat) {
    size_ += computeFloatSize(7, self.zeroFloat);
  }
  if (self.hasOneFloat) {
    size_ += computeFloatSize(8, self.oneFloat);
  }
  if (self.hasSmallFloat) {
    size_ += computeFloatSize(9, self.smallFloat);
  }
  if (self.hasNegativeOneFloat) {
    size_ += computeFloatSize(10, self.negativeOneFloat);
  }
  if (self.hasNegativeFloat) {
    size_ += computeFloatSize(11, self.negativeFloat);
  }
  if (self.hasLargeFloat) {
    size_ += computeFloatSize(12, self.largeFloat);
  }
  if (self.hasSmallNegativeFloat) {
    size_ += computeFloatSize(13, self.smallNegativeFloat);
  }
  if (self.hasInfDouble) {
    size_ += computeDoubleSize(14, self.infDouble);
  }
  if (self.hasNegInfDouble) {
    size_ += computeDoubleSize(15, self.negInfDouble);
  }
  if (self.hasNanDouble) {
    size_ += computeDoubleSize(16, self.nanDouble);
  }
  if (self.hasInfFloat) {
    size_ += computeFloatSize(17, self.infFloat);
  }
  if (self.hasNegInfFloat) {
    size_ += computeFloatSize(18, self.negInfFloat);
  }
  if (self.hasNanFloat) {
    size_ += computeFloatSize(19, self.nanFloat);
  }
  if (self.hasCppTrigraph) {
    size_ += computeStringSize(20, self.cppTrigraph);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestExtremeDefaultValues *)parseFromData:(NSData *)data
{
  return (TestExtremeDefaultValues *)[[[TestExtremeDefaultValues builder] mergeFromData:data] build];
}

+ (TestExtremeDefaultValues *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestExtremeDefaultValues *)parseFromInputStream:(NSInputStream *)input
{
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromInputStream:input] build];
}

+ (TestExtremeDefaultValues *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestExtremeDefaultValues *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestExtremeDefaultValues builder] mergeFromCodedInputStream:input] build];
}

+ (TestExtremeDefaultValues *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestExtremeDefaultValues builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestExtremeDefaultValues_Builder *)builder
{
  return [[TestExtremeDefaultValues_Builder alloc] init];
}

+ (TestExtremeDefaultValues_Builder *)builderWithPrototype:(TestExtremeDefaultValues *)prototype
{
  return [[TestExtremeDefaultValues builder] mergeFrom:prototype];
}

- (TestExtremeDefaultValues_Builder *)builder
{
  return [TestExtremeDefaultValues builder];
}

- (TestExtremeDefaultValues_Builder *)toBuilder
{
  return [TestExtremeDefaultValues builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasEscapedBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"escapedBytes", self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint32", @(self.largeUint32)];
  }
  if (self.hasLargeUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint64", @(self.largeUint64)];
  }
  if (self.hasSmallInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt32", @(self.smallInt32)];
  }
  if (self.hasSmallInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt64", @(self.smallInt64)];
  }
  if (self.hasUtf8String) {
    [output appendFormat:@"%@%@: %@\n", indent, @"utf8String", self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zeroFloat", @(self.zeroFloat)];
  }
  if (self.hasOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneFloat", @(self.oneFloat)];
  }
  if (self.hasSmallFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallFloat", @(self.smallFloat)];
  }
  if (self.hasNegativeOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeOneFloat", @(self.negativeOneFloat)];
  }
  if (self.hasNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeFloat", @(self.negativeFloat)];
  }
  if (self.hasLargeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeFloat", @(self.largeFloat)];
  }
  if (self.hasSmallNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallNegativeFloat", @(self.smallNegativeFloat)];
  }
  if (self.hasInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infDouble", @(self.infDouble)];
  }
  if (self.hasNegInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfDouble", @(self.negInfDouble)];
  }
  if (self.hasNanDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanDouble", @(self.nanDouble)];
  }
  if (self.hasInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infFloat", @(self.infFloat)];
  }
  if (self.hasNegInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfFloat", @(self.negInfFloat)];
  }
  if (self.hasNanFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanFloat", @(self.nanFloat)];
  }
  if (self.hasCppTrigraph) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cppTrigraph", self.cppTrigraph];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestExtremeDefaultValues class]]) {
    return NO;
  }
  TestExtremeDefaultValues *otherMessage = other;
  return
    (self.hasEscapedBytes == otherMessage.hasEscapedBytes && (!self.hasEscapedBytes || [self.escapedBytes isEqual:otherMessage.escapedBytes])) &&
    (self.hasLargeUint32 == otherMessage.hasLargeUint32 && (!self.hasLargeUint32 || self.largeUint32 == otherMessage.largeUint32)) &&
    (self.hasLargeUint64 == otherMessage.hasLargeUint64 && (!self.hasLargeUint64 || self.largeUint64 == otherMessage.largeUint64)) &&
    (self.hasSmallInt32 == otherMessage.hasSmallInt32 && (!self.hasSmallInt32 || self.smallInt32 == otherMessage.smallInt32)) &&
    (self.hasSmallInt64 == otherMessage.hasSmallInt64 && (!self.hasSmallInt64 || self.smallInt64 == otherMessage.smallInt64)) &&
    (self.hasUtf8String == otherMessage.hasUtf8String && (!self.hasUtf8String || [self.utf8String isEqual:otherMessage.utf8String])) &&
    (self.hasZeroFloat == otherMessage.hasZeroFloat && (!self.hasZeroFloat || self.zeroFloat == otherMessage.zeroFloat)) &&
    (self.hasOneFloat == otherMessage.hasOneFloat && (!self.hasOneFloat || self.oneFloat == otherMessage.oneFloat)) &&
    (self.hasSmallFloat == otherMessage.hasSmallFloat && (!self.hasSmallFloat || self.smallFloat == otherMessage.smallFloat)) &&
    (self.hasNegativeOneFloat == otherMessage.hasNegativeOneFloat && (!self.hasNegativeOneFloat || self.negativeOneFloat == otherMessage.negativeOneFloat)) &&
    (self.hasNegativeFloat == otherMessage.hasNegativeFloat && (!self.hasNegativeFloat || self.negativeFloat == otherMessage.negativeFloat)) &&
    (self.hasLargeFloat == otherMessage.hasLargeFloat && (!self.hasLargeFloat || self.largeFloat == otherMessage.largeFloat)) &&
    (self.hasSmallNegativeFloat == otherMessage.hasSmallNegativeFloat && (!self.hasSmallNegativeFloat || self.smallNegativeFloat == otherMessage.smallNegativeFloat)) &&
    (self.hasInfDouble == otherMessage.hasInfDouble && (!self.hasInfDouble || self.infDouble == otherMessage.infDouble)) &&
    (self.hasNegInfDouble == otherMessage.hasNegInfDouble && (!self.hasNegInfDouble || self.negInfDouble == otherMessage.negInfDouble)) &&
    (self.hasNanDouble == otherMessage.hasNanDouble && (!self.hasNanDouble || self.nanDouble == otherMessage.nanDouble)) &&
    (self.hasInfFloat == otherMessage.hasInfFloat && (!self.hasInfFloat || self.infFloat == otherMessage.infFloat)) &&
    (self.hasNegInfFloat == otherMessage.hasNegInfFloat && (!self.hasNegInfFloat || self.negInfFloat == otherMessage.negInfFloat)) &&
    (self.hasNanFloat == otherMessage.hasNanFloat && (!self.hasNanFloat || self.nanFloat == otherMessage.nanFloat)) &&
    (self.hasCppTrigraph == otherMessage.hasCppTrigraph && (!self.hasCppTrigraph || [self.cppTrigraph isEqual:otherMessage.cppTrigraph])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasEscapedBytes) {
    hashCode = hashCode * 31 + [self.escapedBytes hash];
  }
  if (self.hasLargeUint32) {
    hashCode = hashCode * 31 + [@(self.largeUint32) hash];
  }
  if (self.hasLargeUint64) {
    hashCode = hashCode * 31 + [@(self.largeUint64) hash];
  }
  if (self.hasSmallInt32) {
    hashCode = hashCode * 31 + [@(self.smallInt32) hash];
  }
  if (self.hasSmallInt64) {
    hashCode = hashCode * 31 + [@(self.smallInt64) hash];
  }
  if (self.hasUtf8String) {
    hashCode = hashCode * 31 + [self.utf8String hash];
  }
  if (self.hasZeroFloat) {
    hashCode = hashCode * 31 + [@(self.zeroFloat) hash];
  }
  if (self.hasOneFloat) {
    hashCode = hashCode * 31 + [@(self.oneFloat) hash];
  }
  if (self.hasSmallFloat) {
    hashCode = hashCode * 31 + [@(self.smallFloat) hash];
  }
  if (self.hasNegativeOneFloat) {
    hashCode = hashCode * 31 + [@(self.negativeOneFloat) hash];
  }
  if (self.hasNegativeFloat) {
    hashCode = hashCode * 31 + [@(self.negativeFloat) hash];
  }
  if (self.hasLargeFloat) {
    hashCode = hashCode * 31 + [@(self.largeFloat) hash];
  }
  if (self.hasSmallNegativeFloat) {
    hashCode = hashCode * 31 + [@(self.smallNegativeFloat) hash];
  }
  if (self.hasInfDouble) {
    hashCode = hashCode * 31 + [@(self.infDouble) hash];
  }
  if (self.hasNegInfDouble) {
    hashCode = hashCode * 31 + [@(self.negInfDouble) hash];
  }
  if (self.hasNanDouble) {
    hashCode = hashCode * 31 + [@(self.nanDouble) hash];
  }
  if (self.hasInfFloat) {
    hashCode = hashCode * 31 + [@(self.infFloat) hash];
  }
  if (self.hasNegInfFloat) {
    hashCode = hashCode * 31 + [@(self.negInfFloat) hash];
  }
  if (self.hasNanFloat) {
    hashCode = hashCode * 31 + [@(self.nanFloat) hash];
  }
  if (self.hasCppTrigraph) {
    hashCode = hashCode * 31 + [self.cppTrigraph hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestExtremeDefaultValues_Builder()

@property (strong) TestExtremeDefaultValues *result;

@end


@implementation TestExtremeDefaultValues_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestExtremeDefaultValues alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestExtremeDefaultValues_Builder *)clear
{
  self.result = [[TestExtremeDefaultValues alloc] init];
  return self;
}

- (TestExtremeDefaultValues_Builder *)clone
{
  return [TestExtremeDefaultValues builderWithPrototype:_result];
}

- (TestExtremeDefaultValues *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestExtremeDefaultValues *)buildPartial
{
  TestExtremeDefaultValues *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestExtremeDefaultValues_Builder *)mergeFrom:(TestExtremeDefaultValues *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasEscapedBytes) {
    [self setEscapedBytes:other.escapedBytes];
  }
  if (other.hasLargeUint32) {
    [self setLargeUint32:other.largeUint32];
  }
  if (other.hasLargeUint64) {
    [self setLargeUint64:other.largeUint64];
  }
  if (other.hasSmallInt32) {
    [self setSmallInt32:other.smallInt32];
  }
  if (other.hasSmallInt64) {
    [self setSmallInt64:other.smallInt64];
  }
  if (other.hasUtf8String) {
    [self setUtf8String:other.utf8String];
  }
  if (other.hasZeroFloat) {
    [self setZeroFloat:other.zeroFloat];
  }
  if (other.hasOneFloat) {
    [self setOneFloat:other.oneFloat];
  }
  if (other.hasSmallFloat) {
    [self setSmallFloat:other.smallFloat];
  }
  if (other.hasNegativeOneFloat) {
    [self setNegativeOneFloat:other.negativeOneFloat];
  }
  if (other.hasNegativeFloat) {
    [self setNegativeFloat:other.negativeFloat];
  }
  if (other.hasLargeFloat) {
    [self setLargeFloat:other.largeFloat];
  }
  if (other.hasSmallNegativeFloat) {
    [self setSmallNegativeFloat:other.smallNegativeFloat];
  }
  if (other.hasInfDouble) {
    [self setInfDouble:other.infDouble];
  }
  if (other.hasNegInfDouble) {
    [self setNegInfDouble:other.negInfDouble];
  }
  if (other.hasNanDouble) {
    [self setNanDouble:other.nanDouble];
  }
  if (other.hasInfFloat) {
    [self setInfFloat:other.infFloat];
  }
  if (other.hasNegInfFloat) {
    [self setNegInfFloat:other.negInfFloat];
  }
  if (other.hasNanFloat) {
    [self setNanFloat:other.nanFloat];
  }
  if (other.hasCppTrigraph) {
    [self setCppTrigraph:other.cppTrigraph];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestExtremeDefaultValues_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestExtremeDefaultValues_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEscapedBytes:[input readData]];
        break;
      }
      case 16: {
        [self setLargeUint32:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLargeUint64:[input readUInt64]];
        break;
      }
      case 32: {
        [self setSmallInt32:[input readInt32]];
        break;
      }
      case 40: {
        [self setSmallInt64:[input readInt64]];
        break;
      }
      case 50: {
        [self setUtf8String:[input readString]];
        break;
      }
      case 61: {
        [self setZeroFloat:[input readFloat]];
        break;
      }
      case 69: {
        [self setOneFloat:[input readFloat]];
        break;
      }
      case 77: {
        [self setSmallFloat:[input readFloat]];
        break;
      }
      case 85: {
        [self setNegativeOneFloat:[input readFloat]];
        break;
      }
      case 93: {
        [self setNegativeFloat:[input readFloat]];
        break;
      }
      case 101: {
        [self setLargeFloat:[input readFloat]];
        break;
      }
      case 109: {
        [self setSmallNegativeFloat:[input readFloat]];
        break;
      }
      case 113: {
        [self setInfDouble:[input readDouble]];
        break;
      }
      case 121: {
        [self setNegInfDouble:[input readDouble]];
        break;
      }
      case 129: {
        [self setNanDouble:[input readDouble]];
        break;
      }
      case 141: {
        [self setInfFloat:[input readFloat]];
        break;
      }
      case 149: {
        [self setNegInfFloat:[input readFloat]];
        break;
      }
      case 157: {
        [self setNanFloat:[input readFloat]];
        break;
      }
      case 162: {
        [self setCppTrigraph:[input readString]];
        break;
      }
    }
  }
}

- (BOOL)hasEscapedBytes
{
  return _result.hasEscapedBytes;
}

- (NSData *)escapedBytes
{
  return _result.escapedBytes;
}

- (TestExtremeDefaultValues_Builder*)setEscapedBytes:(NSData *)value
{
  _result.escapedBytes = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearEscapedBytes
{
  [_result clearEscapedBytes];
  return self;
}

- (BOOL)hasLargeUint32
{
  return _result.hasLargeUint32;
}

- (uint32_t)largeUint32
{
  return _result.largeUint32;
}

- (TestExtremeDefaultValues_Builder*)setLargeUint32:(uint32_t)value
{
  _result.largeUint32 = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearLargeUint32
{
  [_result clearLargeUint32];
  return self;
}

- (BOOL)hasLargeUint64
{
  return _result.hasLargeUint64;
}

- (uint64_t)largeUint64
{
  return _result.largeUint64;
}

- (TestExtremeDefaultValues_Builder*)setLargeUint64:(uint64_t)value
{
  _result.largeUint64 = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearLargeUint64
{
  [_result clearLargeUint64];
  return self;
}

- (BOOL)hasSmallInt32
{
  return _result.hasSmallInt32;
}

- (int32_t)smallInt32
{
  return _result.smallInt32;
}

- (TestExtremeDefaultValues_Builder*)setSmallInt32:(int32_t)value
{
  _result.smallInt32 = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearSmallInt32
{
  [_result clearSmallInt32];
  return self;
}

- (BOOL)hasSmallInt64
{
  return _result.hasSmallInt64;
}

- (int64_t)smallInt64
{
  return _result.smallInt64;
}

- (TestExtremeDefaultValues_Builder*)setSmallInt64:(int64_t)value
{
  _result.smallInt64 = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearSmallInt64
{
  [_result clearSmallInt64];
  return self;
}

- (BOOL)hasUtf8String
{
  return _result.hasUtf8String;
}

- (NSString *)utf8String
{
  return _result.utf8String;
}

- (TestExtremeDefaultValues_Builder*)setUtf8String:(NSString *)value
{
  _result.utf8String = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearUtf8String
{
  [_result clearUtf8String];
  return self;
}

- (BOOL)hasZeroFloat
{
  return _result.hasZeroFloat;
}

- (Float32)zeroFloat
{
  return _result.zeroFloat;
}

- (TestExtremeDefaultValues_Builder*)setZeroFloat:(Float32)value
{
  _result.zeroFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearZeroFloat
{
  [_result clearZeroFloat];
  return self;
}

- (BOOL)hasOneFloat
{
  return _result.hasOneFloat;
}

- (Float32)oneFloat
{
  return _result.oneFloat;
}

- (TestExtremeDefaultValues_Builder*)setOneFloat:(Float32)value
{
  _result.oneFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearOneFloat
{
  [_result clearOneFloat];
  return self;
}

- (BOOL)hasSmallFloat
{
  return _result.hasSmallFloat;
}

- (Float32)smallFloat
{
  return _result.smallFloat;
}

- (TestExtremeDefaultValues_Builder*)setSmallFloat:(Float32)value
{
  _result.smallFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearSmallFloat
{
  [_result clearSmallFloat];
  return self;
}

- (BOOL)hasNegativeOneFloat
{
  return _result.hasNegativeOneFloat;
}

- (Float32)negativeOneFloat
{
  return _result.negativeOneFloat;
}

- (TestExtremeDefaultValues_Builder*)setNegativeOneFloat:(Float32)value
{
  _result.negativeOneFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNegativeOneFloat
{
  [_result clearNegativeOneFloat];
  return self;
}

- (BOOL)hasNegativeFloat
{
  return _result.hasNegativeFloat;
}

- (Float32)negativeFloat
{
  return _result.negativeFloat;
}

- (TestExtremeDefaultValues_Builder*)setNegativeFloat:(Float32)value
{
  _result.negativeFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNegativeFloat
{
  [_result clearNegativeFloat];
  return self;
}

- (BOOL)hasLargeFloat
{
  return _result.hasLargeFloat;
}

- (Float32)largeFloat
{
  return _result.largeFloat;
}

- (TestExtremeDefaultValues_Builder*)setLargeFloat:(Float32)value
{
  _result.largeFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearLargeFloat
{
  [_result clearLargeFloat];
  return self;
}

- (BOOL)hasSmallNegativeFloat
{
  return _result.hasSmallNegativeFloat;
}

- (Float32)smallNegativeFloat
{
  return _result.smallNegativeFloat;
}

- (TestExtremeDefaultValues_Builder*)setSmallNegativeFloat:(Float32)value
{
  _result.smallNegativeFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearSmallNegativeFloat
{
  [_result clearSmallNegativeFloat];
  return self;
}

- (BOOL)hasInfDouble
{
  return _result.hasInfDouble;
}

- (Float64)infDouble
{
  return _result.infDouble;
}

- (TestExtremeDefaultValues_Builder*)setInfDouble:(Float64)value
{
  _result.infDouble = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearInfDouble
{
  [_result clearInfDouble];
  return self;
}

- (BOOL)hasNegInfDouble
{
  return _result.hasNegInfDouble;
}

- (Float64)negInfDouble
{
  return _result.negInfDouble;
}

- (TestExtremeDefaultValues_Builder*)setNegInfDouble:(Float64)value
{
  _result.negInfDouble = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNegInfDouble
{
  [_result clearNegInfDouble];
  return self;
}

- (BOOL)hasNanDouble
{
  return _result.hasNanDouble;
}

- (Float64)nanDouble
{
  return _result.nanDouble;
}

- (TestExtremeDefaultValues_Builder*)setNanDouble:(Float64)value
{
  _result.nanDouble = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNanDouble
{
  [_result clearNanDouble];
  return self;
}

- (BOOL)hasInfFloat
{
  return _result.hasInfFloat;
}

- (Float32)infFloat
{
  return _result.infFloat;
}

- (TestExtremeDefaultValues_Builder*)setInfFloat:(Float32)value
{
  _result.infFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearInfFloat
{
  [_result clearInfFloat];
  return self;
}

- (BOOL)hasNegInfFloat
{
  return _result.hasNegInfFloat;
}

- (Float32)negInfFloat
{
  return _result.negInfFloat;
}

- (TestExtremeDefaultValues_Builder*)setNegInfFloat:(Float32)value
{
  _result.negInfFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNegInfFloat
{
  [_result clearNegInfFloat];
  return self;
}

- (BOOL)hasNanFloat
{
  return _result.hasNanFloat;
}

- (Float32)nanFloat
{
  return _result.nanFloat;
}

- (TestExtremeDefaultValues_Builder*)setNanFloat:(Float32)value
{
  _result.nanFloat = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearNanFloat
{
  [_result clearNanFloat];
  return self;
}

- (BOOL)hasCppTrigraph
{
  return _result.hasCppTrigraph;
}

- (NSString *)cppTrigraph
{
  return _result.cppTrigraph;
}

- (TestExtremeDefaultValues_Builder*)setCppTrigraph:(NSString *)value
{
  _result.cppTrigraph = value;
  return self;
}

- (TestExtremeDefaultValues_Builder*)clearCppTrigraph
{
  [_result clearCppTrigraph];
  return self;
}

@end


@interface SparseEnumMessage ()


@end


@implementation SparseEnumMessage

- (BOOL)hasSparseEnum
{
  return _hasSparseEnum;
}

- (void)setSparseEnum:(TestSparseEnum)value
{
  _hasSparseEnum = YES;
  _sparseEnum = value;
}

- (void)clearSparseEnum
{
  _hasSparseEnum = NO;
  _sparseEnum = TestSparseEnumSparseA;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _sparseEnum = TestSparseEnumSparseA;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasSparseEnum) {
    [output writeEnum:1 value:self.sparseEnum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasSparseEnum) {
    size_ += computeEnumSize(1, self.sparseEnum);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (SparseEnumMessage *)parseFromData:(NSData *)data
{
  return (SparseEnumMessage *)[[[SparseEnumMessage builder] mergeFromData:data] build];
}

+ (SparseEnumMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (SparseEnumMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromInputStream:input] build];
}

+ (SparseEnumMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (SparseEnumMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[SparseEnumMessage builder] mergeFromCodedInputStream:input] build];
}

+ (SparseEnumMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[SparseEnumMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (SparseEnumMessage_Builder *)builder
{
  return [[SparseEnumMessage_Builder alloc] init];
}

+ (SparseEnumMessage_Builder *)builderWithPrototype:(SparseEnumMessage *)prototype
{
  return [[SparseEnumMessage builder] mergeFrom:prototype];
}

- (SparseEnumMessage_Builder *)builder
{
  return [SparseEnumMessage builder];
}

- (SparseEnumMessage_Builder *)toBuilder
{
  return [SparseEnumMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasSparseEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sparseEnum", TestSparseEnumToString((TestSparseEnum)self.sparseEnum)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SparseEnumMessage class]]) {
    return NO;
  }
  SparseEnumMessage *otherMessage = other;
  return
    (self.hasSparseEnum == otherMessage.hasSparseEnum && (!self.hasSparseEnum || self.sparseEnum == otherMessage.sparseEnum)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasSparseEnum) {
    hashCode = hashCode * 31 + self.sparseEnum;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface SparseEnumMessage_Builder()

@property (strong) SparseEnumMessage *result;

@end


@implementation SparseEnumMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[SparseEnumMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (SparseEnumMessage_Builder *)clear
{
  self.result = [[SparseEnumMessage alloc] init];
  return self;
}

- (SparseEnumMessage_Builder *)clone
{
  return [SparseEnumMessage builderWithPrototype:_result];
}

- (SparseEnumMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (SparseEnumMessage *)buildPartial
{
  SparseEnumMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (SparseEnumMessage_Builder *)mergeFrom:(SparseEnumMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasSparseEnum) {
    [self setSparseEnum:other.sparseEnum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (SparseEnumMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (SparseEnumMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (TestSparseEnumIsValidValue((TestSparseEnum)value)) {
          [self setSparseEnum:(TestSparseEnum)value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}

- (BOOL)hasSparseEnum
{
  return _result.hasSparseEnum;
}

- (TestSparseEnum)sparseEnum
{
  return _result.sparseEnum;
}

- (SparseEnumMessage_Builder *)setSparseEnum:(TestSparseEnum)value
{
  _result.sparseEnum = value;
  return self;
}

- (SparseEnumMessage_Builder *)clearSparseEnum
{
  [_result clearSparseEnum];
  return self;
}

@end


@interface OneString ()


@end


@implementation OneString

- (BOOL)hasData
{
  return _hasData;
}

- (void)setData:(NSString *)value
{
  _hasData = value != nil;
  _data = value;
}

- (void)clearData
{
  _hasData = NO;
  _data = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _data = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasData) {
    [output writeString:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasData) {
    size_ += computeStringSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (OneString *)parseFromData:(NSData *)data
{
  return (OneString *)[[[OneString builder] mergeFromData:data] build];
}

+ (OneString *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OneString*)[[[OneString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (OneString *)parseFromInputStream:(NSInputStream *)input
{
  return (OneString*)[[[OneString builder] mergeFromInputStream:input] build];
}

+ (OneString *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OneString*)[[[OneString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OneString *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[OneString builder] mergeFromCodedInputStream:input] build];
}

+ (OneString *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[OneString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OneString_Builder *)builder
{
  return [[OneString_Builder alloc] init];
}

+ (OneString_Builder *)builderWithPrototype:(OneString *)prototype
{
  return [[OneString builder] mergeFrom:prototype];
}

- (OneString_Builder *)builder
{
  return [OneString builder];
}

- (OneString_Builder *)toBuilder
{
  return [OneString builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneString class]]) {
    return NO;
  }
  OneString *otherMessage = other;
  return
    (self.hasData == otherMessage.hasData && (!self.hasData || [self.data isEqual:otherMessage.data])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface OneString_Builder()

@property (strong) OneString *result;

@end


@implementation OneString_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[OneString alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (OneString_Builder *)clear
{
  self.result = [[OneString alloc] init];
  return self;
}

- (OneString_Builder *)clone
{
  return [OneString builderWithPrototype:_result];
}

- (OneString *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (OneString *)buildPartial
{
  OneString *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (OneString_Builder *)mergeFrom:(OneString *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (OneString_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (OneString_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}

- (BOOL)hasData
{
  return _result.hasData;
}

- (NSString *)data
{
  return _result.data;
}

- (OneString_Builder*)setData:(NSString *)value
{
  _result.data = value;
  return self;
}

- (OneString_Builder*)clearData
{
  [_result clearData];
  return self;
}

@end


@interface OneBytes ()


@end


@implementation OneBytes

- (BOOL)hasData
{
  return _hasData;
}

- (void)setData:(NSData *)value
{
  _hasData = value != nil;
  _data = value;
}

- (void)clearData
{
  _hasData = NO;
  _data = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _data = nil;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasData) {
    [output writeData:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasData) {
    size_ += computeDataSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (OneBytes *)parseFromData:(NSData *)data
{
  return (OneBytes *)[[[OneBytes builder] mergeFromData:data] build];
}

+ (OneBytes *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OneBytes*)[[[OneBytes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (OneBytes *)parseFromInputStream:(NSInputStream *)input
{
  return (OneBytes*)[[[OneBytes builder] mergeFromInputStream:input] build];
}

+ (OneBytes *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OneBytes*)[[[OneBytes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OneBytes *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[OneBytes builder] mergeFromCodedInputStream:input] build];
}

+ (OneBytes *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[OneBytes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OneBytes_Builder *)builder
{
  return [[OneBytes_Builder alloc] init];
}

+ (OneBytes_Builder *)builderWithPrototype:(OneBytes *)prototype
{
  return [[OneBytes builder] mergeFrom:prototype];
}

- (OneBytes_Builder *)builder
{
  return [OneBytes builder];
}

- (OneBytes_Builder *)toBuilder
{
  return [OneBytes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneBytes class]]) {
    return NO;
  }
  OneBytes *otherMessage = other;
  return
    (self.hasData == otherMessage.hasData && (!self.hasData || [self.data isEqual:otherMessage.data])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface OneBytes_Builder()

@property (strong) OneBytes *result;

@end


@implementation OneBytes_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[OneBytes alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (OneBytes_Builder *)clear
{
  self.result = [[OneBytes alloc] init];
  return self;
}

- (OneBytes_Builder *)clone
{
  return [OneBytes builderWithPrototype:_result];
}

- (OneBytes *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (OneBytes *)buildPartial
{
  OneBytes *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (OneBytes_Builder *)mergeFrom:(OneBytes *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (OneBytes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (OneBytes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readData]];
        break;
      }
    }
  }
}

- (BOOL)hasData
{
  return _result.hasData;
}

- (NSData *)data
{
  return _result.data;
}

- (OneBytes_Builder*)setData:(NSData *)value
{
  _result.data = value;
  return self;
}

- (OneBytes_Builder*)clearData
{
  [_result clearData];
  return self;
}

@end


@interface TestPackedTypes ()


@end


@implementation TestPackedTypes

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (int32_t)packedInt32AtIndex:(NSUInteger)index
{
  return [_packedInt32 int32AtIndex:index];
}
- (void)addPackedInt32:(int32_t)value
{
  if (_packedInt32 == nil) {
    _packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedInt32 addInt32:value];
}

- (void)addPackedInt32Array:(NSArray *)array
{
  if (_packedInt32 == nil) {
    _packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedInt32Array:(NSArray *)array
{
  _packedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedInt32
{
  _packedInt32 = nil;
}

- (int64_t)packedInt64AtIndex:(NSUInteger)index
{
  return [_packedInt64 int64AtIndex:index];
}
- (void)addPackedInt64:(int64_t)value
{
  if (_packedInt64 == nil) {
    _packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedInt64 addInt64:value];
}

- (void)addPackedInt64Array:(NSArray *)array
{
  if (_packedInt64 == nil) {
    _packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedInt64Array:(NSArray *)array
{
  _packedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedInt64
{
  _packedInt64 = nil;
}

- (uint32_t)packedUint32AtIndex:(NSUInteger)index
{
  return [_packedUint32 uint32AtIndex:index];
}
- (void)addPackedUint32:(uint32_t)value
{
  if (_packedUint32 == nil) {
    _packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedUint32 addUint32:value];
}

- (void)addPackedUint32Array:(NSArray *)array
{
  if (_packedUint32 == nil) {
    _packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedUint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setPackedUint32Array:(NSArray *)array
{
  _packedUint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setPackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _packedUint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearPackedUint32
{
  _packedUint32 = nil;
}

- (uint64_t)packedUint64AtIndex:(NSUInteger)index
{
  return [_packedUint64 uint64AtIndex:index];
}
- (void)addPackedUint64:(uint64_t)value
{
  if (_packedUint64 == nil) {
    _packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedUint64 addUint64:value];
}

- (void)addPackedUint64Array:(NSArray *)array
{
  if (_packedUint64 == nil) {
    _packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setPackedUint64Array:(NSArray *)array
{
  _packedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setPackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _packedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearPackedUint64
{
  _packedUint64 = nil;
}

- (int32_t)packedSint32AtIndex:(NSUInteger)index
{
  return [_packedSint32 int32AtIndex:index];
}
- (void)addPackedSint32:(int32_t)value
{
  if (_packedSint32 == nil) {
    _packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSint32 addInt32:value];
}

- (void)addPackedSint32Array:(NSArray *)array
{
  if (_packedSint32 == nil) {
    _packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedSint32Array:(NSArray *)array
{
  _packedSint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedSint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedSint32
{
  _packedSint32 = nil;
}

- (int64_t)packedSint64AtIndex:(NSUInteger)index
{
  return [_packedSint64 int64AtIndex:index];
}
- (void)addPackedSint64:(int64_t)value
{
  if (_packedSint64 == nil) {
    _packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSint64 addInt64:value];
}

- (void)addPackedSint64Array:(NSArray *)array
{
  if (_packedSint64 == nil) {
    _packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedSint64Array:(NSArray *)array
{
  _packedSint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedSint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedSint64
{
  _packedSint64 = nil;
}

- (uint32_t)packedFixed32AtIndex:(NSUInteger)index
{
  return [_packedFixed32 uint32AtIndex:index];
}
- (void)addPackedFixed32:(uint32_t)value
{
  if (_packedFixed32 == nil) {
    _packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedFixed32 addUint32:value];
}

- (void)addPackedFixed32Array:(NSArray *)array
{
  if (_packedFixed32 == nil) {
    _packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setPackedFixed32Array:(NSArray *)array
{
  _packedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setPackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _packedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearPackedFixed32
{
  _packedFixed32 = nil;
}

- (uint64_t)packedFixed64AtIndex:(NSUInteger)index
{
  return [_packedFixed64 uint64AtIndex:index];
}
- (void)addPackedFixed64:(uint64_t)value
{
  if (_packedFixed64 == nil) {
    _packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedFixed64 addUint64:value];
}

- (void)addPackedFixed64Array:(NSArray *)array
{
  if (_packedFixed64 == nil) {
    _packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setPackedFixed64Array:(NSArray *)array
{
  _packedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setPackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _packedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearPackedFixed64
{
  _packedFixed64 = nil;
}

- (int32_t)packedSfixed32AtIndex:(NSUInteger)index
{
  return [_packedSfixed32 int32AtIndex:index];
}
- (void)addPackedSfixed32:(int32_t)value
{
  if (_packedSfixed32 == nil) {
    _packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSfixed32 addInt32:value];
}

- (void)addPackedSfixed32Array:(NSArray *)array
{
  if (_packedSfixed32 == nil) {
    _packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSfixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedSfixed32Array:(NSArray *)array
{
  _packedSfixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedSfixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedSfixed32
{
  _packedSfixed32 = nil;
}

- (int64_t)packedSfixed64AtIndex:(NSUInteger)index
{
  return [_packedSfixed64 int64AtIndex:index];
}
- (void)addPackedSfixed64:(int64_t)value
{
  if (_packedSfixed64 == nil) {
    _packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSfixed64 addInt64:value];
}

- (void)addPackedSfixed64Array:(NSArray *)array
{
  if (_packedSfixed64 == nil) {
    _packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSfixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedSfixed64Array:(NSArray *)array
{
  _packedSfixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedSfixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedSfixed64
{
  _packedSfixed64 = nil;
}

- (Float32)packedFloatAtIndex:(NSUInteger)index
{
  return [_packedFloat floatAtIndex:index];
}
- (void)addPackedFloat:(Float32)value
{
  if (_packedFloat == nil) {
    _packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_packedFloat addFloat:value];
}

- (void)addPackedFloatArray:(NSArray *)array
{
  if (_packedFloat == nil) {
    _packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_packedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setPackedFloatArray:(NSArray *)array
{
  _packedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _packedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearPackedFloat
{
  _packedFloat = nil;
}

- (Float64)packedDoubleAtIndex:(NSUInteger)index
{
  return [_packedDouble doubleAtIndex:index];
}
- (void)addPackedDouble:(Float64)value
{
  if (_packedDouble == nil) {
    _packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_packedDouble addDouble:value];
}

- (void)addPackedDoubleArray:(NSArray *)array
{
  if (_packedDouble == nil) {
    _packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_packedDouble appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble]];
}

- (void)setPackedDoubleArray:(NSArray *)array
{
  _packedDouble = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
}

- (void)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  _packedDouble = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
}

- (void)clearPackedDouble
{
  _packedDouble = nil;
}

- (BOOL)packedBoolAtIndex:(NSUInteger)index
{
  return [_packedBool boolAtIndex:index];
}
- (void)addPackedBool:(BOOL)value
{
  if (_packedBool == nil) {
    _packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_packedBool addBool:value];
}

- (void)addPackedBoolArray:(NSArray *)array
{
  if (_packedBool == nil) {
    _packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_packedBool appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool]];
}

- (void)setPackedBoolArray:(NSArray *)array
{
  _packedBool = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
}

- (void)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  _packedBool = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
}

- (void)clearPackedBool
{
  _packedBool = nil;
}

- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index
{
  return (ForeignEnum)[_packedEnum int32AtIndex:index];
}

- (void)addPackedEnum:(ForeignEnum)value
{
  if (_packedEnum == nil) {
    _packedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedEnum addInt32:value];
}

- (void)addPackedEnumArray:(NSArray *)array
{
  if (_packedEnum == nil) {
    _packedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedEnumArray:(NSArray *)array
{
  _packedEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  _packedEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedEnum
{
  _packedEnum = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  const NSUInteger packedInt32Count = self.packedInt32.count;
  if (packedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedInt32.data;
    [output writeRawVarint32:722];
    [output writeRawVarint32:_packedInt32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt32Count; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedInt64Count = self.packedInt64.count;
  if (packedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedInt64.data;
    [output writeRawVarint32:730];
    [output writeRawVarint32:_packedInt64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt64Count; ++i) {
      [output writeInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedUint32Count = self.packedUint32.count;
  if (packedUint32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.packedUint32.data;
    [output writeRawVarint32:738];
    [output writeRawVarint32:_packedUint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint32Count; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedUint64Count = self.packedUint64.count;
  if (packedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.packedUint64.data;
    [output writeRawVarint32:746];
    [output writeRawVarint32:_packedUint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint64Count; ++i) {
      [output writeUInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedSint32Count = self.packedSint32.count;
  if (packedSint32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedSint32.data;
    [output writeRawVarint32:754];
    [output writeRawVarint32:_packedSint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint32Count; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedSint64Count = self.packedSint64.count;
  if (packedSint64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedSint64.data;
    [output writeRawVarint32:762];
    [output writeRawVarint32:_packedSint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint64Count; ++i) {
      [output writeSInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed32Count = self.packedFixed32.count;
  if (packedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.packedFixed32.data;
    [output writeRawVarint32:770];
    [output writeRawVarint32:_packedFixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed32Count; ++i) {
      [output writeFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed64Count = self.packedFixed64.count;
  if (packedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.packedFixed64.data;
    [output writeRawVarint32:778];
    [output writeRawVarint32:_packedFixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed64Count; ++i) {
      [output writeFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed32Count = self.packedSfixed32.count;
  if (packedSfixed32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedSfixed32.data;
    [output writeRawVarint32:786];
    [output writeRawVarint32:_packedSfixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed32Count; ++i) {
      [output writeSFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed64Count = self.packedSfixed64.count;
  if (packedSfixed64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedSfixed64.data;
    [output writeRawVarint32:794];
    [output writeRawVarint32:_packedSfixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed64Count; ++i) {
      [output writeSFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedFloatCount = self.packedFloat.count;
  if (packedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.packedFloat.data;
    [output writeRawVarint32:802];
    [output writeRawVarint32:_packedFloatMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFloatCount; ++i) {
      [output writeFloatNoTag:values[i]];
    }
  }
  const NSUInteger packedDoubleCount = self.packedDouble.count;
  if (packedDoubleCount > 0) {
    const Float64 *values = (const Float64 *)self.packedDouble.data;
    [output writeRawVarint32:810];
    [output writeRawVarint32:_packedDoubleMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedDoubleCount; ++i) {
      [output writeDoubleNoTag:values[i]];
    }
  }
  const NSUInteger packedBoolCount = self.packedBool.count;
  if (packedBoolCount > 0) {
    const BOOL *values = (const BOOL *)self.packedBool.data;
    [output writeRawVarint32:818];
    [output writeRawVarint32:_packedBoolMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedBoolCount; ++i) {
      [output writeBoolNoTag:values[i]];
    }
  }
  const NSUInteger packedEnumCount = self.packedEnum.count;
  const ForeignEnum *packedEnumValues = (const ForeignEnum *)self.packedEnum.data;
  if (packedEnumCount > 0) {
    [output writeRawVarint32:826];
    [output writeRawVarint32:_packedEnumMemoizedSerializedSize];
  }
  for (NSUInteger i = 0; i < packedEnumCount; ++i) {
    [output writeEnumNoTag:packedEnumValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedInt32.count;
    const int32_t *values = (const int32_t *)self.packedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedInt64.count;
    const int64_t *values = (const int64_t *)self.packedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedUint32.count;
    const uint32_t *values = (const uint32_t *)self.packedUint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedUint64.count;
    const uint64_t *values = (const uint64_t *)self.packedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSint32.count;
    const int32_t *values = (const int32_t *)self.packedSint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSint64.count;
    const int64_t *values = (const int64_t *)self.packedSint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSfixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSfixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFloatMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedDouble.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedDoubleMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedBool.count;
    dataSize = 1 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedBoolMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedEnum.count;
    const ForeignEnum *values = (const ForeignEnum *)self.packedEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeRawVarint32Size(dataSize);
    }
    _packedEnumMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestPackedTypes *)parseFromData:(NSData *)data
{
  return (TestPackedTypes *)[[[TestPackedTypes builder] mergeFromData:data] build];
}

+ (TestPackedTypes *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypes *)parseFromInputStream:(NSInputStream *)input
{
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromInputStream:input] build];
}

+ (TestPackedTypes *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestPackedTypes builder] mergeFromCodedInputStream:input] build];
}

+ (TestPackedTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestPackedTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypes_Builder *)builder
{
  return [[TestPackedTypes_Builder alloc] init];
}

+ (TestPackedTypes_Builder *)builderWithPrototype:(TestPackedTypes *)prototype
{
  return [[TestPackedTypes builder] mergeFrom:prototype];
}

- (TestPackedTypes_Builder *)builder
{
  return [TestPackedTypes builder];
}

- (TestPackedTypes_Builder *)toBuilder
{
  return [TestPackedTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  for (NSUInteger i = 0, listCount = self.packedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt32", @([self.packedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt64", @([self.packedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedUint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint32", @([self.packedUint32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint64", @([self.packedUint64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint32", @([self.packedSint32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint64", @([self.packedSint64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed32", @([self.packedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed64", @([self.packedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed32", @([self.packedSfixed32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed64", @([self.packedSfixed64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFloat", @([self.packedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedDouble.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedDouble", @([self.packedDouble doubleAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedBool.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedBool", @([self.packedBool boolAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedEnum", ForeignEnumToString((ForeignEnum)[self.packedEnum int32AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedTypes class]]) {
    return NO;
  }
  TestPackedTypes *otherMessage = other;
  return
    [self.packedInt32 isEqualToArray:otherMessage.packedInt32] &&
    [self.packedInt64 isEqualToArray:otherMessage.packedInt64] &&
    [self.packedUint32 isEqualToArray:otherMessage.packedUint32] &&
    [self.packedUint64 isEqualToArray:otherMessage.packedUint64] &&
    [self.packedSint32 isEqualToArray:otherMessage.packedSint32] &&
    [self.packedSint64 isEqualToArray:otherMessage.packedSint64] &&
    [self.packedFixed32 isEqualToArray:otherMessage.packedFixed32] &&
    [self.packedFixed64 isEqualToArray:otherMessage.packedFixed64] &&
    [self.packedSfixed32 isEqualToArray:otherMessage.packedSfixed32] &&
    [self.packedSfixed64 isEqualToArray:otherMessage.packedSfixed64] &&
    [self.packedFloat isEqualToArray:otherMessage.packedFloat] &&
    [self.packedDouble isEqualToArray:otherMessage.packedDouble] &&
    [self.packedBool isEqualToArray:otherMessage.packedBool] &&
    [self.packedEnum isEqualToArray:otherMessage.packedEnum] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  for (NSUInteger i = 0, listCount = self.packedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedUint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedUint32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedUint64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSint32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSint64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSfixed32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSfixed64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedDouble.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedDouble doubleAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedBool.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedBool boolAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.packedEnum int32AtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestPackedTypes_Builder()

@property (strong) TestPackedTypes *result;

@end


@implementation TestPackedTypes_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestPackedTypes alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestPackedTypes_Builder *)clear
{
  self.result = [[TestPackedTypes alloc] init];
  return self;
}

- (TestPackedTypes_Builder *)clone
{
  return [TestPackedTypes builderWithPrototype:_result];
}

- (TestPackedTypes *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestPackedTypes *)buildPartial
{
  TestPackedTypes *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestPackedTypes_Builder *)mergeFrom:(TestPackedTypes *)other
{
  if (other == nil) {
    return self;
  }
  if (other.packedInt32.count > 0) {
    if (_result.packedInt32 == nil) {
      _result.packedInt32 = [other.packedInt32 copy];
    } else {
      [_result.packedInt32 appendArray:other.packedInt32];
    }
  }
  if (other.packedInt64.count > 0) {
    if (_result.packedInt64 == nil) {
      _result.packedInt64 = [other.packedInt64 copy];
    } else {
      [_result.packedInt64 appendArray:other.packedInt64];
    }
  }
  if (other.packedUint32.count > 0) {
    if (_result.packedUint32 == nil) {
      _result.packedUint32 = [other.packedUint32 copy];
    } else {
      [_result.packedUint32 appendArray:other.packedUint32];
    }
  }
  if (other.packedUint64.count > 0) {
    if (_result.packedUint64 == nil) {
      _result.packedUint64 = [other.packedUint64 copy];
    } else {
      [_result.packedUint64 appendArray:other.packedUint64];
    }
  }
  if (other.packedSint32.count > 0) {
    if (_result.packedSint32 == nil) {
      _result.packedSint32 = [other.packedSint32 copy];
    } else {
      [_result.packedSint32 appendArray:other.packedSint32];
    }
  }
  if (other.packedSint64.count > 0) {
    if (_result.packedSint64 == nil) {
      _result.packedSint64 = [other.packedSint64 copy];
    } else {
      [_result.packedSint64 appendArray:other.packedSint64];
    }
  }
  if (other.packedFixed32.count > 0) {
    if (_result.packedFixed32 == nil) {
      _result.packedFixed32 = [other.packedFixed32 copy];
    } else {
      [_result.packedFixed32 appendArray:other.packedFixed32];
    }
  }
  if (other.packedFixed64.count > 0) {
    if (_result.packedFixed64 == nil) {
      _result.packedFixed64 = [other.packedFixed64 copy];
    } else {
      [_result.packedFixed64 appendArray:other.packedFixed64];
    }
  }
  if (other.packedSfixed32.count > 0) {
    if (_result.packedSfixed32 == nil) {
      _result.packedSfixed32 = [other.packedSfixed32 copy];
    } else {
      [_result.packedSfixed32 appendArray:other.packedSfixed32];
    }
  }
  if (other.packedSfixed64.count > 0) {
    if (_result.packedSfixed64 == nil) {
      _result.packedSfixed64 = [other.packedSfixed64 copy];
    } else {
      [_result.packedSfixed64 appendArray:other.packedSfixed64];
    }
  }
  if (other.packedFloat.count > 0) {
    if (_result.packedFloat == nil) {
      _result.packedFloat = [other.packedFloat copy];
    } else {
      [_result.packedFloat appendArray:other.packedFloat];
    }
  }
  if (other.packedDouble.count > 0) {
    if (_result.packedDouble == nil) {
      _result.packedDouble = [other.packedDouble copy];
    } else {
      [_result.packedDouble appendArray:other.packedDouble];
    }
  }
  if (other.packedBool.count > 0) {
    if (_result.packedBool == nil) {
      _result.packedBool = [other.packedBool copy];
    } else {
      [_result.packedBool appendArray:other.packedBool];
    }
  }
  if (other.packedEnum.count > 0) {
    if (_result.packedEnum == nil) {
      _result.packedEnum = [other.packedEnum copy];
    } else {
      [_result.packedEnum appendArray:other.packedEnum];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestPackedTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestPackedTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 722: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt32 == nil) {
          _result.packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt32 addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 730: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt64 == nil) {
          _result.packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt64 addInt64:[input readInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 738: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint32 == nil) {
          _result.packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint32 addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 746: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint64 == nil) {
          _result.packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint64 addUint64:[input readUInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 754: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint32 == nil) {
          _result.packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint32 addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 762: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint64 == nil) {
          _result.packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint64 addInt64:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 770: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed32 == nil) {
          _result.packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed32 addUint32:[input readFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 778: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed64 == nil) {
          _result.packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed64 addUint64:[input readFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 786: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed32 == nil) {
          _result.packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed32 addInt32:[input readSFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 794: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed64 == nil) {
          _result.packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed64 addInt64:[input readSFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 802: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFloat == nil) {
          _result.packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFloat addFloat:[input readFloat]];
        }
        [input popLimit:limit];
        break;
      }
      case 810: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedDouble == nil) {
          _result.packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedDouble addDouble:[input readDouble]];
        }
        [input popLimit:limit];
        break;
      }
      case 818: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedBool == nil) {
          _result.packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedBool addBool:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
      case 826: {
        int32_t length = [input readRawVarint32];
        int32_t oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          int32_t value = [input readEnum];
          if (ForeignEnumIsValidValue(value)) {
            [self addPackedEnum:value];
          } else {
            [unknownFields mergeVarintField:103 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}

- (PBAppendableArray *)packedInt32
{
  return _result.packedInt32;
}

- (int32_t)packedInt32AtIndex:(NSUInteger)index
{
  return [_result packedInt32AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedInt32:(int32_t)value
{
  [_result addPackedInt32:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedInt32Array:(NSArray *)array
{
  [_result setPackedInt32Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedInt32Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedInt32
{
  [_result clearPackedInt32];
  return self;
}

- (PBAppendableArray *)packedInt64
{
  return _result.packedInt64;
}

- (int64_t)packedInt64AtIndex:(NSUInteger)index
{
  return [_result packedInt64AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedInt64:(int64_t)value
{
  [_result addPackedInt64:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedInt64Array:(NSArray *)array
{
  [_result setPackedInt64Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedInt64Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedInt64
{
  [_result clearPackedInt64];
  return self;
}

- (PBAppendableArray *)packedUint32
{
  return _result.packedUint32;
}

- (uint32_t)packedUint32AtIndex:(NSUInteger)index
{
  return [_result packedUint32AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedUint32:(uint32_t)value
{
  [_result addPackedUint32:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedUint32Array:(NSArray *)array
{
  [_result setPackedUint32Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setPackedUint32Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedUint32
{
  [_result clearPackedUint32];
  return self;
}

- (PBAppendableArray *)packedUint64
{
  return _result.packedUint64;
}

- (uint64_t)packedUint64AtIndex:(NSUInteger)index
{
  return [_result packedUint64AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedUint64:(uint64_t)value
{
  [_result addPackedUint64:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedUint64Array:(NSArray *)array
{
  [_result setPackedUint64Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setPackedUint64Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedUint64
{
  [_result clearPackedUint64];
  return self;
}

- (PBAppendableArray *)packedSint32
{
  return _result.packedSint32;
}

- (int32_t)packedSint32AtIndex:(NSUInteger)index
{
  return [_result packedSint32AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedSint32:(int32_t)value
{
  [_result addPackedSint32:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSint32Array:(NSArray *)array
{
  [_result setPackedSint32Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedSint32Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedSint32
{
  [_result clearPackedSint32];
  return self;
}

- (PBAppendableArray *)packedSint64
{
  return _result.packedSint64;
}

- (int64_t)packedSint64AtIndex:(NSUInteger)index
{
  return [_result packedSint64AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedSint64:(int64_t)value
{
  [_result addPackedSint64:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSint64Array:(NSArray *)array
{
  [_result setPackedSint64Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedSint64Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedSint64
{
  [_result clearPackedSint64];
  return self;
}

- (PBAppendableArray *)packedFixed32
{
  return _result.packedFixed32;
}

- (uint32_t)packedFixed32AtIndex:(NSUInteger)index
{
  return [_result packedFixed32AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedFixed32:(uint32_t)value
{
  [_result addPackedFixed32:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFixed32Array:(NSArray *)array
{
  [_result setPackedFixed32Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setPackedFixed32Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedFixed32
{
  [_result clearPackedFixed32];
  return self;
}

- (PBAppendableArray *)packedFixed64
{
  return _result.packedFixed64;
}

- (uint64_t)packedFixed64AtIndex:(NSUInteger)index
{
  return [_result packedFixed64AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedFixed64:(uint64_t)value
{
  [_result addPackedFixed64:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFixed64Array:(NSArray *)array
{
  [_result setPackedFixed64Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setPackedFixed64Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedFixed64
{
  [_result clearPackedFixed64];
  return self;
}

- (PBAppendableArray *)packedSfixed32
{
  return _result.packedSfixed32;
}

- (int32_t)packedSfixed32AtIndex:(NSUInteger)index
{
  return [_result packedSfixed32AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedSfixed32:(int32_t)value
{
  [_result addPackedSfixed32:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSfixed32Array:(NSArray *)array
{
  [_result setPackedSfixed32Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedSfixed32Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedSfixed32
{
  [_result clearPackedSfixed32];
  return self;
}

- (PBAppendableArray *)packedSfixed64
{
  return _result.packedSfixed64;
}

- (int64_t)packedSfixed64AtIndex:(NSUInteger)index
{
  return [_result packedSfixed64AtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedSfixed64:(int64_t)value
{
  [_result addPackedSfixed64:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSfixed64Array:(NSArray *)array
{
  [_result setPackedSfixed64Array:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedSfixed64Values:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedSfixed64
{
  [_result clearPackedSfixed64];
  return self;
}

- (PBAppendableArray *)packedFloat
{
  return _result.packedFloat;
}

- (Float32)packedFloatAtIndex:(NSUInteger)index
{
  return [_result packedFloatAtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedFloat:(Float32)value
{
  [_result addPackedFloat:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFloatArray:(NSArray *)array
{
  [_result setPackedFloatArray:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setPackedFloatValues:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedFloat
{
  [_result clearPackedFloat];
  return self;
}

- (PBAppendableArray *)packedDouble
{
  return _result.packedDouble;
}

- (Float64)packedDoubleAtIndex:(NSUInteger)index
{
  return [_result packedDoubleAtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedDouble:(Float64)value
{
  [_result addPackedDouble:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedDoubleArray:(NSArray *)array
{
  [_result setPackedDoubleArray:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  [_result setPackedDoubleValues:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedDouble
{
  [_result clearPackedDouble];
  return self;
}

- (PBAppendableArray *)packedBool
{
  return _result.packedBool;
}

- (BOOL)packedBoolAtIndex:(NSUInteger)index
{
  return [_result packedBoolAtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedBool:(BOOL)value
{
  [_result addPackedBool:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedBoolArray:(NSArray *)array
{
  [_result setPackedBoolArray:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  [_result setPackedBoolValues:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedBool
{
  [_result clearPackedBool];
  return self;
}

- (PBAppendableArray *)packedEnum
{
  return _result.packedEnum;
}

- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index{
  return [_result packedEnumAtIndex:index];
}

- (TestPackedTypes_Builder *)addPackedEnum:(ForeignEnum)value
{
  [_result addPackedEnum:value];
  return self;
}

- (TestPackedTypes_Builder *)setPackedEnumArray:(NSArray *)array
{
  [_result setPackedEnumArray:array];
  return self;
}

- (TestPackedTypes_Builder *)setPackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  [_result setPackedEnumValues:values count:count];
  return self;
}

- (TestPackedTypes_Builder *)clearPackedEnum
{
  [_result clearPackedEnum];
  return self;
}

@end


@interface TestUnpackedTypes ()


@end


@implementation TestUnpackedTypes

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (int32_t)unpackedInt32AtIndex:(NSUInteger)index
{
  return [_unpackedInt32 int32AtIndex:index];
}
- (void)addUnpackedInt32:(int32_t)value
{
  if (_unpackedInt32 == nil) {
    _unpackedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedInt32 addInt32:value];
}

- (void)addUnpackedInt32Array:(NSArray *)array
{
  if (_unpackedInt32 == nil) {
    _unpackedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setUnpackedInt32Array:(NSArray *)array
{
  _unpackedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setUnpackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _unpackedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearUnpackedInt32
{
  _unpackedInt32 = nil;
}

- (int64_t)unpackedInt64AtIndex:(NSUInteger)index
{
  return [_unpackedInt64 int64AtIndex:index];
}
- (void)addUnpackedInt64:(int64_t)value
{
  if (_unpackedInt64 == nil) {
    _unpackedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedInt64 addInt64:value];
}

- (void)addUnpackedInt64Array:(NSArray *)array
{
  if (_unpackedInt64 == nil) {
    _unpackedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setUnpackedInt64Array:(NSArray *)array
{
  _unpackedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setUnpackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _unpackedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearUnpackedInt64
{
  _unpackedInt64 = nil;
}

- (uint32_t)unpackedUint32AtIndex:(NSUInteger)index
{
  return [_unpackedUint32 uint32AtIndex:index];
}
- (void)addUnpackedUint32:(uint32_t)value
{
  if (_unpackedUint32 == nil) {
    _unpackedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_unpackedUint32 addUint32:value];
}

- (void)addUnpackedUint32Array:(NSArray *)array
{
  if (_unpackedUint32 == nil) {
    _unpackedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_unpackedUint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setUnpackedUint32Array:(NSArray *)array
{
  _unpackedUint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setUnpackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _unpackedUint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearUnpackedUint32
{
  _unpackedUint32 = nil;
}

- (uint64_t)unpackedUint64AtIndex:(NSUInteger)index
{
  return [_unpackedUint64 uint64AtIndex:index];
}
- (void)addUnpackedUint64:(uint64_t)value
{
  if (_unpackedUint64 == nil) {
    _unpackedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_unpackedUint64 addUint64:value];
}

- (void)addUnpackedUint64Array:(NSArray *)array
{
  if (_unpackedUint64 == nil) {
    _unpackedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_unpackedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setUnpackedUint64Array:(NSArray *)array
{
  _unpackedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setUnpackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _unpackedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearUnpackedUint64
{
  _unpackedUint64 = nil;
}

- (int32_t)unpackedSint32AtIndex:(NSUInteger)index
{
  return [_unpackedSint32 int32AtIndex:index];
}
- (void)addUnpackedSint32:(int32_t)value
{
  if (_unpackedSint32 == nil) {
    _unpackedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedSint32 addInt32:value];
}

- (void)addUnpackedSint32Array:(NSArray *)array
{
  if (_unpackedSint32 == nil) {
    _unpackedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedSint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setUnpackedSint32Array:(NSArray *)array
{
  _unpackedSint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setUnpackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  _unpackedSint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearUnpackedSint32
{
  _unpackedSint32 = nil;
}

- (int64_t)unpackedSint64AtIndex:(NSUInteger)index
{
  return [_unpackedSint64 int64AtIndex:index];
}
- (void)addUnpackedSint64:(int64_t)value
{
  if (_unpackedSint64 == nil) {
    _unpackedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedSint64 addInt64:value];
}

- (void)addUnpackedSint64Array:(NSArray *)array
{
  if (_unpackedSint64 == nil) {
    _unpackedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedSint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setUnpackedSint64Array:(NSArray *)array
{
  _unpackedSint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setUnpackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  _unpackedSint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearUnpackedSint64
{
  _unpackedSint64 = nil;
}

- (uint32_t)unpackedFixed32AtIndex:(NSUInteger)index
{
  return [_unpackedFixed32 uint32AtIndex:index];
}
- (void)addUnpackedFixed32:(uint32_t)value
{
  if (_unpackedFixed32 == nil) {
    _unpackedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_unpackedFixed32 addUint32:value];
}

- (void)addUnpackedFixed32Array:(NSArray *)array
{
  if (_unpackedFixed32 == nil) {
    _unpackedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_unpackedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setUnpackedFixed32Array:(NSArray *)array
{
  _unpackedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setUnpackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _unpackedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearUnpackedFixed32
{
  _unpackedFixed32 = nil;
}

- (uint64_t)unpackedFixed64AtIndex:(NSUInteger)index
{
  return [_unpackedFixed64 uint64AtIndex:index];
}
- (void)addUnpackedFixed64:(uint64_t)value
{
  if (_unpackedFixed64 == nil) {
    _unpackedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_unpackedFixed64 addUint64:value];
}

- (void)addUnpackedFixed64Array:(NSArray *)array
{
  if (_unpackedFixed64 == nil) {
    _unpackedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_unpackedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setUnpackedFixed64Array:(NSArray *)array
{
  _unpackedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setUnpackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _unpackedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearUnpackedFixed64
{
  _unpackedFixed64 = nil;
}

- (int32_t)unpackedSfixed32AtIndex:(NSUInteger)index
{
  return [_unpackedSfixed32 int32AtIndex:index];
}
- (void)addUnpackedSfixed32:(int32_t)value
{
  if (_unpackedSfixed32 == nil) {
    _unpackedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedSfixed32 addInt32:value];
}

- (void)addUnpackedSfixed32Array:(NSArray *)array
{
  if (_unpackedSfixed32 == nil) {
    _unpackedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedSfixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setUnpackedSfixed32Array:(NSArray *)array
{
  _unpackedSfixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setUnpackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  _unpackedSfixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearUnpackedSfixed32
{
  _unpackedSfixed32 = nil;
}

- (int64_t)unpackedSfixed64AtIndex:(NSUInteger)index
{
  return [_unpackedSfixed64 int64AtIndex:index];
}
- (void)addUnpackedSfixed64:(int64_t)value
{
  if (_unpackedSfixed64 == nil) {
    _unpackedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedSfixed64 addInt64:value];
}

- (void)addUnpackedSfixed64Array:(NSArray *)array
{
  if (_unpackedSfixed64 == nil) {
    _unpackedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_unpackedSfixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setUnpackedSfixed64Array:(NSArray *)array
{
  _unpackedSfixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setUnpackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  _unpackedSfixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearUnpackedSfixed64
{
  _unpackedSfixed64 = nil;
}

- (Float32)unpackedFloatAtIndex:(NSUInteger)index
{
  return [_unpackedFloat floatAtIndex:index];
}
- (void)addUnpackedFloat:(Float32)value
{
  if (_unpackedFloat == nil) {
    _unpackedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_unpackedFloat addFloat:value];
}

- (void)addUnpackedFloatArray:(NSArray *)array
{
  if (_unpackedFloat == nil) {
    _unpackedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_unpackedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setUnpackedFloatArray:(NSArray *)array
{
  _unpackedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setUnpackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _unpackedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearUnpackedFloat
{
  _unpackedFloat = nil;
}

- (Float64)unpackedDoubleAtIndex:(NSUInteger)index
{
  return [_unpackedDouble doubleAtIndex:index];
}
- (void)addUnpackedDouble:(Float64)value
{
  if (_unpackedDouble == nil) {
    _unpackedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_unpackedDouble addDouble:value];
}

- (void)addUnpackedDoubleArray:(NSArray *)array
{
  if (_unpackedDouble == nil) {
    _unpackedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_unpackedDouble appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble]];
}

- (void)setUnpackedDoubleArray:(NSArray *)array
{
  _unpackedDouble = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
}

- (void)setUnpackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  _unpackedDouble = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
}

- (void)clearUnpackedDouble
{
  _unpackedDouble = nil;
}

- (BOOL)unpackedBoolAtIndex:(NSUInteger)index
{
  return [_unpackedBool boolAtIndex:index];
}
- (void)addUnpackedBool:(BOOL)value
{
  if (_unpackedBool == nil) {
    _unpackedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_unpackedBool addBool:value];
}

- (void)addUnpackedBoolArray:(NSArray *)array
{
  if (_unpackedBool == nil) {
    _unpackedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_unpackedBool appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool]];
}

- (void)setUnpackedBoolArray:(NSArray *)array
{
  _unpackedBool = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
}

- (void)setUnpackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  _unpackedBool = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
}

- (void)clearUnpackedBool
{
  _unpackedBool = nil;
}

- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index
{
  return (ForeignEnum)[_unpackedEnum int32AtIndex:index];
}

- (void)addUnpackedEnum:(ForeignEnum)value
{
  if (_unpackedEnum == nil) {
    _unpackedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedEnum addInt32:value];
}

- (void)addUnpackedEnumArray:(NSArray *)array
{
  if (_unpackedEnum == nil) {
    _unpackedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_unpackedEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setUnpackedEnumArray:(NSArray *)array
{
  _unpackedEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setUnpackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  _unpackedEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearUnpackedEnum
{
  _unpackedEnum = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  const NSUInteger unpackedInt32Count = self.unpackedInt32.count;
  if (unpackedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.unpackedInt32.data;
    for (NSUInteger i = 0; i < unpackedInt32Count; ++i) {
      [output writeInt32:90 value:values[i]];
    }
  }
  const NSUInteger unpackedInt64Count = self.unpackedInt64.count;
  if (unpackedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.unpackedInt64.data;
    for (NSUInteger i = 0; i < unpackedInt64Count; ++i) {
      [output writeInt64:91 value:values[i]];
    }
  }
  const NSUInteger unpackedUint32Count = self.unpackedUint32.count;
  if (unpackedUint32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.unpackedUint32.data;
    for (NSUInteger i = 0; i < unpackedUint32Count; ++i) {
      [output writeUInt32:92 value:values[i]];
    }
  }
  const NSUInteger unpackedUint64Count = self.unpackedUint64.count;
  if (unpackedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.unpackedUint64.data;
    for (NSUInteger i = 0; i < unpackedUint64Count; ++i) {
      [output writeUInt64:93 value:values[i]];
    }
  }
  const NSUInteger unpackedSint32Count = self.unpackedSint32.count;
  if (unpackedSint32Count > 0) {
    const int32_t *values = (const int32_t *)self.unpackedSint32.data;
    for (NSUInteger i = 0; i < unpackedSint32Count; ++i) {
      [output writeSInt32:94 value:values[i]];
    }
  }
  const NSUInteger unpackedSint64Count = self.unpackedSint64.count;
  if (unpackedSint64Count > 0) {
    const int64_t *values = (const int64_t *)self.unpackedSint64.data;
    for (NSUInteger i = 0; i < unpackedSint64Count; ++i) {
      [output writeSInt64:95 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed32Count = self.unpackedFixed32.count;
  if (unpackedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.unpackedFixed32.data;
    for (NSUInteger i = 0; i < unpackedFixed32Count; ++i) {
      [output writeFixed32:96 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed64Count = self.unpackedFixed64.count;
  if (unpackedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.unpackedFixed64.data;
    for (NSUInteger i = 0; i < unpackedFixed64Count; ++i) {
      [output writeFixed64:97 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed32Count = self.unpackedSfixed32.count;
  if (unpackedSfixed32Count > 0) {
    const int32_t *values = (const int32_t *)self.unpackedSfixed32.data;
    for (NSUInteger i = 0; i < unpackedSfixed32Count; ++i) {
      [output writeSFixed32:98 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed64Count = self.unpackedSfixed64.count;
  if (unpackedSfixed64Count > 0) {
    const int64_t *values = (const int64_t *)self.unpackedSfixed64.data;
    for (NSUInteger i = 0; i < unpackedSfixed64Count; ++i) {
      [output writeSFixed64:99 value:values[i]];
    }
  }
  const NSUInteger unpackedFloatCount = self.unpackedFloat.count;
  if (unpackedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.unpackedFloat.data;
    for (NSUInteger i = 0; i < unpackedFloatCount; ++i) {
      [output writeFloat:100 value:values[i]];
    }
  }
  const NSUInteger unpackedDoubleCount = self.unpackedDouble.count;
  if (unpackedDoubleCount > 0) {
    const Float64 *values = (const Float64 *)self.unpackedDouble.data;
    for (NSUInteger i = 0; i < unpackedDoubleCount; ++i) {
      [output writeDouble:101 value:values[i]];
    }
  }
  const NSUInteger unpackedBoolCount = self.unpackedBool.count;
  if (unpackedBoolCount > 0) {
    const BOOL *values = (const BOOL *)self.unpackedBool.data;
    for (NSUInteger i = 0; i < unpackedBoolCount; ++i) {
      [output writeBool:102 value:values[i]];
    }
  }
  const NSUInteger unpackedEnumCount = self.unpackedEnum.count;
  const ForeignEnum *unpackedEnumValues = (const ForeignEnum *)self.unpackedEnum.data;
  for (NSUInteger i = 0; i < unpackedEnumCount; ++i) {
    [output writeEnum:103 value:unpackedEnumValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedInt32.count;
    const int32_t *values = (const int32_t *)self.unpackedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedInt64.count;
    const int64_t *values = (const int64_t *)self.unpackedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedUint32.count;
    const uint32_t *values = (const uint32_t *)self.unpackedUint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedUint64.count;
    const uint64_t *values = (const uint64_t *)self.unpackedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedSint32.count;
    const int32_t *values = (const int32_t *)self.unpackedSint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedSint64.count;
    const int64_t *values = (const int64_t *)self.unpackedSint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedSfixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedSfixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedDouble.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedBool.count;
    dataSize = 1 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.unpackedEnum.count;
    const ForeignEnum *values = (const ForeignEnum *)self.unpackedEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestUnpackedTypes *)parseFromData:(NSData *)data
{
  return (TestUnpackedTypes *)[[[TestUnpackedTypes builder] mergeFromData:data] build];
}

+ (TestUnpackedTypes *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestUnpackedTypes *)parseFromInputStream:(NSInputStream *)input
{
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromInputStream:input] build];
}

+ (TestUnpackedTypes *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestUnpackedTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestUnpackedTypes builder] mergeFromCodedInputStream:input] build];
}

+ (TestUnpackedTypes *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestUnpackedTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestUnpackedTypes_Builder *)builder
{
  return [[TestUnpackedTypes_Builder alloc] init];
}

+ (TestUnpackedTypes_Builder *)builderWithPrototype:(TestUnpackedTypes *)prototype
{
  return [[TestUnpackedTypes builder] mergeFrom:prototype];
}

- (TestUnpackedTypes_Builder *)builder
{
  return [TestUnpackedTypes builder];
}

- (TestUnpackedTypes_Builder *)toBuilder
{
  return [TestUnpackedTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  for (NSUInteger i = 0, listCount = self.unpackedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt32", @([self.unpackedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt64", @([self.unpackedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedUint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint32", @([self.unpackedUint32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint64", @([self.unpackedUint64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint32", @([self.unpackedSint32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint64", @([self.unpackedSint64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed32", @([self.unpackedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed64", @([self.unpackedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSfixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed32", @([self.unpackedSfixed32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSfixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed64", @([self.unpackedSfixed64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFloat", @([self.unpackedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedDouble.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedDouble", @([self.unpackedDouble doubleAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedBool.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedBool", @([self.unpackedBool boolAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.unpackedEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedEnum", ForeignEnumToString((ForeignEnum)[self.unpackedEnum int32AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestUnpackedTypes class]]) {
    return NO;
  }
  TestUnpackedTypes *otherMessage = other;
  return
    [self.unpackedInt32 isEqualToArray:otherMessage.unpackedInt32] &&
    [self.unpackedInt64 isEqualToArray:otherMessage.unpackedInt64] &&
    [self.unpackedUint32 isEqualToArray:otherMessage.unpackedUint32] &&
    [self.unpackedUint64 isEqualToArray:otherMessage.unpackedUint64] &&
    [self.unpackedSint32 isEqualToArray:otherMessage.unpackedSint32] &&
    [self.unpackedSint64 isEqualToArray:otherMessage.unpackedSint64] &&
    [self.unpackedFixed32 isEqualToArray:otherMessage.unpackedFixed32] &&
    [self.unpackedFixed64 isEqualToArray:otherMessage.unpackedFixed64] &&
    [self.unpackedSfixed32 isEqualToArray:otherMessage.unpackedSfixed32] &&
    [self.unpackedSfixed64 isEqualToArray:otherMessage.unpackedSfixed64] &&
    [self.unpackedFloat isEqualToArray:otherMessage.unpackedFloat] &&
    [self.unpackedDouble isEqualToArray:otherMessage.unpackedDouble] &&
    [self.unpackedBool isEqualToArray:otherMessage.unpackedBool] &&
    [self.unpackedEnum isEqualToArray:otherMessage.unpackedEnum] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  for (NSUInteger i = 0, listCount = self.unpackedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedUint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedUint32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedUint64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedSint32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedSint64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSfixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedSfixed32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedSfixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedSfixed64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedDouble.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedDouble doubleAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedBool.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.unpackedBool boolAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.unpackedEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.unpackedEnum int32AtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestUnpackedTypes_Builder()

@property (strong) TestUnpackedTypes *result;

@end


@implementation TestUnpackedTypes_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestUnpackedTypes alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestUnpackedTypes_Builder *)clear
{
  self.result = [[TestUnpackedTypes alloc] init];
  return self;
}

- (TestUnpackedTypes_Builder *)clone
{
  return [TestUnpackedTypes builderWithPrototype:_result];
}

- (TestUnpackedTypes *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestUnpackedTypes *)buildPartial
{
  TestUnpackedTypes *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestUnpackedTypes_Builder *)mergeFrom:(TestUnpackedTypes *)other
{
  if (other == nil) {
    return self;
  }
  if (other.unpackedInt32.count > 0) {
    if (_result.unpackedInt32 == nil) {
      _result.unpackedInt32 = [other.unpackedInt32 copy];
    } else {
      [_result.unpackedInt32 appendArray:other.unpackedInt32];
    }
  }
  if (other.unpackedInt64.count > 0) {
    if (_result.unpackedInt64 == nil) {
      _result.unpackedInt64 = [other.unpackedInt64 copy];
    } else {
      [_result.unpackedInt64 appendArray:other.unpackedInt64];
    }
  }
  if (other.unpackedUint32.count > 0) {
    if (_result.unpackedUint32 == nil) {
      _result.unpackedUint32 = [other.unpackedUint32 copy];
    } else {
      [_result.unpackedUint32 appendArray:other.unpackedUint32];
    }
  }
  if (other.unpackedUint64.count > 0) {
    if (_result.unpackedUint64 == nil) {
      _result.unpackedUint64 = [other.unpackedUint64 copy];
    } else {
      [_result.unpackedUint64 appendArray:other.unpackedUint64];
    }
  }
  if (other.unpackedSint32.count > 0) {
    if (_result.unpackedSint32 == nil) {
      _result.unpackedSint32 = [other.unpackedSint32 copy];
    } else {
      [_result.unpackedSint32 appendArray:other.unpackedSint32];
    }
  }
  if (other.unpackedSint64.count > 0) {
    if (_result.unpackedSint64 == nil) {
      _result.unpackedSint64 = [other.unpackedSint64 copy];
    } else {
      [_result.unpackedSint64 appendArray:other.unpackedSint64];
    }
  }
  if (other.unpackedFixed32.count > 0) {
    if (_result.unpackedFixed32 == nil) {
      _result.unpackedFixed32 = [other.unpackedFixed32 copy];
    } else {
      [_result.unpackedFixed32 appendArray:other.unpackedFixed32];
    }
  }
  if (other.unpackedFixed64.count > 0) {
    if (_result.unpackedFixed64 == nil) {
      _result.unpackedFixed64 = [other.unpackedFixed64 copy];
    } else {
      [_result.unpackedFixed64 appendArray:other.unpackedFixed64];
    }
  }
  if (other.unpackedSfixed32.count > 0) {
    if (_result.unpackedSfixed32 == nil) {
      _result.unpackedSfixed32 = [other.unpackedSfixed32 copy];
    } else {
      [_result.unpackedSfixed32 appendArray:other.unpackedSfixed32];
    }
  }
  if (other.unpackedSfixed64.count > 0) {
    if (_result.unpackedSfixed64 == nil) {
      _result.unpackedSfixed64 = [other.unpackedSfixed64 copy];
    } else {
      [_result.unpackedSfixed64 appendArray:other.unpackedSfixed64];
    }
  }
  if (other.unpackedFloat.count > 0) {
    if (_result.unpackedFloat == nil) {
      _result.unpackedFloat = [other.unpackedFloat copy];
    } else {
      [_result.unpackedFloat appendArray:other.unpackedFloat];
    }
  }
  if (other.unpackedDouble.count > 0) {
    if (_result.unpackedDouble == nil) {
      _result.unpackedDouble = [other.unpackedDouble copy];
    } else {
      [_result.unpackedDouble appendArray:other.unpackedDouble];
    }
  }
  if (other.unpackedBool.count > 0) {
    if (_result.unpackedBool == nil) {
      _result.unpackedBool = [other.unpackedBool copy];
    } else {
      [_result.unpackedBool appendArray:other.unpackedBool];
    }
  }
  if (other.unpackedEnum.count > 0) {
    if (_result.unpackedEnum == nil) {
      _result.unpackedEnum = [other.unpackedEnum copy];
    } else {
      [_result.unpackedEnum appendArray:other.unpackedEnum];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestUnpackedTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestUnpackedTypes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 720: {
        [self addUnpackedInt32:[input readInt32]];
        break;
      }
      case 728: {
        [self addUnpackedInt64:[input readInt64]];
        break;
      }
      case 736: {
        [self addUnpackedUint32:[input readUInt32]];
        break;
      }
      case 744: {
        [self addUnpackedUint64:[input readUInt64]];
        break;
      }
      case 752: {
        [self addUnpackedSint32:[input readSInt32]];
        break;
      }
      case 760: {
        [self addUnpackedSint64:[input readSInt64]];
        break;
      }
      case 773: {
        [self addUnpackedFixed32:[input readFixed32]];
        break;
      }
      case 777: {
        [self addUnpackedFixed64:[input readFixed64]];
        break;
      }
      case 789: {
        [self addUnpackedSfixed32:[input readSFixed32]];
        break;
      }
      case 793: {
        [self addUnpackedSfixed64:[input readSFixed64]];
        break;
      }
      case 805: {
        [self addUnpackedFloat:[input readFloat]];
        break;
      }
      case 809: {
        [self addUnpackedDouble:[input readDouble]];
        break;
      }
      case 816: {
        [self addUnpackedBool:[input readBool]];
        break;
      }
      case 824: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addUnpackedEnum:value];
        } else {
          [unknownFields mergeVarintField:103 value:value];
        }
        break;
      }
    }
  }
}

- (PBAppendableArray *)unpackedInt32
{
  return _result.unpackedInt32;
}

- (int32_t)unpackedInt32AtIndex:(NSUInteger)index
{
  return [_result unpackedInt32AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedInt32:(int32_t)value
{
  [_result addUnpackedInt32:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedInt32Array:(NSArray *)array
{
  [_result setUnpackedInt32Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setUnpackedInt32Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedInt32
{
  [_result clearUnpackedInt32];
  return self;
}

- (PBAppendableArray *)unpackedInt64
{
  return _result.unpackedInt64;
}

- (int64_t)unpackedInt64AtIndex:(NSUInteger)index
{
  return [_result unpackedInt64AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedInt64:(int64_t)value
{
  [_result addUnpackedInt64:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedInt64Array:(NSArray *)array
{
  [_result setUnpackedInt64Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setUnpackedInt64Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedInt64
{
  [_result clearUnpackedInt64];
  return self;
}

- (PBAppendableArray *)unpackedUint32
{
  return _result.unpackedUint32;
}

- (uint32_t)unpackedUint32AtIndex:(NSUInteger)index
{
  return [_result unpackedUint32AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedUint32:(uint32_t)value
{
  [_result addUnpackedUint32:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedUint32Array:(NSArray *)array
{
  [_result setUnpackedUint32Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setUnpackedUint32Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedUint32
{
  [_result clearUnpackedUint32];
  return self;
}

- (PBAppendableArray *)unpackedUint64
{
  return _result.unpackedUint64;
}

- (uint64_t)unpackedUint64AtIndex:(NSUInteger)index
{
  return [_result unpackedUint64AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedUint64:(uint64_t)value
{
  [_result addUnpackedUint64:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedUint64Array:(NSArray *)array
{
  [_result setUnpackedUint64Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setUnpackedUint64Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedUint64
{
  [_result clearUnpackedUint64];
  return self;
}

- (PBAppendableArray *)unpackedSint32
{
  return _result.unpackedSint32;
}

- (int32_t)unpackedSint32AtIndex:(NSUInteger)index
{
  return [_result unpackedSint32AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedSint32:(int32_t)value
{
  [_result addUnpackedSint32:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSint32Array:(NSArray *)array
{
  [_result setUnpackedSint32Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setUnpackedSint32Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedSint32
{
  [_result clearUnpackedSint32];
  return self;
}

- (PBAppendableArray *)unpackedSint64
{
  return _result.unpackedSint64;
}

- (int64_t)unpackedSint64AtIndex:(NSUInteger)index
{
  return [_result unpackedSint64AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedSint64:(int64_t)value
{
  [_result addUnpackedSint64:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSint64Array:(NSArray *)array
{
  [_result setUnpackedSint64Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setUnpackedSint64Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedSint64
{
  [_result clearUnpackedSint64];
  return self;
}

- (PBAppendableArray *)unpackedFixed32
{
  return _result.unpackedFixed32;
}

- (uint32_t)unpackedFixed32AtIndex:(NSUInteger)index
{
  return [_result unpackedFixed32AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedFixed32:(uint32_t)value
{
  [_result addUnpackedFixed32:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFixed32Array:(NSArray *)array
{
  [_result setUnpackedFixed32Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setUnpackedFixed32Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedFixed32
{
  [_result clearUnpackedFixed32];
  return self;
}

- (PBAppendableArray *)unpackedFixed64
{
  return _result.unpackedFixed64;
}

- (uint64_t)unpackedFixed64AtIndex:(NSUInteger)index
{
  return [_result unpackedFixed64AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedFixed64:(uint64_t)value
{
  [_result addUnpackedFixed64:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFixed64Array:(NSArray *)array
{
  [_result setUnpackedFixed64Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setUnpackedFixed64Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedFixed64
{
  [_result clearUnpackedFixed64];
  return self;
}

- (PBAppendableArray *)unpackedSfixed32
{
  return _result.unpackedSfixed32;
}

- (int32_t)unpackedSfixed32AtIndex:(NSUInteger)index
{
  return [_result unpackedSfixed32AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedSfixed32:(int32_t)value
{
  [_result addUnpackedSfixed32:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSfixed32Array:(NSArray *)array
{
  [_result setUnpackedSfixed32Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setUnpackedSfixed32Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedSfixed32
{
  [_result clearUnpackedSfixed32];
  return self;
}

- (PBAppendableArray *)unpackedSfixed64
{
  return _result.unpackedSfixed64;
}

- (int64_t)unpackedSfixed64AtIndex:(NSUInteger)index
{
  return [_result unpackedSfixed64AtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedSfixed64:(int64_t)value
{
  [_result addUnpackedSfixed64:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSfixed64Array:(NSArray *)array
{
  [_result setUnpackedSfixed64Array:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setUnpackedSfixed64Values:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedSfixed64
{
  [_result clearUnpackedSfixed64];
  return self;
}

- (PBAppendableArray *)unpackedFloat
{
  return _result.unpackedFloat;
}

- (Float32)unpackedFloatAtIndex:(NSUInteger)index
{
  return [_result unpackedFloatAtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedFloat:(Float32)value
{
  [_result addUnpackedFloat:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFloatArray:(NSArray *)array
{
  [_result setUnpackedFloatArray:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setUnpackedFloatValues:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedFloat
{
  [_result clearUnpackedFloat];
  return self;
}

- (PBAppendableArray *)unpackedDouble
{
  return _result.unpackedDouble;
}

- (Float64)unpackedDoubleAtIndex:(NSUInteger)index
{
  return [_result unpackedDoubleAtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedDouble:(Float64)value
{
  [_result addUnpackedDouble:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedDoubleArray:(NSArray *)array
{
  [_result setUnpackedDoubleArray:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  [_result setUnpackedDoubleValues:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedDouble
{
  [_result clearUnpackedDouble];
  return self;
}

- (PBAppendableArray *)unpackedBool
{
  return _result.unpackedBool;
}

- (BOOL)unpackedBoolAtIndex:(NSUInteger)index
{
  return [_result unpackedBoolAtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedBool:(BOOL)value
{
  [_result addUnpackedBool:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedBoolArray:(NSArray *)array
{
  [_result setUnpackedBoolArray:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  [_result setUnpackedBoolValues:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedBool
{
  [_result clearUnpackedBool];
  return self;
}

- (PBAppendableArray *)unpackedEnum
{
  return _result.unpackedEnum;
}

- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index{
  return [_result unpackedEnumAtIndex:index];
}

- (TestUnpackedTypes_Builder *)addUnpackedEnum:(ForeignEnum)value
{
  [_result addUnpackedEnum:value];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedEnumArray:(NSArray *)array
{
  [_result setUnpackedEnumArray:array];
  return self;
}

- (TestUnpackedTypes_Builder *)setUnpackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count
{
  [_result setUnpackedEnumValues:values count:count];
  return self;
}

- (TestUnpackedTypes_Builder *)clearUnpackedEnum
{
  [_result clearUnpackedEnum];
  return self;
}

@end


@interface TestPackedExtensions ()


@end


@implementation TestPackedExtensions

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:1 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestPackedExtensions *)parseFromData:(NSData *)data
{
  return (TestPackedExtensions *)[[[TestPackedExtensions builder] mergeFromData:data] build];
}

+ (TestPackedExtensions *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensions *)parseFromInputStream:(NSInputStream *)input
{
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromInputStream:input] build];
}

+ (TestPackedExtensions *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestPackedExtensions builder] mergeFromCodedInputStream:input] build];
}

+ (TestPackedExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestPackedExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensions_Builder *)builder
{
  return [[TestPackedExtensions_Builder alloc] init];
}

+ (TestPackedExtensions_Builder *)builderWithPrototype:(TestPackedExtensions *)prototype
{
  return [[TestPackedExtensions builder] mergeFrom:prototype];
}

- (TestPackedExtensions_Builder *)builder
{
  return [TestPackedExtensions builder];
}

- (TestPackedExtensions_Builder *)toBuilder
{
  return [TestPackedExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:1 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedExtensions class]]) {
    return NO;
  }
  TestPackedExtensions *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestPackedExtensions_Builder()

@property (strong) TestPackedExtensions *result;

@end


@implementation TestPackedExtensions_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestPackedExtensions alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestPackedExtensions_Builder *)clear
{
  self.result = [[TestPackedExtensions alloc] init];
  return self;
}

- (TestPackedExtensions_Builder *)clone
{
  return [TestPackedExtensions builderWithPrototype:_result];
}

- (TestPackedExtensions *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestPackedExtensions *)buildPartial
{
  TestPackedExtensions *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestPackedExtensions_Builder *)mergeFrom:(TestPackedExtensions *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestPackedExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestPackedExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestDynamicExtensions ()


@end


@implementation TestDynamicExtensions

- (BOOL)hasScalarExtension
{
  return _hasScalarExtension;
}

- (void)setScalarExtension:(uint32_t)value
{
  _hasScalarExtension = YES;
  _scalarExtension = value;
}

- (void)clearScalarExtension
{
  _hasScalarExtension = NO;
  _scalarExtension = 0;
}

- (BOOL)hasEnumExtension
{
  return _hasEnumExtension;
}

- (void)setEnumExtension:(ForeignEnum)value
{
  _hasEnumExtension = YES;
  _enumExtension = value;
}

- (void)clearEnumExtension
{
  _hasEnumExtension = NO;
  _enumExtension = ForeignEnumForeignFoo;
}

- (BOOL)hasDynamicEnumExtension
{
  return _hasDynamicEnumExtension;
}

- (void)setDynamicEnumExtension:(TestDynamicExtensions_DynamicEnumType)value
{
  _hasDynamicEnumExtension = YES;
  _dynamicEnumExtension = value;
}

- (void)clearDynamicEnumExtension
{
  _hasDynamicEnumExtension = NO;
  _dynamicEnumExtension = TestDynamicExtensions_DynamicEnumTypeDynamicFoo;
}

- (BOOL)hasMessageExtension
{
  return _hasMessageExtension;
}

- (void)setMessageExtension:(ForeignMessage *)value
{
  _hasMessageExtension = value != nil;
  _messageExtension = value;
}

- (void)clearMessageExtension
{
  _hasMessageExtension = NO;
  _messageExtension = nil;
}

- (BOOL)hasDynamicMessageExtension
{
  return _hasDynamicMessageExtension;
}

- (void)setDynamicMessageExtension:(TestDynamicExtensions_DynamicMessageType *)value
{
  _hasDynamicMessageExtension = value != nil;
  _dynamicMessageExtension = value;
}

- (void)clearDynamicMessageExtension
{
  _hasDynamicMessageExtension = NO;
  _dynamicMessageExtension = nil;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _scalarExtension = 0;
    _enumExtension = ForeignEnumForeignFoo;
    _dynamicEnumExtension = TestDynamicExtensions_DynamicEnumTypeDynamicFoo;
    _messageExtension = nil;
    _dynamicMessageExtension = nil;
  }
  return self;
}

- (NSString *)repeatedExtensionAtIndex:(NSUInteger)index
{
  return _repeatedExtension[index];
}

- (void)addRepeatedExtension:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedExtension == nil) {
    _repeatedExtension = [[NSMutableArray alloc] init];
  }
  [_repeatedExtension addObject:value];
}

- (void)addRepeatedExtensionArray:(NSArray *)array
{
  if (_repeatedExtension == nil) {
    _repeatedExtension = [[NSMutableArray alloc] init];
  }
  [_repeatedExtension addObjectsFromArray:array];
}

- (void)setRepeatedExtensionArray:(NSArray *)array
{
  _repeatedExtension = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedExtension
{
  _repeatedExtension = nil;
}

- (int32_t)packedExtensionAtIndex:(NSUInteger)index
{
  return [_packedExtension int32AtIndex:index];
}
- (void)addPackedExtension:(int32_t)value
{
  if (_packedExtension == nil) {
    _packedExtension = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedExtension addInt32:value];
}

- (void)addPackedExtensionArray:(NSArray *)array
{
  if (_packedExtension == nil) {
    _packedExtension = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedExtension appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedExtensionArray:(NSArray *)array
{
  _packedExtension = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedExtensionValues:(const int32_t *)values count:(NSUInteger)count
{
  _packedExtension = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedExtension
{
  _packedExtension = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasScalarExtension) {
    [output writeFixed32:2000 value:self.scalarExtension];
  }
  if (self.hasEnumExtension) {
    [output writeEnum:2001 value:self.enumExtension];
  }
  if (self.hasDynamicEnumExtension) {
    [output writeEnum:2002 value:self.dynamicEnumExtension];
  }
  if (self.hasMessageExtension) {
    [output writeMessage:2003 value:self.messageExtension];
  }
  if (self.hasDynamicMessageExtension) {
    [output writeMessage:2004 value:self.dynamicMessageExtension];
  }
  const NSUInteger repeatedExtensionCount = self.repeatedExtension.count;
  if (repeatedExtensionCount > 0) {
    NSMutableArray *values = self.repeatedExtension;
    for (NSUInteger i = 0; i < repeatedExtensionCount; ++i) {
      [output writeString:2005 value:values[i]];
    }
  }
  const NSUInteger packedExtensionCount = self.packedExtension.count;
  if (packedExtensionCount > 0) {
    const int32_t *values = (const int32_t *)self.packedExtension.data;
    [output writeRawVarint32:16050];
    [output writeRawVarint32:_packedExtensionMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedExtensionCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasScalarExtension) {
    size_ += computeFixed32Size(2000, self.scalarExtension);
  }
  if (self.hasEnumExtension) {
    size_ += computeEnumSize(2001, self.enumExtension);
  }
  if (self.hasDynamicEnumExtension) {
    size_ += computeEnumSize(2002, self.dynamicEnumExtension);
  }
  if (self.hasMessageExtension) {
    size_ += computeMessageSize(2003, self.messageExtension);
  }
  if (self.hasDynamicMessageExtension) {
    size_ += computeMessageSize(2004, self.dynamicMessageExtension);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedExtension.count;
    NSMutableArray *values = self.repeatedExtension;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedExtension.count;
    const int32_t *values = (const int32_t *)self.packedExtension.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedExtensionMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDynamicExtensions *)parseFromData:(NSData *)data
{
  return (TestDynamicExtensions *)[[[TestDynamicExtensions builder] mergeFromData:data] build];
}

+ (TestDynamicExtensions *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromInputStream:input] build];
}

+ (TestDynamicExtensions *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDynamicExtensions builder] mergeFromCodedInputStream:input] build];
}

+ (TestDynamicExtensions *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDynamicExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions_Builder *)builder
{
  return [[TestDynamicExtensions_Builder alloc] init];
}

+ (TestDynamicExtensions_Builder *)builderWithPrototype:(TestDynamicExtensions *)prototype
{
  return [[TestDynamicExtensions builder] mergeFrom:prototype];
}

- (TestDynamicExtensions_Builder *)builder
{
  return [TestDynamicExtensions builder];
}

- (TestDynamicExtensions_Builder *)toBuilder
{
  return [TestDynamicExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasScalarExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scalarExtension", @(self.scalarExtension)];
  }
  if (self.hasEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enumExtension", ForeignEnumToString((ForeignEnum)self.enumExtension)];
  }
  if (self.hasDynamicEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicEnumExtension", TestDynamicExtensions_DynamicEnumTypeToString((TestDynamicExtensions_DynamicEnumType)self.dynamicEnumExtension)];
  }
  if (self.hasMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageExtension"];
    [self.messageExtension writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDynamicMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"dynamicMessageExtension"];
    [self.dynamicMessageExtension writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSString * element in self.repeatedExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedExtension", element];
  }
  for (NSUInteger i = 0, listCount = self.packedExtension.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedExtension", @([self.packedExtension int32AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensions class]]) {
    return NO;
  }
  TestDynamicExtensions *otherMessage = other;
  return
    (self.hasScalarExtension == otherMessage.hasScalarExtension && (!self.hasScalarExtension || self.scalarExtension == otherMessage.scalarExtension)) &&
    (self.hasEnumExtension == otherMessage.hasEnumExtension && (!self.hasEnumExtension || self.enumExtension == otherMessage.enumExtension)) &&
    (self.hasDynamicEnumExtension == otherMessage.hasDynamicEnumExtension && (!self.hasDynamicEnumExtension || self.dynamicEnumExtension == otherMessage.dynamicEnumExtension)) &&
    (self.hasMessageExtension == otherMessage.hasMessageExtension && (!self.hasMessageExtension || [self.messageExtension isEqual:otherMessage.messageExtension])) &&
    (self.hasDynamicMessageExtension == otherMessage.hasDynamicMessageExtension && (!self.hasDynamicMessageExtension || [self.dynamicMessageExtension isEqual:otherMessage.dynamicMessageExtension])) &&
    [self.repeatedExtension isEqualToArray:otherMessage.repeatedExtension] &&
    [self.packedExtension isEqualToArray:otherMessage.packedExtension] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasScalarExtension) {
    hashCode = hashCode * 31 + [@(self.scalarExtension) hash];
  }
  if (self.hasEnumExtension) {
    hashCode = hashCode * 31 + self.enumExtension;
  }
  if (self.hasDynamicEnumExtension) {
    hashCode = hashCode * 31 + self.dynamicEnumExtension;
  }
  if (self.hasMessageExtension) {
    hashCode = hashCode * 31 + [self.messageExtension hash];
  }
  if (self.hasDynamicMessageExtension) {
    hashCode = hashCode * 31 + [self.dynamicMessageExtension hash];
  }
  for (NSString * element in self.repeatedExtension) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSUInteger i = 0, listCount = self.packedExtension.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedExtension int32AtIndex:i]) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


BOOL TestDynamicExtensions_DynamicEnumTypeIsValidValue(TestDynamicExtensions_DynamicEnumType value)
{
  return YES;
}

NSString *TestDynamicExtensions_DynamicEnumTypeToString(TestDynamicExtensions_DynamicEnumType value)
{
  switch (value) {
    case TestDynamicExtensions_DynamicEnumTypeDynamicFoo:
      return @"DYNAMIC_FOO";
    case TestDynamicExtensions_DynamicEnumTypeDynamicBar:
      return @"DYNAMIC_BAR";
    case TestDynamicExtensions_DynamicEnumTypeDynamicBaz:
      return @"DYNAMIC_BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


@interface TestDynamicExtensions_DynamicMessageType ()


@end


@implementation TestDynamicExtensions_DynamicMessageType

- (BOOL)hasDynamicField
{
  return _hasDynamicField;
}

- (void)setDynamicField:(int32_t)value
{
  _hasDynamicField = YES;
  _dynamicField = value;
}

- (void)clearDynamicField
{
  _hasDynamicField = NO;
  _dynamicField = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _dynamicField = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasDynamicField) {
    [output writeInt32:2100 value:self.dynamicField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasDynamicField) {
    size_ += computeInt32Size(2100, self.dynamicField);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromData:(NSData *)data
{
  return (TestDynamicExtensions_DynamicMessageType *)[[[TestDynamicExtensions_DynamicMessageType builder] mergeFromData:data] build];
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDynamicExtensions_DynamicMessageType*)[[[TestDynamicExtensions_DynamicMessageType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDynamicExtensions_DynamicMessageType*)[[[TestDynamicExtensions_DynamicMessageType builder] mergeFromInputStream:input] build];
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDynamicExtensions_DynamicMessageType*)[[[TestDynamicExtensions_DynamicMessageType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDynamicExtensions_DynamicMessageType builder] mergeFromCodedInputStream:input] build];
}

+ (TestDynamicExtensions_DynamicMessageType *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDynamicExtensions_DynamicMessageType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDynamicExtensions_DynamicMessageType_Builder *)builder
{
  return [[TestDynamicExtensions_DynamicMessageType_Builder alloc] init];
}

+ (TestDynamicExtensions_DynamicMessageType_Builder *)builderWithPrototype:(TestDynamicExtensions_DynamicMessageType *)prototype
{
  return [[TestDynamicExtensions_DynamicMessageType builder] mergeFrom:prototype];
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)builder
{
  return [TestDynamicExtensions_DynamicMessageType builder];
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)toBuilder
{
  return [TestDynamicExtensions_DynamicMessageType builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasDynamicField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicField", @(self.dynamicField)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensions_DynamicMessageType class]]) {
    return NO;
  }
  TestDynamicExtensions_DynamicMessageType *otherMessage = other;
  return
    (self.hasDynamicField == otherMessage.hasDynamicField && (!self.hasDynamicField || self.dynamicField == otherMessage.dynamicField)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasDynamicField) {
    hashCode = hashCode * 31 + [@(self.dynamicField) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDynamicExtensions_DynamicMessageType_Builder()

@property (strong) TestDynamicExtensions_DynamicMessageType *result;

@end


@implementation TestDynamicExtensions_DynamicMessageType_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDynamicExtensions_DynamicMessageType alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)clear
{
  self.result = [[TestDynamicExtensions_DynamicMessageType alloc] init];
  return self;
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)clone
{
  return [TestDynamicExtensions_DynamicMessageType builderWithPrototype:_result];
}

- (TestDynamicExtensions_DynamicMessageType *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDynamicExtensions_DynamicMessageType *)buildPartial
{
  TestDynamicExtensions_DynamicMessageType *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)mergeFrom:(TestDynamicExtensions_DynamicMessageType *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasDynamicField) {
    [self setDynamicField:other.dynamicField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDynamicExtensions_DynamicMessageType_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16800: {
        [self setDynamicField:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasDynamicField
{
  return _result.hasDynamicField;
}

- (int32_t)dynamicField
{
  return _result.dynamicField;
}

- (TestDynamicExtensions_DynamicMessageType_Builder*)setDynamicField:(int32_t)value
{
  _result.dynamicField = value;
  return self;
}

- (TestDynamicExtensions_DynamicMessageType_Builder*)clearDynamicField
{
  [_result clearDynamicField];
  return self;
}

@end


@interface TestDynamicExtensions_Builder()

@property (strong) TestDynamicExtensions *result;

@end


@implementation TestDynamicExtensions_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDynamicExtensions alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDynamicExtensions_Builder *)clear
{
  self.result = [[TestDynamicExtensions alloc] init];
  return self;
}

- (TestDynamicExtensions_Builder *)clone
{
  return [TestDynamicExtensions builderWithPrototype:_result];
}

- (TestDynamicExtensions *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDynamicExtensions *)buildPartial
{
  TestDynamicExtensions *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDynamicExtensions_Builder *)mergeFrom:(TestDynamicExtensions *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasScalarExtension) {
    [self setScalarExtension:other.scalarExtension];
  }
  if (other.hasEnumExtension) {
    [self setEnumExtension:other.enumExtension];
  }
  if (other.hasDynamicEnumExtension) {
    [self setDynamicEnumExtension:other.dynamicEnumExtension];
  }
  if (other.hasMessageExtension) {
    [self mergeMessageExtension:other.messageExtension];
  }
  if (other.hasDynamicMessageExtension) {
    [self mergeDynamicMessageExtension:other.dynamicMessageExtension];
  }
  if (other.repeatedExtension.count > 0) {
    if (_result.repeatedExtension == nil) {
      _result.repeatedExtension = [[NSMutableArray alloc] initWithArray:other.repeatedExtension];
    } else {
      [_result.repeatedExtension addObjectsFromArray:other.repeatedExtension];
    }
  }
  if (other.packedExtension.count > 0) {
    if (_result.packedExtension == nil) {
      _result.packedExtension = [other.packedExtension copy];
    } else {
      [_result.packedExtension appendArray:other.packedExtension];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDynamicExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDynamicExtensions_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16005: {
        [self setScalarExtension:[input readFixed32]];
        break;
      }
      case 16008: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue((ForeignEnum)value)) {
          [self setEnumExtension:(ForeignEnum)value];
        } else {
          [unknownFields mergeVarintField:2001 value:value];
        }
        break;
      }
      case 16016: {
        int32_t value = [input readEnum];
        if (TestDynamicExtensions_DynamicEnumTypeIsValidValue((TestDynamicExtensions_DynamicEnumType)value)) {
          [self setDynamicEnumExtension:(TestDynamicExtensions_DynamicEnumType)value];
        } else {
          [unknownFields mergeVarintField:2002 value:value];
        }
        break;
      }
      case 16026: {
        ForeignMessage_Builder *subBuilder = [ForeignMessage builder];
        if (self.hasMessageExtension) {
          [subBuilder mergeFrom:self.messageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16034: {
        TestDynamicExtensions_DynamicMessageType_Builder *subBuilder = [TestDynamicExtensions_DynamicMessageType builder];
        if (self.hasDynamicMessageExtension) {
          [subBuilder mergeFrom:self.dynamicMessageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDynamicMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16042: {
        [self addRepeatedExtension:[input readString]];
        break;
      }
      case 16050: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedExtension == nil) {
          _result.packedExtension = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedExtension addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}

- (BOOL)hasScalarExtension
{
  return _result.hasScalarExtension;
}

- (uint32_t)scalarExtension
{
  return _result.scalarExtension;
}

- (TestDynamicExtensions_Builder*)setScalarExtension:(uint32_t)value
{
  _result.scalarExtension = value;
  return self;
}

- (TestDynamicExtensions_Builder*)clearScalarExtension
{
  [_result clearScalarExtension];
  return self;
}

- (BOOL)hasEnumExtension
{
  return _result.hasEnumExtension;
}

- (ForeignEnum)enumExtension
{
  return _result.enumExtension;
}

- (TestDynamicExtensions_Builder *)setEnumExtension:(ForeignEnum)value
{
  _result.enumExtension = value;
  return self;
}

- (TestDynamicExtensions_Builder *)clearEnumExtension
{
  [_result clearEnumExtension];
  return self;
}

- (BOOL)hasDynamicEnumExtension
{
  return _result.hasDynamicEnumExtension;
}

- (TestDynamicExtensions_DynamicEnumType)dynamicEnumExtension
{
  return _result.dynamicEnumExtension;
}

- (TestDynamicExtensions_Builder *)setDynamicEnumExtension:(TestDynamicExtensions_DynamicEnumType)value
{
  _result.dynamicEnumExtension = value;
  return self;
}

- (TestDynamicExtensions_Builder *)clearDynamicEnumExtension
{
  [_result clearDynamicEnumExtension];
  return self;
}

- (BOOL)hasMessageExtension
{
  return _result.hasMessageExtension;
}

- (ForeignMessage *)messageExtension
{
  return _result.messageExtension;
}

- (TestDynamicExtensions_Builder *)setMessageExtension:(ForeignMessage *)value
{
  _result.messageExtension = value;
  return self;
}

- (TestDynamicExtensions_Builder *)setMessageExtensionBuilder:(ForeignMessage_Builder *)builderForValue
{
  return [self setMessageExtension:[builderForValue build]];
}

- (TestDynamicExtensions_Builder *)mergeMessageExtension:(ForeignMessage *)value
{
  if (_result.hasMessageExtension && _result.messageExtension != nil) {
    _result.messageExtension = [[[ForeignMessage builderWithPrototype:_result.messageExtension] mergeFrom:value] buildPartial];
  } else {
    _result.messageExtension = value;
  }
  return self;
}

- (TestDynamicExtensions_Builder *)clearMessageExtension
{
  [_result clearMessageExtension];
  return self;
}

- (BOOL)hasDynamicMessageExtension
{
  return _result.hasDynamicMessageExtension;
}

- (TestDynamicExtensions_DynamicMessageType *)dynamicMessageExtension
{
  return _result.dynamicMessageExtension;
}

- (TestDynamicExtensions_Builder *)setDynamicMessageExtension:(TestDynamicExtensions_DynamicMessageType *)value
{
  _result.dynamicMessageExtension = value;
  return self;
}

- (TestDynamicExtensions_Builder *)setDynamicMessageExtensionBuilder:(TestDynamicExtensions_DynamicMessageType_Builder *)builderForValue
{
  return [self setDynamicMessageExtension:[builderForValue build]];
}

- (TestDynamicExtensions_Builder *)mergeDynamicMessageExtension:(TestDynamicExtensions_DynamicMessageType *)value
{
  if (_result.hasDynamicMessageExtension && _result.dynamicMessageExtension != nil) {
    _result.dynamicMessageExtension = [[[TestDynamicExtensions_DynamicMessageType builderWithPrototype:_result.dynamicMessageExtension] mergeFrom:value] buildPartial];
  } else {
    _result.dynamicMessageExtension = value;
  }
  return self;
}

- (TestDynamicExtensions_Builder *)clearDynamicMessageExtension
{
  [_result clearDynamicMessageExtension];
  return self;
}

- (NSMutableArray *)repeatedExtension
{
  return _result.repeatedExtension;
}

- (NSString *)repeatedExtensionAtIndex:(NSUInteger)index
{
  return [_result repeatedExtensionAtIndex:index];
}

- (TestDynamicExtensions_Builder *)addRepeatedExtension:(NSString *)value
{
  [_result addRepeatedExtension:value];
  return self;
}

- (TestDynamicExtensions_Builder *)setRepeatedExtensionArray:(NSArray *)array
{
  [_result setRepeatedExtensionArray:array];
  return self;
}

- (TestDynamicExtensions_Builder *)clearRepeatedExtension
{
  [_result clearRepeatedExtension];
  return self;
}

- (PBAppendableArray *)packedExtension
{
  return _result.packedExtension;
}

- (int32_t)packedExtensionAtIndex:(NSUInteger)index
{
  return [_result packedExtensionAtIndex:index];
}

- (TestDynamicExtensions_Builder *)addPackedExtension:(int32_t)value
{
  [_result addPackedExtension:value];
  return self;
}

- (TestDynamicExtensions_Builder *)setPackedExtensionArray:(NSArray *)array
{
  [_result setPackedExtensionArray:array];
  return self;
}

- (TestDynamicExtensions_Builder *)setPackedExtensionValues:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedExtensionValues:values count:count];
  return self;
}

- (TestDynamicExtensions_Builder *)clearPackedExtension
{
  [_result clearPackedExtension];
  return self;
}

@end


@interface TestRepeatedScalarDifferentTagSizes ()


@end


@implementation TestRepeatedScalarDifferentTagSizes

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_repeatedFixed32 uint32AtIndex:index];
}
- (void)addRepeatedFixed32:(uint32_t)value
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 addUint32:value];
}

- (void)addRepeatedFixed32Array:(NSArray *)array
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setRepeatedFixed32Array:(NSArray *)array
{
  _repeatedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _repeatedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearRepeatedFixed32
{
  _repeatedFixed32 = nil;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_repeatedInt32 int32AtIndex:index];
}
- (void)addRepeatedInt32:(int32_t)value
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 addInt32:value];
}

- (void)addRepeatedInt32Array:(NSArray *)array
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedInt32Array:(NSArray *)array
{
  _repeatedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedInt32
{
  _repeatedInt32 = nil;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_repeatedFixed64 uint64AtIndex:index];
}
- (void)addRepeatedFixed64:(uint64_t)value
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 addUint64:value];
}

- (void)addRepeatedFixed64Array:(NSArray *)array
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedFixed64Array:(NSArray *)array
{
  _repeatedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedFixed64
{
  _repeatedFixed64 = nil;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_repeatedInt64 int64AtIndex:index];
}
- (void)addRepeatedInt64:(int64_t)value
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 addInt64:value];
}

- (void)addRepeatedInt64Array:(NSArray *)array
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedInt64Array:(NSArray *)array
{
  _repeatedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedInt64
{
  _repeatedInt64 = nil;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_repeatedFloat floatAtIndex:index];
}
- (void)addRepeatedFloat:(Float32)value
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat addFloat:value];
}

- (void)addRepeatedFloatArray:(NSArray *)array
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setRepeatedFloatArray:(NSArray *)array
{
  _repeatedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _repeatedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearRepeatedFloat
{
  _repeatedFloat = nil;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_repeatedUint64 uint64AtIndex:index];
}
- (void)addRepeatedUint64:(uint64_t)value
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 addUint64:value];
}

- (void)addRepeatedUint64Array:(NSArray *)array
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedUint64Array:(NSArray *)array
{
  _repeatedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedUint64
{
  _repeatedUint64 = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  const NSUInteger repeatedFixed32Count = self.repeatedFixed32.count;
  if (repeatedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedFixed32.data;
    for (NSUInteger i = 0; i < repeatedFixed32Count; ++i) {
      [output writeFixed32:12 value:values[i]];
    }
  }
  const NSUInteger repeatedInt32Count = self.repeatedInt32.count;
  if (repeatedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < repeatedInt32Count; ++i) {
      [output writeInt32:13 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64Count = self.repeatedFixed64.count;
  if (repeatedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedFixed64.data;
    for (NSUInteger i = 0; i < repeatedFixed64Count; ++i) {
      [output writeFixed64:2046 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64Count = self.repeatedInt64.count;
  if (repeatedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < repeatedInt64Count; ++i) {
      [output writeInt64:2047 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatCount = self.repeatedFloat.count;
  if (repeatedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloat.data;
    for (NSUInteger i = 0; i < repeatedFloatCount; ++i) {
      [output writeFloat:262142 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64Count = self.repeatedUint64.count;
  if (repeatedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < repeatedUint64Count; ++i) {
      [output writeUInt64:262143 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt32.count;
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt64.count;
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 3 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedUint64.count;
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 3 * count;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromData:(NSData *)data
{
  return (TestRepeatedScalarDifferentTagSizes *)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromData:data] build];
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromInputStream:(NSInputStream *)input
{
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromInputStream:input] build];
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestRepeatedScalarDifferentTagSizes builder] mergeFromCodedInputStream:input] build];
}

+ (TestRepeatedScalarDifferentTagSizes *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestRepeatedScalarDifferentTagSizes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestRepeatedScalarDifferentTagSizes_Builder *)builder
{
  return [[TestRepeatedScalarDifferentTagSizes_Builder alloc] init];
}

+ (TestRepeatedScalarDifferentTagSizes_Builder *)builderWithPrototype:(TestRepeatedScalarDifferentTagSizes *)prototype
{
  return [[TestRepeatedScalarDifferentTagSizes builder] mergeFrom:prototype];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)builder
{
  return [TestRepeatedScalarDifferentTagSizes builder];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)toBuilder
{
  return [TestRepeatedScalarDifferentTagSizes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", @([self.repeatedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", @([self.repeatedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", @([self.repeatedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", @([self.repeatedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", @([self.repeatedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", @([self.repeatedUint64 uint64AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRepeatedScalarDifferentTagSizes class]]) {
    return NO;
  }
  TestRepeatedScalarDifferentTagSizes *otherMessage = other;
  return
    [self.repeatedFixed32 isEqualToArray:otherMessage.repeatedFixed32] &&
    [self.repeatedInt32 isEqualToArray:otherMessage.repeatedInt32] &&
    [self.repeatedFixed64 isEqualToArray:otherMessage.repeatedFixed64] &&
    [self.repeatedInt64 isEqualToArray:otherMessage.repeatedInt64] &&
    [self.repeatedFloat isEqualToArray:otherMessage.repeatedFloat] &&
    [self.repeatedUint64 isEqualToArray:otherMessage.repeatedUint64] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedUint64 uint64AtIndex:i]) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestRepeatedScalarDifferentTagSizes_Builder()

@property (strong) TestRepeatedScalarDifferentTagSizes *result;

@end


@implementation TestRepeatedScalarDifferentTagSizes_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clear
{
  self.result = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clone
{
  return [TestRepeatedScalarDifferentTagSizes builderWithPrototype:_result];
}

- (TestRepeatedScalarDifferentTagSizes *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestRepeatedScalarDifferentTagSizes *)buildPartial
{
  TestRepeatedScalarDifferentTagSizes *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)mergeFrom:(TestRepeatedScalarDifferentTagSizes *)other
{
  if (other == nil) {
    return self;
  }
  if (other.repeatedFixed32.count > 0) {
    if (_result.repeatedFixed32 == nil) {
      _result.repeatedFixed32 = [other.repeatedFixed32 copy];
    } else {
      [_result.repeatedFixed32 appendArray:other.repeatedFixed32];
    }
  }
  if (other.repeatedInt32.count > 0) {
    if (_result.repeatedInt32 == nil) {
      _result.repeatedInt32 = [other.repeatedInt32 copy];
    } else {
      [_result.repeatedInt32 appendArray:other.repeatedInt32];
    }
  }
  if (other.repeatedFixed64.count > 0) {
    if (_result.repeatedFixed64 == nil) {
      _result.repeatedFixed64 = [other.repeatedFixed64 copy];
    } else {
      [_result.repeatedFixed64 appendArray:other.repeatedFixed64];
    }
  }
  if (other.repeatedInt64.count > 0) {
    if (_result.repeatedInt64 == nil) {
      _result.repeatedInt64 = [other.repeatedInt64 copy];
    } else {
      [_result.repeatedInt64 appendArray:other.repeatedInt64];
    }
  }
  if (other.repeatedFloat.count > 0) {
    if (_result.repeatedFloat == nil) {
      _result.repeatedFloat = [other.repeatedFloat copy];
    } else {
      [_result.repeatedFloat appendArray:other.repeatedFloat];
    }
  }
  if (other.repeatedUint64.count > 0) {
    if (_result.repeatedUint64 == nil) {
      _result.repeatedUint64 = [other.repeatedUint64 copy];
    } else {
      [_result.repeatedUint64 appendArray:other.repeatedUint64];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 101: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 104: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 16369: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 16376: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 2097141: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 2097144: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
    }
  }
}

- (PBAppendableArray *)repeatedFixed32
{
  return _result.repeatedFixed32;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed32AtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedFixed32:(uint32_t)value
{
  [_result addRepeatedFixed32:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFixed32Array:(NSArray *)array
{
  [_result setRepeatedFixed32Array:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed32Values:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedFixed32
{
  [_result clearRepeatedFixed32];
  return self;
}

- (PBAppendableArray *)repeatedInt32
{
  return _result.repeatedInt32;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_result repeatedInt32AtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedInt32:(int32_t)value
{
  [_result addRepeatedInt32:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedInt32Array:(NSArray *)array
{
  [_result setRepeatedInt32Array:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt32Values:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedInt32
{
  [_result clearRepeatedInt32];
  return self;
}

- (PBAppendableArray *)repeatedFixed64
{
  return _result.repeatedFixed64;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed64AtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedFixed64:(uint64_t)value
{
  [_result addRepeatedFixed64:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFixed64Array:(NSArray *)array
{
  [_result setRepeatedFixed64Array:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed64Values:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedFixed64
{
  [_result clearRepeatedFixed64];
  return self;
}

- (PBAppendableArray *)repeatedInt64
{
  return _result.repeatedInt64;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_result repeatedInt64AtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedInt64:(int64_t)value
{
  [_result addRepeatedInt64:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedInt64Array:(NSArray *)array
{
  [_result setRepeatedInt64Array:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt64Values:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedInt64
{
  [_result clearRepeatedInt64];
  return self;
}

- (PBAppendableArray *)repeatedFloat
{
  return _result.repeatedFloat;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_result repeatedFloatAtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedFloat:(Float32)value
{
  [_result addRepeatedFloat:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFloatArray:(NSArray *)array
{
  [_result setRepeatedFloatArray:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setRepeatedFloatValues:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedFloat
{
  [_result clearRepeatedFloat];
  return self;
}

- (PBAppendableArray *)repeatedUint64
{
  return _result.repeatedUint64;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_result repeatedUint64AtIndex:index];
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)addRepeatedUint64:(uint64_t)value
{
  [_result addRepeatedUint64:value];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedUint64Array:(NSArray *)array
{
  [_result setRepeatedUint64Array:array];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedUint64Values:values count:count];
  return self;
}

- (TestRepeatedScalarDifferentTagSizes_Builder *)clearRepeatedUint64
{
  [_result clearRepeatedUint64];
  return self;
}

@end


@interface FooRequest ()


@end


@implementation FooRequest

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (FooRequest *)parseFromData:(NSData *)data
{
  return (FooRequest *)[[[FooRequest builder] mergeFromData:data] build];
}

+ (FooRequest *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (FooRequest*)[[[FooRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (FooRequest *)parseFromInputStream:(NSInputStream *)input
{
  return (FooRequest*)[[[FooRequest builder] mergeFromInputStream:input] build];
}

+ (FooRequest *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (FooRequest*)[[[FooRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FooRequest *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[FooRequest builder] mergeFromCodedInputStream:input] build];
}

+ (FooRequest *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[FooRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FooRequest_Builder *)builder
{
  return [[FooRequest_Builder alloc] init];
}

+ (FooRequest_Builder *)builderWithPrototype:(FooRequest *)prototype
{
  return [[FooRequest builder] mergeFrom:prototype];
}

- (FooRequest_Builder *)builder
{
  return [FooRequest builder];
}

- (FooRequest_Builder *)toBuilder
{
  return [FooRequest builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooRequest class]]) {
    return NO;
  }
  FooRequest *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface FooRequest_Builder()

@property (strong) FooRequest *result;

@end


@implementation FooRequest_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[FooRequest alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (FooRequest_Builder *)clear
{
  self.result = [[FooRequest alloc] init];
  return self;
}

- (FooRequest_Builder *)clone
{
  return [FooRequest builderWithPrototype:_result];
}

- (FooRequest *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (FooRequest *)buildPartial
{
  FooRequest *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (FooRequest_Builder *)mergeFrom:(FooRequest *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (FooRequest_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (FooRequest_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface FooResponse ()


@end


@implementation FooResponse

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (FooResponse *)parseFromData:(NSData *)data
{
  return (FooResponse *)[[[FooResponse builder] mergeFromData:data] build];
}

+ (FooResponse *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (FooResponse*)[[[FooResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (FooResponse *)parseFromInputStream:(NSInputStream *)input
{
  return (FooResponse*)[[[FooResponse builder] mergeFromInputStream:input] build];
}

+ (FooResponse *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (FooResponse*)[[[FooResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FooResponse *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[FooResponse builder] mergeFromCodedInputStream:input] build];
}

+ (FooResponse *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[FooResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (FooResponse_Builder *)builder
{
  return [[FooResponse_Builder alloc] init];
}

+ (FooResponse_Builder *)builderWithPrototype:(FooResponse *)prototype
{
  return [[FooResponse builder] mergeFrom:prototype];
}

- (FooResponse_Builder *)builder
{
  return [FooResponse builder];
}

- (FooResponse_Builder *)toBuilder
{
  return [FooResponse builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooResponse class]]) {
    return NO;
  }
  FooResponse *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface FooResponse_Builder()

@property (strong) FooResponse *result;

@end


@implementation FooResponse_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[FooResponse alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (FooResponse_Builder *)clear
{
  self.result = [[FooResponse alloc] init];
  return self;
}

- (FooResponse_Builder *)clone
{
  return [FooResponse builderWithPrototype:_result];
}

- (FooResponse *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (FooResponse *)buildPartial
{
  FooResponse *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (FooResponse_Builder *)mergeFrom:(FooResponse *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (FooResponse_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (FooResponse_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface BarRequest ()


@end


@implementation BarRequest

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (BarRequest *)parseFromData:(NSData *)data
{
  return (BarRequest *)[[[BarRequest builder] mergeFromData:data] build];
}

+ (BarRequest *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (BarRequest*)[[[BarRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (BarRequest *)parseFromInputStream:(NSInputStream *)input
{
  return (BarRequest*)[[[BarRequest builder] mergeFromInputStream:input] build];
}

+ (BarRequest *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (BarRequest*)[[[BarRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (BarRequest *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[BarRequest builder] mergeFromCodedInputStream:input] build];
}

+ (BarRequest *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[BarRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (BarRequest_Builder *)builder
{
  return [[BarRequest_Builder alloc] init];
}

+ (BarRequest_Builder *)builderWithPrototype:(BarRequest *)prototype
{
  return [[BarRequest builder] mergeFrom:prototype];
}

- (BarRequest_Builder *)builder
{
  return [BarRequest builder];
}

- (BarRequest_Builder *)toBuilder
{
  return [BarRequest builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarRequest class]]) {
    return NO;
  }
  BarRequest *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface BarRequest_Builder()

@property (strong) BarRequest *result;

@end


@implementation BarRequest_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[BarRequest alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (BarRequest_Builder *)clear
{
  self.result = [[BarRequest alloc] init];
  return self;
}

- (BarRequest_Builder *)clone
{
  return [BarRequest builderWithPrototype:_result];
}

- (BarRequest *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (BarRequest *)buildPartial
{
  BarRequest *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (BarRequest_Builder *)mergeFrom:(BarRequest *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (BarRequest_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (BarRequest_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface BarResponse ()


@end


@implementation BarResponse

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (BarResponse *)parseFromData:(NSData *)data
{
  return (BarResponse *)[[[BarResponse builder] mergeFromData:data] build];
}

+ (BarResponse *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (BarResponse*)[[[BarResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (BarResponse *)parseFromInputStream:(NSInputStream *)input
{
  return (BarResponse*)[[[BarResponse builder] mergeFromInputStream:input] build];
}

+ (BarResponse *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (BarResponse*)[[[BarResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (BarResponse *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[BarResponse builder] mergeFromCodedInputStream:input] build];
}

+ (BarResponse *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[BarResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (BarResponse_Builder *)builder
{
  return [[BarResponse_Builder alloc] init];
}

+ (BarResponse_Builder *)builderWithPrototype:(BarResponse *)prototype
{
  return [[BarResponse builder] mergeFrom:prototype];
}

- (BarResponse_Builder *)builder
{
  return [BarResponse builder];
}

- (BarResponse_Builder *)toBuilder
{
  return [BarResponse builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarResponse class]]) {
    return NO;
  }
  BarResponse *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface BarResponse_Builder()

@property (strong) BarResponse *result;

@end


@implementation BarResponse_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[BarResponse alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (BarResponse_Builder *)clear
{
  self.result = [[BarResponse alloc] init];
  return self;
}

- (BarResponse_Builder *)clone
{
  return [BarResponse builderWithPrototype:_result];
}

- (BarResponse *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (BarResponse *)buildPartial
{
  BarResponse *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (BarResponse_Builder *)mergeFrom:(BarResponse *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (BarResponse_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (BarResponse_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


