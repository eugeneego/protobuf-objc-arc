// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Unittest_lite.pb.h"


@implementation UnittestLiteRoot

static id<PBExtensionField> UnittestLiteRoot_optionalInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalGroupExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalNestedMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalForeignMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalImportMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedGroupExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedNestedMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedForeignMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedImportMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedEnumExtensionLite = nil;
static id<PBExtensionField> TestNestedExtensionLite_nestedExtension = nil;
static PBExtensionRegistry *extensionRegistry = nil;

+ (PBExtensionRegistry *)extensionRegistry
{
  return extensionRegistry;
}

+ (void)initialize {
  if (self == [UnittestLiteRoot class]) {
    UnittestLiteRoot_optionalInt32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:1
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalInt64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:2
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalUint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:3
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalUint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:4
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:5
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:6
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:7
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:8
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSfixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:9
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSfixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:10
      defaultValue:@(0L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFloatExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:11
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalDoubleExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:12
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalBoolExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:13
      defaultValue:@(NO)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalStringExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:14
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalBytesExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:15
      defaultValue:nil
      messageOrGroupClass:[NSData class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalGroupExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeGroup
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:16
      defaultValue:nil
      messageOrGroupClass:[OptionalGroup_extension_lite class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalNestedMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:18
      defaultValue:nil
      messageOrGroupClass:[TestAllTypesLite_NestedMessage class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalForeignMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:19
      defaultValue:nil
      messageOrGroupClass:[ForeignMessageLite class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalImportMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:20
      defaultValue:nil
      messageOrGroupClass:[ImportMessageLite class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalNestedEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:21
      defaultValue:@(TestAllTypesLite_NestedEnumFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalForeignEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:22
      defaultValue:@(ForeignEnumLiteForeignLiteFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalImportEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:23
      defaultValue:@(ImportEnumLiteImportLiteFoo)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalStringPieceExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:24
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalCordExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:25
      defaultValue:nil
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedInt32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:31
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedInt64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:32
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedUint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:33
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedUint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:34
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:35
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:36
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:37
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:38
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSfixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:39
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSfixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:40
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFloatExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:41
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedDoubleExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:42
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedBoolExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:43
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedStringExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:44
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedBytesExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:45
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSData class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedGroupExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeGroup
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:46
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[RepeatedGroup_extension_lite class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedNestedMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:48
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[TestAllTypesLite_NestedMessage class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedForeignMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:49
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[ForeignMessageLite class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedImportMessageExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeMessage
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:50
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[ImportMessageLite class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedNestedEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:51
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedForeignEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:52
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedImportEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:53
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedStringPieceExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:54
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedCordExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:55
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSString class]
      isRepeated:YES
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultInt32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:61
      defaultValue:@(41)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultInt64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:62
      defaultValue:@(42L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultUint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:63
      defaultValue:@(43)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultUint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:64
      defaultValue:@(44L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:65
      defaultValue:@(-45)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:66
      defaultValue:@(46L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:67
      defaultValue:@(47)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:68
      defaultValue:@(48L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSfixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:69
      defaultValue:@(49)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSfixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:70
      defaultValue:@(-50L)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFloatExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:71
      defaultValue:@(51.5)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultDoubleExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:72
      defaultValue:@(52000)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultBoolExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:73
      defaultValue:@(YES)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultStringExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:74
      defaultValue:@"hello"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultBytesExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBytes
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:75
      defaultValue:[NSData dataWithBytes:"world" length:5]
      messageOrGroupClass:[NSData class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultNestedEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:81
      defaultValue:@(TestAllTypesLite_NestedEnumBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultForeignEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:82
      defaultValue:@(ForeignEnumLiteForeignLiteBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultImportEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:83
      defaultValue:@(ImportEnumLiteImportLiteBar)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultStringPieceExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:84
      defaultValue:@"abc"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultCordExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeString
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:85
      defaultValue:@"123"
      messageOrGroupClass:[NSString class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedInt32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:90
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedInt64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt64
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:91
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedUint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt32
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:92
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedUint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeUInt64
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:93
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSint32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt32
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:94
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSint64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSInt64
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:95
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed32
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:96
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFixed64
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:97
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSfixed32ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed32
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:98
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSfixed64ExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeSFixed64
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:99
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFloatExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeFloat
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:100
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedDoubleExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeDouble
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:101
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedBoolExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeBool
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:102
      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedEnumExtensionLite = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeEnum
      extendedClass:[TestPackedExtensionsLite class]
      fieldNumber:103
      defaultValue:[[NSArray alloc] init]
      messageOrGroupClass:[NSNumber class]
      isRepeated:YES
      isPacked:YES
      isMessageSetWireFormat:NO];
    TestNestedExtensionLite_nestedExtension = [PBConcreteExtensionField
      extensionWithType:PBExtensionTypeInt32
      extendedClass:[TestAllExtensionsLite class]
      fieldNumber:12345
      defaultValue:@(0)
      messageOrGroupClass:[NSNumber class]
      isRepeated:NO
      isPacked:NO
      isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry *registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UnittestImportLiteRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}

+ (void)registerAllExtensions:(PBMutableExtensionRegistry *)registry
{
  [registry addExtension:UnittestLiteRoot_optionalInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalGroupExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalNestedMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalForeignMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalImportMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedGroupExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedNestedMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedForeignMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedImportMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedEnumExtensionLite];
  [registry addExtension:TestNestedExtensionLite_nestedExtension];
}

+ (id<PBExtensionField>)optionalInt32ExtensionLite
{
  return UnittestLiteRoot_optionalInt32ExtensionLite;
}
+ (id<PBExtensionField>)optionalInt64ExtensionLite
{
  return UnittestLiteRoot_optionalInt64ExtensionLite;
}
+ (id<PBExtensionField>)optionalUint32ExtensionLite
{
  return UnittestLiteRoot_optionalUint32ExtensionLite;
}
+ (id<PBExtensionField>)optionalUint64ExtensionLite
{
  return UnittestLiteRoot_optionalUint64ExtensionLite;
}
+ (id<PBExtensionField>)optionalSint32ExtensionLite
{
  return UnittestLiteRoot_optionalSint32ExtensionLite;
}
+ (id<PBExtensionField>)optionalSint64ExtensionLite
{
  return UnittestLiteRoot_optionalSint64ExtensionLite;
}
+ (id<PBExtensionField>)optionalFixed32ExtensionLite
{
  return UnittestLiteRoot_optionalFixed32ExtensionLite;
}
+ (id<PBExtensionField>)optionalFixed64ExtensionLite
{
  return UnittestLiteRoot_optionalFixed64ExtensionLite;
}
+ (id<PBExtensionField>)optionalSfixed32ExtensionLite
{
  return UnittestLiteRoot_optionalSfixed32ExtensionLite;
}
+ (id<PBExtensionField>)optionalSfixed64ExtensionLite
{
  return UnittestLiteRoot_optionalSfixed64ExtensionLite;
}
+ (id<PBExtensionField>)optionalFloatExtensionLite
{
  return UnittestLiteRoot_optionalFloatExtensionLite;
}
+ (id<PBExtensionField>)optionalDoubleExtensionLite
{
  return UnittestLiteRoot_optionalDoubleExtensionLite;
}
+ (id<PBExtensionField>)optionalBoolExtensionLite
{
  return UnittestLiteRoot_optionalBoolExtensionLite;
}
+ (id<PBExtensionField>)optionalStringExtensionLite
{
  return UnittestLiteRoot_optionalStringExtensionLite;
}
+ (id<PBExtensionField>)optionalBytesExtensionLite
{
  return UnittestLiteRoot_optionalBytesExtensionLite;
}
+ (id<PBExtensionField>)optionalGroupExtensionLite
{
  return UnittestLiteRoot_optionalGroupExtensionLite;
}
+ (id<PBExtensionField>)optionalNestedMessageExtensionLite
{
  return UnittestLiteRoot_optionalNestedMessageExtensionLite;
}
+ (id<PBExtensionField>)optionalForeignMessageExtensionLite
{
  return UnittestLiteRoot_optionalForeignMessageExtensionLite;
}
+ (id<PBExtensionField>)optionalImportMessageExtensionLite
{
  return UnittestLiteRoot_optionalImportMessageExtensionLite;
}
+ (id<PBExtensionField>)optionalNestedEnumExtensionLite
{
  return UnittestLiteRoot_optionalNestedEnumExtensionLite;
}
+ (id<PBExtensionField>)optionalForeignEnumExtensionLite
{
  return UnittestLiteRoot_optionalForeignEnumExtensionLite;
}
+ (id<PBExtensionField>)optionalImportEnumExtensionLite
{
  return UnittestLiteRoot_optionalImportEnumExtensionLite;
}
+ (id<PBExtensionField>)optionalStringPieceExtensionLite
{
  return UnittestLiteRoot_optionalStringPieceExtensionLite;
}
+ (id<PBExtensionField>)optionalCordExtensionLite
{
  return UnittestLiteRoot_optionalCordExtensionLite;
}
+ (id<PBExtensionField>)repeatedInt32ExtensionLite
{
  return UnittestLiteRoot_repeatedInt32ExtensionLite;
}
+ (id<PBExtensionField>)repeatedInt64ExtensionLite
{
  return UnittestLiteRoot_repeatedInt64ExtensionLite;
}
+ (id<PBExtensionField>)repeatedUint32ExtensionLite
{
  return UnittestLiteRoot_repeatedUint32ExtensionLite;
}
+ (id<PBExtensionField>)repeatedUint64ExtensionLite
{
  return UnittestLiteRoot_repeatedUint64ExtensionLite;
}
+ (id<PBExtensionField>)repeatedSint32ExtensionLite
{
  return UnittestLiteRoot_repeatedSint32ExtensionLite;
}
+ (id<PBExtensionField>)repeatedSint64ExtensionLite
{
  return UnittestLiteRoot_repeatedSint64ExtensionLite;
}
+ (id<PBExtensionField>)repeatedFixed32ExtensionLite
{
  return UnittestLiteRoot_repeatedFixed32ExtensionLite;
}
+ (id<PBExtensionField>)repeatedFixed64ExtensionLite
{
  return UnittestLiteRoot_repeatedFixed64ExtensionLite;
}
+ (id<PBExtensionField>)repeatedSfixed32ExtensionLite
{
  return UnittestLiteRoot_repeatedSfixed32ExtensionLite;
}
+ (id<PBExtensionField>)repeatedSfixed64ExtensionLite
{
  return UnittestLiteRoot_repeatedSfixed64ExtensionLite;
}
+ (id<PBExtensionField>)repeatedFloatExtensionLite
{
  return UnittestLiteRoot_repeatedFloatExtensionLite;
}
+ (id<PBExtensionField>)repeatedDoubleExtensionLite
{
  return UnittestLiteRoot_repeatedDoubleExtensionLite;
}
+ (id<PBExtensionField>)repeatedBoolExtensionLite
{
  return UnittestLiteRoot_repeatedBoolExtensionLite;
}
+ (id<PBExtensionField>)repeatedStringExtensionLite
{
  return UnittestLiteRoot_repeatedStringExtensionLite;
}
+ (id<PBExtensionField>)repeatedBytesExtensionLite
{
  return UnittestLiteRoot_repeatedBytesExtensionLite;
}
+ (id<PBExtensionField>)repeatedGroupExtensionLite
{
  return UnittestLiteRoot_repeatedGroupExtensionLite;
}
+ (id<PBExtensionField>)repeatedNestedMessageExtensionLite
{
  return UnittestLiteRoot_repeatedNestedMessageExtensionLite;
}
+ (id<PBExtensionField>)repeatedForeignMessageExtensionLite
{
  return UnittestLiteRoot_repeatedForeignMessageExtensionLite;
}
+ (id<PBExtensionField>)repeatedImportMessageExtensionLite
{
  return UnittestLiteRoot_repeatedImportMessageExtensionLite;
}
+ (id<PBExtensionField>)repeatedNestedEnumExtensionLite
{
  return UnittestLiteRoot_repeatedNestedEnumExtensionLite;
}
+ (id<PBExtensionField>)repeatedForeignEnumExtensionLite
{
  return UnittestLiteRoot_repeatedForeignEnumExtensionLite;
}
+ (id<PBExtensionField>)repeatedImportEnumExtensionLite
{
  return UnittestLiteRoot_repeatedImportEnumExtensionLite;
}
+ (id<PBExtensionField>)repeatedStringPieceExtensionLite
{
  return UnittestLiteRoot_repeatedStringPieceExtensionLite;
}
+ (id<PBExtensionField>)repeatedCordExtensionLite
{
  return UnittestLiteRoot_repeatedCordExtensionLite;
}
+ (id<PBExtensionField>)defaultInt32ExtensionLite
{
  return UnittestLiteRoot_defaultInt32ExtensionLite;
}
+ (id<PBExtensionField>)defaultInt64ExtensionLite
{
  return UnittestLiteRoot_defaultInt64ExtensionLite;
}
+ (id<PBExtensionField>)defaultUint32ExtensionLite
{
  return UnittestLiteRoot_defaultUint32ExtensionLite;
}
+ (id<PBExtensionField>)defaultUint64ExtensionLite
{
  return UnittestLiteRoot_defaultUint64ExtensionLite;
}
+ (id<PBExtensionField>)defaultSint32ExtensionLite
{
  return UnittestLiteRoot_defaultSint32ExtensionLite;
}
+ (id<PBExtensionField>)defaultSint64ExtensionLite
{
  return UnittestLiteRoot_defaultSint64ExtensionLite;
}
+ (id<PBExtensionField>)defaultFixed32ExtensionLite
{
  return UnittestLiteRoot_defaultFixed32ExtensionLite;
}
+ (id<PBExtensionField>)defaultFixed64ExtensionLite
{
  return UnittestLiteRoot_defaultFixed64ExtensionLite;
}
+ (id<PBExtensionField>)defaultSfixed32ExtensionLite
{
  return UnittestLiteRoot_defaultSfixed32ExtensionLite;
}
+ (id<PBExtensionField>)defaultSfixed64ExtensionLite
{
  return UnittestLiteRoot_defaultSfixed64ExtensionLite;
}
+ (id<PBExtensionField>)defaultFloatExtensionLite
{
  return UnittestLiteRoot_defaultFloatExtensionLite;
}
+ (id<PBExtensionField>)defaultDoubleExtensionLite
{
  return UnittestLiteRoot_defaultDoubleExtensionLite;
}
+ (id<PBExtensionField>)defaultBoolExtensionLite
{
  return UnittestLiteRoot_defaultBoolExtensionLite;
}
+ (id<PBExtensionField>)defaultStringExtensionLite
{
  return UnittestLiteRoot_defaultStringExtensionLite;
}
+ (id<PBExtensionField>)defaultBytesExtensionLite
{
  return UnittestLiteRoot_defaultBytesExtensionLite;
}
+ (id<PBExtensionField>)defaultNestedEnumExtensionLite
{
  return UnittestLiteRoot_defaultNestedEnumExtensionLite;
}
+ (id<PBExtensionField>)defaultForeignEnumExtensionLite
{
  return UnittestLiteRoot_defaultForeignEnumExtensionLite;
}
+ (id<PBExtensionField>)defaultImportEnumExtensionLite
{
  return UnittestLiteRoot_defaultImportEnumExtensionLite;
}
+ (id<PBExtensionField>)defaultStringPieceExtensionLite
{
  return UnittestLiteRoot_defaultStringPieceExtensionLite;
}
+ (id<PBExtensionField>)defaultCordExtensionLite
{
  return UnittestLiteRoot_defaultCordExtensionLite;
}
+ (id<PBExtensionField>)packedInt32ExtensionLite
{
  return UnittestLiteRoot_packedInt32ExtensionLite;
}
+ (id<PBExtensionField>)packedInt64ExtensionLite
{
  return UnittestLiteRoot_packedInt64ExtensionLite;
}
+ (id<PBExtensionField>)packedUint32ExtensionLite
{
  return UnittestLiteRoot_packedUint32ExtensionLite;
}
+ (id<PBExtensionField>)packedUint64ExtensionLite
{
  return UnittestLiteRoot_packedUint64ExtensionLite;
}
+ (id<PBExtensionField>)packedSint32ExtensionLite
{
  return UnittestLiteRoot_packedSint32ExtensionLite;
}
+ (id<PBExtensionField>)packedSint64ExtensionLite
{
  return UnittestLiteRoot_packedSint64ExtensionLite;
}
+ (id<PBExtensionField>)packedFixed32ExtensionLite
{
  return UnittestLiteRoot_packedFixed32ExtensionLite;
}
+ (id<PBExtensionField>)packedFixed64ExtensionLite
{
  return UnittestLiteRoot_packedFixed64ExtensionLite;
}
+ (id<PBExtensionField>)packedSfixed32ExtensionLite
{
  return UnittestLiteRoot_packedSfixed32ExtensionLite;
}
+ (id<PBExtensionField>)packedSfixed64ExtensionLite
{
  return UnittestLiteRoot_packedSfixed64ExtensionLite;
}
+ (id<PBExtensionField>)packedFloatExtensionLite
{
  return UnittestLiteRoot_packedFloatExtensionLite;
}
+ (id<PBExtensionField>)packedDoubleExtensionLite
{
  return UnittestLiteRoot_packedDoubleExtensionLite;
}
+ (id<PBExtensionField>)packedBoolExtensionLite
{
  return UnittestLiteRoot_packedBoolExtensionLite;
}
+ (id<PBExtensionField>)packedEnumExtensionLite
{
  return UnittestLiteRoot_packedEnumExtensionLite;
}
@end


BOOL ForeignEnumLiteIsValidValue(ForeignEnumLite value)
{
  return YES;
}

NSString *ForeignEnumLiteToString(ForeignEnumLite value)
{
  switch (value) {
    case ForeignEnumLiteForeignLiteFoo:
      return @"FOREIGN_LITE_FOO";
    case ForeignEnumLiteForeignLiteBar:
      return @"FOREIGN_LITE_BAR";
    case ForeignEnumLiteForeignLiteBaz:
      return @"FOREIGN_LITE_BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


@interface TestAllTypesLite ()


@end


@implementation TestAllTypesLite

- (BOOL)hasOptionalInt32
{
  return _hasOptionalInt32;
}

- (void)setOptionalInt32:(int32_t)value
{
  _hasOptionalInt32 = YES;
  _optionalInt32 = value;
}

- (void)clearOptionalInt32
{
  _hasOptionalInt32 = NO;
  _optionalInt32 = 0;
}

- (BOOL)hasOptionalInt64
{
  return _hasOptionalInt64;
}

- (void)setOptionalInt64:(int64_t)value
{
  _hasOptionalInt64 = YES;
  _optionalInt64 = value;
}

- (void)clearOptionalInt64
{
  _hasOptionalInt64 = NO;
  _optionalInt64 = 0L;
}

- (BOOL)hasOptionalUint32
{
  return _hasOptionalUint32;
}

- (void)setOptionalUint32:(uint32_t)value
{
  _hasOptionalUint32 = YES;
  _optionalUint32 = value;
}

- (void)clearOptionalUint32
{
  _hasOptionalUint32 = NO;
  _optionalUint32 = 0;
}

- (BOOL)hasOptionalUint64
{
  return _hasOptionalUint64;
}

- (void)setOptionalUint64:(uint64_t)value
{
  _hasOptionalUint64 = YES;
  _optionalUint64 = value;
}

- (void)clearOptionalUint64
{
  _hasOptionalUint64 = NO;
  _optionalUint64 = 0L;
}

- (BOOL)hasOptionalSint32
{
  return _hasOptionalSint32;
}

- (void)setOptionalSint32:(int32_t)value
{
  _hasOptionalSint32 = YES;
  _optionalSint32 = value;
}

- (void)clearOptionalSint32
{
  _hasOptionalSint32 = NO;
  _optionalSint32 = 0;
}

- (BOOL)hasOptionalSint64
{
  return _hasOptionalSint64;
}

- (void)setOptionalSint64:(int64_t)value
{
  _hasOptionalSint64 = YES;
  _optionalSint64 = value;
}

- (void)clearOptionalSint64
{
  _hasOptionalSint64 = NO;
  _optionalSint64 = 0L;
}

- (BOOL)hasOptionalFixed32
{
  return _hasOptionalFixed32;
}

- (void)setOptionalFixed32:(uint32_t)value
{
  _hasOptionalFixed32 = YES;
  _optionalFixed32 = value;
}

- (void)clearOptionalFixed32
{
  _hasOptionalFixed32 = NO;
  _optionalFixed32 = 0;
}

- (BOOL)hasOptionalFixed64
{
  return _hasOptionalFixed64;
}

- (void)setOptionalFixed64:(uint64_t)value
{
  _hasOptionalFixed64 = YES;
  _optionalFixed64 = value;
}

- (void)clearOptionalFixed64
{
  _hasOptionalFixed64 = NO;
  _optionalFixed64 = 0L;
}

- (BOOL)hasOptionalSfixed32
{
  return _hasOptionalSfixed32;
}

- (void)setOptionalSfixed32:(int32_t)value
{
  _hasOptionalSfixed32 = YES;
  _optionalSfixed32 = value;
}

- (void)clearOptionalSfixed32
{
  _hasOptionalSfixed32 = NO;
  _optionalSfixed32 = 0;
}

- (BOOL)hasOptionalSfixed64
{
  return _hasOptionalSfixed64;
}

- (void)setOptionalSfixed64:(int64_t)value
{
  _hasOptionalSfixed64 = YES;
  _optionalSfixed64 = value;
}

- (void)clearOptionalSfixed64
{
  _hasOptionalSfixed64 = NO;
  _optionalSfixed64 = 0L;
}

- (BOOL)hasOptionalFloat
{
  return _hasOptionalFloat;
}

- (void)setOptionalFloat:(Float32)value
{
  _hasOptionalFloat = YES;
  _optionalFloat = value;
}

- (void)clearOptionalFloat
{
  _hasOptionalFloat = NO;
  _optionalFloat = 0;
}

- (BOOL)hasOptionalDouble
{
  return _hasOptionalDouble;
}

- (void)setOptionalDouble:(Float64)value
{
  _hasOptionalDouble = YES;
  _optionalDouble = value;
}

- (void)clearOptionalDouble
{
  _hasOptionalDouble = NO;
  _optionalDouble = 0;
}

- (BOOL)hasOptionalBool
{
  return _hasOptionalBool;
}

- (void)setOptionalBool:(BOOL)value
{
  _hasOptionalBool = YES;
  _optionalBool = value;
}

- (void)clearOptionalBool
{
  _hasOptionalBool = NO;
  _optionalBool = NO;
}

- (BOOL)hasOptionalString
{
  return _hasOptionalString;
}

- (void)setOptionalString:(NSString *)value
{
  _hasOptionalString = value != nil;
  _optionalString = value;
}

- (void)clearOptionalString
{
  _hasOptionalString = NO;
  _optionalString = nil;
}

- (BOOL)hasOptionalBytes
{
  return _hasOptionalBytes;
}

- (void)setOptionalBytes:(NSData *)value
{
  _hasOptionalBytes = value != nil;
  _optionalBytes = value;
}

- (void)clearOptionalBytes
{
  _hasOptionalBytes = NO;
  _optionalBytes = nil;
}

- (BOOL)hasOptionalGroup
{
  return _hasOptionalGroup;
}

- (void)setOptionalGroup:(TestAllTypesLite_OptionalGroup *)value
{
  _hasOptionalGroup = value != nil;
  _optionalGroup = value;
}

- (void)clearOptionalGroup
{
  _hasOptionalGroup = NO;
  _optionalGroup = nil;
}

- (BOOL)hasOptionalNestedMessage
{
  return _hasOptionalNestedMessage;
}

- (void)setOptionalNestedMessage:(TestAllTypesLite_NestedMessage *)value
{
  _hasOptionalNestedMessage = value != nil;
  _optionalNestedMessage = value;
}

- (void)clearOptionalNestedMessage
{
  _hasOptionalNestedMessage = NO;
  _optionalNestedMessage = nil;
}

- (BOOL)hasOptionalForeignMessage
{
  return _hasOptionalForeignMessage;
}

- (void)setOptionalForeignMessage:(ForeignMessageLite *)value
{
  _hasOptionalForeignMessage = value != nil;
  _optionalForeignMessage = value;
}

- (void)clearOptionalForeignMessage
{
  _hasOptionalForeignMessage = NO;
  _optionalForeignMessage = nil;
}

- (BOOL)hasOptionalImportMessage
{
  return _hasOptionalImportMessage;
}

- (void)setOptionalImportMessage:(ImportMessageLite *)value
{
  _hasOptionalImportMessage = value != nil;
  _optionalImportMessage = value;
}

- (void)clearOptionalImportMessage
{
  _hasOptionalImportMessage = NO;
  _optionalImportMessage = nil;
}

- (BOOL)hasOptionalNestedEnum
{
  return _hasOptionalNestedEnum;
}

- (void)setOptionalNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  _hasOptionalNestedEnum = YES;
  _optionalNestedEnum = value;
}

- (void)clearOptionalNestedEnum
{
  _hasOptionalNestedEnum = NO;
  _optionalNestedEnum = TestAllTypesLite_NestedEnumFoo;
}

- (BOOL)hasOptionalForeignEnum
{
  return _hasOptionalForeignEnum;
}

- (void)setOptionalForeignEnum:(ForeignEnumLite)value
{
  _hasOptionalForeignEnum = YES;
  _optionalForeignEnum = value;
}

- (void)clearOptionalForeignEnum
{
  _hasOptionalForeignEnum = NO;
  _optionalForeignEnum = ForeignEnumLiteForeignLiteFoo;
}

- (BOOL)hasOptionalImportEnum
{
  return _hasOptionalImportEnum;
}

- (void)setOptionalImportEnum:(ImportEnumLite)value
{
  _hasOptionalImportEnum = YES;
  _optionalImportEnum = value;
}

- (void)clearOptionalImportEnum
{
  _hasOptionalImportEnum = NO;
  _optionalImportEnum = ImportEnumLiteImportLiteFoo;
}

- (BOOL)hasOptionalStringPiece
{
  return _hasOptionalStringPiece;
}

- (void)setOptionalStringPiece:(NSString *)value
{
  _hasOptionalStringPiece = value != nil;
  _optionalStringPiece = value;
}

- (void)clearOptionalStringPiece
{
  _hasOptionalStringPiece = NO;
  _optionalStringPiece = nil;
}

- (BOOL)hasOptionalCord
{
  return _hasOptionalCord;
}

- (void)setOptionalCord:(NSString *)value
{
  _hasOptionalCord = value != nil;
  _optionalCord = value;
}

- (void)clearOptionalCord
{
  _hasOptionalCord = NO;
  _optionalCord = nil;
}

- (BOOL)hasDefaultInt32
{
  return _hasDefaultInt32;
}

- (void)setDefaultInt32:(int32_t)value
{
  _hasDefaultInt32 = YES;
  _defaultInt32 = value;
}

- (void)clearDefaultInt32
{
  _hasDefaultInt32 = NO;
  _defaultInt32 = 41;
}

- (BOOL)hasDefaultInt64
{
  return _hasDefaultInt64;
}

- (void)setDefaultInt64:(int64_t)value
{
  _hasDefaultInt64 = YES;
  _defaultInt64 = value;
}

- (void)clearDefaultInt64
{
  _hasDefaultInt64 = NO;
  _defaultInt64 = 42L;
}

- (BOOL)hasDefaultUint32
{
  return _hasDefaultUint32;
}

- (void)setDefaultUint32:(uint32_t)value
{
  _hasDefaultUint32 = YES;
  _defaultUint32 = value;
}

- (void)clearDefaultUint32
{
  _hasDefaultUint32 = NO;
  _defaultUint32 = 43;
}

- (BOOL)hasDefaultUint64
{
  return _hasDefaultUint64;
}

- (void)setDefaultUint64:(uint64_t)value
{
  _hasDefaultUint64 = YES;
  _defaultUint64 = value;
}

- (void)clearDefaultUint64
{
  _hasDefaultUint64 = NO;
  _defaultUint64 = 44L;
}

- (BOOL)hasDefaultSint32
{
  return _hasDefaultSint32;
}

- (void)setDefaultSint32:(int32_t)value
{
  _hasDefaultSint32 = YES;
  _defaultSint32 = value;
}

- (void)clearDefaultSint32
{
  _hasDefaultSint32 = NO;
  _defaultSint32 = -45;
}

- (BOOL)hasDefaultSint64
{
  return _hasDefaultSint64;
}

- (void)setDefaultSint64:(int64_t)value
{
  _hasDefaultSint64 = YES;
  _defaultSint64 = value;
}

- (void)clearDefaultSint64
{
  _hasDefaultSint64 = NO;
  _defaultSint64 = 46L;
}

- (BOOL)hasDefaultFixed32
{
  return _hasDefaultFixed32;
}

- (void)setDefaultFixed32:(uint32_t)value
{
  _hasDefaultFixed32 = YES;
  _defaultFixed32 = value;
}

- (void)clearDefaultFixed32
{
  _hasDefaultFixed32 = NO;
  _defaultFixed32 = 47;
}

- (BOOL)hasDefaultFixed64
{
  return _hasDefaultFixed64;
}

- (void)setDefaultFixed64:(uint64_t)value
{
  _hasDefaultFixed64 = YES;
  _defaultFixed64 = value;
}

- (void)clearDefaultFixed64
{
  _hasDefaultFixed64 = NO;
  _defaultFixed64 = 48L;
}

- (BOOL)hasDefaultSfixed32
{
  return _hasDefaultSfixed32;
}

- (void)setDefaultSfixed32:(int32_t)value
{
  _hasDefaultSfixed32 = YES;
  _defaultSfixed32 = value;
}

- (void)clearDefaultSfixed32
{
  _hasDefaultSfixed32 = NO;
  _defaultSfixed32 = 49;
}

- (BOOL)hasDefaultSfixed64
{
  return _hasDefaultSfixed64;
}

- (void)setDefaultSfixed64:(int64_t)value
{
  _hasDefaultSfixed64 = YES;
  _defaultSfixed64 = value;
}

- (void)clearDefaultSfixed64
{
  _hasDefaultSfixed64 = NO;
  _defaultSfixed64 = -50L;
}

- (BOOL)hasDefaultFloat
{
  return _hasDefaultFloat;
}

- (void)setDefaultFloat:(Float32)value
{
  _hasDefaultFloat = YES;
  _defaultFloat = value;
}

- (void)clearDefaultFloat
{
  _hasDefaultFloat = NO;
  _defaultFloat = 51.5;
}

- (BOOL)hasDefaultDouble
{
  return _hasDefaultDouble;
}

- (void)setDefaultDouble:(Float64)value
{
  _hasDefaultDouble = YES;
  _defaultDouble = value;
}

- (void)clearDefaultDouble
{
  _hasDefaultDouble = NO;
  _defaultDouble = 52000;
}

- (BOOL)hasDefaultBool
{
  return _hasDefaultBool;
}

- (void)setDefaultBool:(BOOL)value
{
  _hasDefaultBool = YES;
  _defaultBool = value;
}

- (void)clearDefaultBool
{
  _hasDefaultBool = NO;
  _defaultBool = YES;
}

- (BOOL)hasDefaultString
{
  return _hasDefaultString;
}

- (void)setDefaultString:(NSString *)value
{
  _hasDefaultString = value != nil;
  _defaultString = value;
}

- (void)clearDefaultString
{
  _hasDefaultString = NO;
  _defaultString = @"hello";
}

- (BOOL)hasDefaultBytes
{
  return _hasDefaultBytes;
}

- (void)setDefaultBytes:(NSData *)value
{
  _hasDefaultBytes = value != nil;
  _defaultBytes = value;
}

- (void)clearDefaultBytes
{
  _hasDefaultBytes = NO;
  _defaultBytes = [NSData dataWithBytes:"world" length:5];
}

- (BOOL)hasDefaultNestedEnum
{
  return _hasDefaultNestedEnum;
}

- (void)setDefaultNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  _hasDefaultNestedEnum = YES;
  _defaultNestedEnum = value;
}

- (void)clearDefaultNestedEnum
{
  _hasDefaultNestedEnum = NO;
  _defaultNestedEnum = TestAllTypesLite_NestedEnumBar;
}

- (BOOL)hasDefaultForeignEnum
{
  return _hasDefaultForeignEnum;
}

- (void)setDefaultForeignEnum:(ForeignEnumLite)value
{
  _hasDefaultForeignEnum = YES;
  _defaultForeignEnum = value;
}

- (void)clearDefaultForeignEnum
{
  _hasDefaultForeignEnum = NO;
  _defaultForeignEnum = ForeignEnumLiteForeignLiteBar;
}

- (BOOL)hasDefaultImportEnum
{
  return _hasDefaultImportEnum;
}

- (void)setDefaultImportEnum:(ImportEnumLite)value
{
  _hasDefaultImportEnum = YES;
  _defaultImportEnum = value;
}

- (void)clearDefaultImportEnum
{
  _hasDefaultImportEnum = NO;
  _defaultImportEnum = ImportEnumLiteImportLiteBar;
}

- (BOOL)hasDefaultStringPiece
{
  return _hasDefaultStringPiece;
}

- (void)setDefaultStringPiece:(NSString *)value
{
  _hasDefaultStringPiece = value != nil;
  _defaultStringPiece = value;
}

- (void)clearDefaultStringPiece
{
  _hasDefaultStringPiece = NO;
  _defaultStringPiece = @"abc";
}

- (BOOL)hasDefaultCord
{
  return _hasDefaultCord;
}

- (void)setDefaultCord:(NSString *)value
{
  _hasDefaultCord = value != nil;
  _defaultCord = value;
}

- (void)clearDefaultCord
{
  _hasDefaultCord = NO;
  _defaultCord = @"123";
}

- (instancetype)init
{
  if ((self = [super init])) {
    _optionalInt32 = 0;
    _optionalInt64 = 0L;
    _optionalUint32 = 0;
    _optionalUint64 = 0L;
    _optionalSint32 = 0;
    _optionalSint64 = 0L;
    _optionalFixed32 = 0;
    _optionalFixed64 = 0L;
    _optionalSfixed32 = 0;
    _optionalSfixed64 = 0L;
    _optionalFloat = 0;
    _optionalDouble = 0;
    _optionalBool = NO;
    _optionalString = nil;
    _optionalBytes = nil;
    _optionalGroup = nil;
    _optionalNestedMessage = nil;
    _optionalForeignMessage = nil;
    _optionalImportMessage = nil;
    _optionalNestedEnum = TestAllTypesLite_NestedEnumFoo;
    _optionalForeignEnum = ForeignEnumLiteForeignLiteFoo;
    _optionalImportEnum = ImportEnumLiteImportLiteFoo;
    _optionalStringPiece = nil;
    _optionalCord = nil;
    _defaultInt32 = 41;
    _defaultInt64 = 42L;
    _defaultUint32 = 43;
    _defaultUint64 = 44L;
    _defaultSint32 = -45;
    _defaultSint64 = 46L;
    _defaultFixed32 = 47;
    _defaultFixed64 = 48L;
    _defaultSfixed32 = 49;
    _defaultSfixed64 = -50L;
    _defaultFloat = 51.5;
    _defaultDouble = 52000;
    _defaultBool = YES;
    _defaultString = @"hello";
    _defaultBytes = [NSData dataWithBytes:"world" length:5];
    _defaultNestedEnum = TestAllTypesLite_NestedEnumBar;
    _defaultForeignEnum = ForeignEnumLiteForeignLiteBar;
    _defaultImportEnum = ImportEnumLiteImportLiteBar;
    _defaultStringPiece = @"abc";
    _defaultCord = @"123";
  }
  return self;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_repeatedInt32 int32AtIndex:index];
}
- (void)addRepeatedInt32:(int32_t)value
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 addInt32:value];
}

- (void)addRepeatedInt32Array:(NSArray *)array
{
  if (_repeatedInt32 == nil) {
    _repeatedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedInt32Array:(NSArray *)array
{
  _repeatedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedInt32
{
  _repeatedInt32 = nil;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_repeatedInt64 int64AtIndex:index];
}
- (void)addRepeatedInt64:(int64_t)value
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 addInt64:value];
}

- (void)addRepeatedInt64Array:(NSArray *)array
{
  if (_repeatedInt64 == nil) {
    _repeatedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedInt64Array:(NSArray *)array
{
  _repeatedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedInt64
{
  _repeatedInt64 = nil;
}

- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index
{
  return [_repeatedUint32 uint32AtIndex:index];
}
- (void)addRepeatedUint32:(uint32_t)value
{
  if (_repeatedUint32 == nil) {
    _repeatedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedUint32 addUint32:value];
}

- (void)addRepeatedUint32Array:(NSArray *)array
{
  if (_repeatedUint32 == nil) {
    _repeatedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedUint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setRepeatedUint32Array:(NSArray *)array
{
  _repeatedUint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setRepeatedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _repeatedUint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearRepeatedUint32
{
  _repeatedUint32 = nil;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_repeatedUint64 uint64AtIndex:index];
}
- (void)addRepeatedUint64:(uint64_t)value
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 addUint64:value];
}

- (void)addRepeatedUint64Array:(NSArray *)array
{
  if (_repeatedUint64 == nil) {
    _repeatedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedUint64Array:(NSArray *)array
{
  _repeatedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedUint64
{
  _repeatedUint64 = nil;
}

- (int32_t)repeatedSint32AtIndex:(NSUInteger)index
{
  return [_repeatedSint32 int32AtIndex:index];
}
- (void)addRepeatedSint32:(int32_t)value
{
  if (_repeatedSint32 == nil) {
    _repeatedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSint32 addInt32:value];
}

- (void)addRepeatedSint32Array:(NSArray *)array
{
  if (_repeatedSint32 == nil) {
    _repeatedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedSint32Array:(NSArray *)array
{
  _repeatedSint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedSint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedSint32
{
  _repeatedSint32 = nil;
}

- (int64_t)repeatedSint64AtIndex:(NSUInteger)index
{
  return [_repeatedSint64 int64AtIndex:index];
}
- (void)addRepeatedSint64:(int64_t)value
{
  if (_repeatedSint64 == nil) {
    _repeatedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSint64 addInt64:value];
}

- (void)addRepeatedSint64Array:(NSArray *)array
{
  if (_repeatedSint64 == nil) {
    _repeatedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedSint64Array:(NSArray *)array
{
  _repeatedSint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedSint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedSint64
{
  _repeatedSint64 = nil;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_repeatedFixed32 uint32AtIndex:index];
}
- (void)addRepeatedFixed32:(uint32_t)value
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 addUint32:value];
}

- (void)addRepeatedFixed32Array:(NSArray *)array
{
  if (_repeatedFixed32 == nil) {
    _repeatedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_repeatedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setRepeatedFixed32Array:(NSArray *)array
{
  _repeatedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _repeatedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearRepeatedFixed32
{
  _repeatedFixed32 = nil;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_repeatedFixed64 uint64AtIndex:index];
}
- (void)addRepeatedFixed64:(uint64_t)value
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 addUint64:value];
}

- (void)addRepeatedFixed64Array:(NSArray *)array
{
  if (_repeatedFixed64 == nil) {
    _repeatedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_repeatedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setRepeatedFixed64Array:(NSArray *)array
{
  _repeatedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _repeatedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearRepeatedFixed64
{
  _repeatedFixed64 = nil;
}

- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index
{
  return [_repeatedSfixed32 int32AtIndex:index];
}
- (void)addRepeatedSfixed32:(int32_t)value
{
  if (_repeatedSfixed32 == nil) {
    _repeatedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSfixed32 addInt32:value];
}

- (void)addRepeatedSfixed32Array:(NSArray *)array
{
  if (_repeatedSfixed32 == nil) {
    _repeatedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedSfixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedSfixed32Array:(NSArray *)array
{
  _repeatedSfixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  _repeatedSfixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedSfixed32
{
  _repeatedSfixed32 = nil;
}

- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index
{
  return [_repeatedSfixed64 int64AtIndex:index];
}
- (void)addRepeatedSfixed64:(int64_t)value
{
  if (_repeatedSfixed64 == nil) {
    _repeatedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSfixed64 addInt64:value];
}

- (void)addRepeatedSfixed64Array:(NSArray *)array
{
  if (_repeatedSfixed64 == nil) {
    _repeatedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_repeatedSfixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setRepeatedSfixed64Array:(NSArray *)array
{
  _repeatedSfixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setRepeatedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  _repeatedSfixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearRepeatedSfixed64
{
  _repeatedSfixed64 = nil;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_repeatedFloat floatAtIndex:index];
}
- (void)addRepeatedFloat:(Float32)value
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat addFloat:value];
}

- (void)addRepeatedFloatArray:(NSArray *)array
{
  if (_repeatedFloat == nil) {
    _repeatedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_repeatedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setRepeatedFloatArray:(NSArray *)array
{
  _repeatedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _repeatedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearRepeatedFloat
{
  _repeatedFloat = nil;
}

- (Float64)repeatedDoubleAtIndex:(NSUInteger)index
{
  return [_repeatedDouble doubleAtIndex:index];
}
- (void)addRepeatedDouble:(Float64)value
{
  if (_repeatedDouble == nil) {
    _repeatedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_repeatedDouble addDouble:value];
}

- (void)addRepeatedDoubleArray:(NSArray *)array
{
  if (_repeatedDouble == nil) {
    _repeatedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_repeatedDouble appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble]];
}

- (void)setRepeatedDoubleArray:(NSArray *)array
{
  _repeatedDouble = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
}

- (void)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  _repeatedDouble = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
}

- (void)clearRepeatedDouble
{
  _repeatedDouble = nil;
}

- (BOOL)repeatedBoolAtIndex:(NSUInteger)index
{
  return [_repeatedBool boolAtIndex:index];
}
- (void)addRepeatedBool:(BOOL)value
{
  if (_repeatedBool == nil) {
    _repeatedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_repeatedBool addBool:value];
}

- (void)addRepeatedBoolArray:(NSArray *)array
{
  if (_repeatedBool == nil) {
    _repeatedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_repeatedBool appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool]];
}

- (void)setRepeatedBoolArray:(NSArray *)array
{
  _repeatedBool = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
}

- (void)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  _repeatedBool = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
}

- (void)clearRepeatedBool
{
  _repeatedBool = nil;
}

- (NSString *)repeatedStringAtIndex:(NSUInteger)index
{
  return _repeatedString[index];
}

- (void)addRepeatedString:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedString == nil) {
    _repeatedString = [[NSMutableArray alloc] init];
  }
  [_repeatedString addObject:value];
}

- (void)addRepeatedStringArray:(NSArray *)array
{
  if (_repeatedString == nil) {
    _repeatedString = [[NSMutableArray alloc] init];
  }
  [_repeatedString addObjectsFromArray:array];
}

- (void)setRepeatedStringArray:(NSArray *)array
{
  _repeatedString = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedString
{
  _repeatedString = nil;
}

- (NSData *)repeatedBytesAtIndex:(NSUInteger)index
{
  return _repeatedBytes[index];
}

- (void)addRepeatedBytes:(NSData *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedBytes == nil) {
    _repeatedBytes = [[NSMutableArray alloc] init];
  }
  [_repeatedBytes addObject:value];
}

- (void)addRepeatedBytesArray:(NSArray *)array
{
  if (_repeatedBytes == nil) {
    _repeatedBytes = [[NSMutableArray alloc] init];
  }
  [_repeatedBytes addObjectsFromArray:array];
}

- (void)setRepeatedBytesArray:(NSArray *)array
{
  _repeatedBytes = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedBytes
{
  _repeatedBytes = nil;
}

- (TestAllTypesLite_RepeatedGroup *)repeatedGroupAtIndex:(NSUInteger)index
{
  return _repeatedGroup[index];
}
- (void)addRepeatedGroup:(TestAllTypesLite_RepeatedGroup *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedGroup == nil) {
    _repeatedGroup = [[NSMutableArray alloc] init];
  }
  [_repeatedGroup addObject:value];
}

- (void)addRepeatedGroupArray:(NSArray *)array
{
  if (_repeatedGroup == nil) {
    _repeatedGroup = [[NSMutableArray alloc] init];
  }
  [_repeatedGroup addObjectsFromArray:array];
}

- (void)setRepeatedGroupArray:(NSArray *)array
{
  _repeatedGroup = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedGroup
{
  _repeatedGroup = nil;
}

- (TestAllTypesLite_NestedMessage *)repeatedNestedMessageAtIndex:(NSUInteger)index
{
  return _repeatedNestedMessage[index];
}
- (void)addRepeatedNestedMessage:(TestAllTypesLite_NestedMessage *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedNestedMessage == nil) {
    _repeatedNestedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedNestedMessage addObject:value];
}

- (void)addRepeatedNestedMessageArray:(NSArray *)array
{
  if (_repeatedNestedMessage == nil) {
    _repeatedNestedMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedNestedMessage addObjectsFromArray:array];
}

- (void)setRepeatedNestedMessageArray:(NSArray *)array
{
  _repeatedNestedMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedNestedMessage
{
  _repeatedNestedMessage = nil;
}

- (ForeignMessageLite *)repeatedForeignMessageAtIndex:(NSUInteger)index
{
  return _repeatedForeignMessage[index];
}
- (void)addRepeatedForeignMessage:(ForeignMessageLite *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedForeignMessage == nil) {
    _repeatedForeignMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedForeignMessage addObject:value];
}

- (void)addRepeatedForeignMessageArray:(NSArray *)array
{
  if (_repeatedForeignMessage == nil) {
    _repeatedForeignMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedForeignMessage addObjectsFromArray:array];
}

- (void)setRepeatedForeignMessageArray:(NSArray *)array
{
  _repeatedForeignMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedForeignMessage
{
  _repeatedForeignMessage = nil;
}

- (ImportMessageLite *)repeatedImportMessageAtIndex:(NSUInteger)index
{
  return _repeatedImportMessage[index];
}
- (void)addRepeatedImportMessage:(ImportMessageLite *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedImportMessage == nil) {
    _repeatedImportMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedImportMessage addObject:value];
}

- (void)addRepeatedImportMessageArray:(NSArray *)array
{
  if (_repeatedImportMessage == nil) {
    _repeatedImportMessage = [[NSMutableArray alloc] init];
  }
  [_repeatedImportMessage addObjectsFromArray:array];
}

- (void)setRepeatedImportMessageArray:(NSArray *)array
{
  _repeatedImportMessage = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedImportMessage
{
  _repeatedImportMessage = nil;
}

- (TestAllTypesLite_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index
{
  return (TestAllTypesLite_NestedEnum)[_repeatedNestedEnum int32AtIndex:index];
}

- (void)addRepeatedNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  if (_repeatedNestedEnum == nil) {
    _repeatedNestedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedNestedEnum addInt32:value];
}

- (void)addRepeatedNestedEnumArray:(NSArray *)array
{
  if (_repeatedNestedEnum == nil) {
    _repeatedNestedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedNestedEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedNestedEnumArray:(NSArray *)array
{
  _repeatedNestedEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedNestedEnumValues:(const TestAllTypesLite_NestedEnum *)values count:(NSUInteger)count
{
  _repeatedNestedEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedNestedEnum
{
  _repeatedNestedEnum = nil;
}

- (ForeignEnumLite)repeatedForeignEnumAtIndex:(NSUInteger)index
{
  return (ForeignEnumLite)[_repeatedForeignEnum int32AtIndex:index];
}

- (void)addRepeatedForeignEnum:(ForeignEnumLite)value
{
  if (_repeatedForeignEnum == nil) {
    _repeatedForeignEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedForeignEnum addInt32:value];
}

- (void)addRepeatedForeignEnumArray:(NSArray *)array
{
  if (_repeatedForeignEnum == nil) {
    _repeatedForeignEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedForeignEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedForeignEnumArray:(NSArray *)array
{
  _repeatedForeignEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedForeignEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count
{
  _repeatedForeignEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedForeignEnum
{
  _repeatedForeignEnum = nil;
}

- (ImportEnumLite)repeatedImportEnumAtIndex:(NSUInteger)index
{
  return (ImportEnumLite)[_repeatedImportEnum int32AtIndex:index];
}

- (void)addRepeatedImportEnum:(ImportEnumLite)value
{
  if (_repeatedImportEnum == nil) {
    _repeatedImportEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedImportEnum addInt32:value];
}

- (void)addRepeatedImportEnumArray:(NSArray *)array
{
  if (_repeatedImportEnum == nil) {
    _repeatedImportEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_repeatedImportEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setRepeatedImportEnumArray:(NSArray *)array
{
  _repeatedImportEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setRepeatedImportEnumValues:(const ImportEnumLite *)values count:(NSUInteger)count
{
  _repeatedImportEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearRepeatedImportEnum
{
  _repeatedImportEnum = nil;
}

- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index
{
  return _repeatedStringPiece[index];
}

- (void)addRepeatedStringPiece:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedStringPiece == nil) {
    _repeatedStringPiece = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPiece addObject:value];
}

- (void)addRepeatedStringPieceArray:(NSArray *)array
{
  if (_repeatedStringPiece == nil) {
    _repeatedStringPiece = [[NSMutableArray alloc] init];
  }
  [_repeatedStringPiece addObjectsFromArray:array];
}

- (void)setRepeatedStringPieceArray:(NSArray *)array
{
  _repeatedStringPiece = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedStringPiece
{
  _repeatedStringPiece = nil;
}

- (NSString *)repeatedCordAtIndex:(NSUInteger)index
{
  return _repeatedCord[index];
}

- (void)addRepeatedCord:(NSString *)value
{
  if (value == nil) {
    return;
  }
  if (_repeatedCord == nil) {
    _repeatedCord = [[NSMutableArray alloc] init];
  }
  [_repeatedCord addObject:value];
}

- (void)addRepeatedCordArray:(NSArray *)array
{
  if (_repeatedCord == nil) {
    _repeatedCord = [[NSMutableArray alloc] init];
  }
  [_repeatedCord addObjectsFromArray:array];
}

- (void)setRepeatedCordArray:(NSArray *)array
{
  _repeatedCord = [[NSMutableArray alloc] initWithArray:array];
}

- (void)clearRepeatedCord
{
  _repeatedCord = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.optionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalForeignMessage) {
    [output writeMessage:19 value:self.optionalForeignMessage];
  }
  if (self.hasOptionalImportMessage) {
    [output writeMessage:20 value:self.optionalImportMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalForeignEnum) {
    [output writeEnum:22 value:self.optionalForeignEnum];
  }
  if (self.hasOptionalImportEnum) {
    [output writeEnum:23 value:self.optionalImportEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  const NSUInteger repeatedInt32Count = self.repeatedInt32.count;
  if (repeatedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < repeatedInt32Count; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64Count = self.repeatedInt64.count;
  if (repeatedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < repeatedInt64Count; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32Count = self.repeatedUint32.count;
  if (repeatedUint32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedUint32.data;
    for (NSUInteger i = 0; i < repeatedUint32Count; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64Count = self.repeatedUint64.count;
  if (repeatedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < repeatedUint64Count; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32Count = self.repeatedSint32.count;
  if (repeatedSint32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSint32.data;
    for (NSUInteger i = 0; i < repeatedSint32Count; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64Count = self.repeatedSint64.count;
  if (repeatedSint64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSint64.data;
    for (NSUInteger i = 0; i < repeatedSint64Count; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32Count = self.repeatedFixed32.count;
  if (repeatedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedFixed32.data;
    for (NSUInteger i = 0; i < repeatedFixed32Count; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64Count = self.repeatedFixed64.count;
  if (repeatedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedFixed64.data;
    for (NSUInteger i = 0; i < repeatedFixed64Count; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32Count = self.repeatedSfixed32.count;
  if (repeatedSfixed32Count > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSfixed32.data;
    for (NSUInteger i = 0; i < repeatedSfixed32Count; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64Count = self.repeatedSfixed64.count;
  if (repeatedSfixed64Count > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSfixed64.data;
    for (NSUInteger i = 0; i < repeatedSfixed64Count; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatCount = self.repeatedFloat.count;
  if (repeatedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloat.data;
    for (NSUInteger i = 0; i < repeatedFloatCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleCount = self.repeatedDouble.count;
  if (repeatedDoubleCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDouble.data;
    for (NSUInteger i = 0; i < repeatedDoubleCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolCount = self.repeatedBool.count;
  if (repeatedBoolCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBool.data;
    for (NSUInteger i = 0; i < repeatedBoolCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  const NSUInteger repeatedStringCount = self.repeatedString.count;
  if (repeatedStringCount > 0) {
    NSMutableArray *values = self.repeatedString;
    for (NSUInteger i = 0; i < repeatedStringCount; ++i) {
      [output writeString:44 value:values[i]];
    }
  }
  const NSUInteger repeatedBytesCount = self.repeatedBytes.count;
  if (repeatedBytesCount > 0) {
    NSMutableArray *values = self.repeatedBytes;
    for (NSUInteger i = 0; i < repeatedBytesCount; ++i) {
      [output writeData:45 value:values[i]];
    }
  }
  for (TestAllTypesLite_RepeatedGroup *element in self.repeatedGroup) {
    [output writeGroup:46 value:element];
  }
  for (TestAllTypesLite_NestedMessage *element in self.repeatedNestedMessage) {
    [output writeMessage:48 value:element];
  }
  for (ForeignMessageLite *element in self.repeatedForeignMessage) {
    [output writeMessage:49 value:element];
  }
  for (ImportMessageLite *element in self.repeatedImportMessage) {
    [output writeMessage:50 value:element];
  }
  const NSUInteger repeatedNestedEnumCount = self.repeatedNestedEnum.count;
  const TestAllTypesLite_NestedEnum *repeatedNestedEnumValues = (const TestAllTypesLite_NestedEnum *)self.repeatedNestedEnum.data;
  for (NSUInteger i = 0; i < repeatedNestedEnumCount; ++i) {
    [output writeEnum:51 value:repeatedNestedEnumValues[i]];
  }
  const NSUInteger repeatedForeignEnumCount = self.repeatedForeignEnum.count;
  const ForeignEnumLite *repeatedForeignEnumValues = (const ForeignEnumLite *)self.repeatedForeignEnum.data;
  for (NSUInteger i = 0; i < repeatedForeignEnumCount; ++i) {
    [output writeEnum:52 value:repeatedForeignEnumValues[i]];
  }
  const NSUInteger repeatedImportEnumCount = self.repeatedImportEnum.count;
  const ImportEnumLite *repeatedImportEnumValues = (const ImportEnumLite *)self.repeatedImportEnum.data;
  for (NSUInteger i = 0; i < repeatedImportEnumCount; ++i) {
    [output writeEnum:53 value:repeatedImportEnumValues[i]];
  }
  const NSUInteger repeatedStringPieceCount = self.repeatedStringPiece.count;
  if (repeatedStringPieceCount > 0) {
    NSMutableArray *values = self.repeatedStringPiece;
    for (NSUInteger i = 0; i < repeatedStringPieceCount; ++i) {
      [output writeString:54 value:values[i]];
    }
  }
  const NSUInteger repeatedCordCount = self.repeatedCord.count;
  if (repeatedCordCount > 0) {
    NSMutableArray *values = self.repeatedCord;
    for (NSUInteger i = 0; i < repeatedCordCount; ++i) {
      [output writeString:55 value:values[i]];
    }
  }
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultForeignEnum) {
    [output writeEnum:82 value:self.defaultForeignEnum];
  }
  if (self.hasDefaultImportEnum) {
    [output writeEnum:83 value:self.defaultImportEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.optionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalForeignMessage) {
    size_ += computeMessageSize(19, self.optionalForeignMessage);
  }
  if (self.hasOptionalImportMessage) {
    size_ += computeMessageSize(20, self.optionalImportMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalForeignEnum) {
    size_ += computeEnumSize(22, self.optionalForeignEnum);
  }
  if (self.hasOptionalImportEnum) {
    size_ += computeEnumSize(23, self.optionalImportEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt32.count;
    const int32_t *values = (const int32_t *)self.repeatedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedInt64.count;
    const int64_t *values = (const int64_t *)self.repeatedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedUint32.count;
    const uint32_t *values = (const uint32_t *)self.repeatedUint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedUint64.count;
    const uint64_t *values = (const uint64_t *)self.repeatedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSint32.count;
    const int32_t *values = (const int32_t *)self.repeatedSint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSint64.count;
    const int64_t *values = (const int64_t *)self.repeatedSint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSfixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedSfixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedDouble.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedBool.count;
    dataSize = 1 * count;
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedString.count;
    NSMutableArray *values = self.repeatedString;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedBytes.count;
    NSMutableArray *values = self.repeatedBytes;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  for (TestAllTypesLite_RepeatedGroup *element in self.repeatedGroup) {
    size_ += computeGroupSize(46, element);
  }
  for (TestAllTypesLite_NestedMessage *element in self.repeatedNestedMessage) {
    size_ += computeMessageSize(48, element);
  }
  for (ForeignMessageLite *element in self.repeatedForeignMessage) {
    size_ += computeMessageSize(49, element);
  }
  for (ImportMessageLite *element in self.repeatedImportMessage) {
    size_ += computeMessageSize(50, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedNestedEnum.count;
    const TestAllTypesLite_NestedEnum *values = (const TestAllTypesLite_NestedEnum *)self.repeatedNestedEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedForeignEnum.count;
    const ForeignEnumLite *values = (const ForeignEnumLite *)self.repeatedForeignEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedImportEnum.count;
    const ImportEnumLite *values = (const ImportEnumLite *)self.repeatedImportEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedStringPiece.count;
    NSMutableArray *values = self.repeatedStringPiece;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.repeatedCord.count;
    NSMutableArray *values = self.repeatedCord;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultForeignEnum) {
    size_ += computeEnumSize(82, self.defaultForeignEnum);
  }
  if (self.hasDefaultImportEnum) {
    size_ += computeEnumSize(83, self.defaultImportEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypesLite *)parseFromData:(NSData *)data
{
  return (TestAllTypesLite *)[[[TestAllTypesLite builder] mergeFromData:data] build];
}

+ (TestAllTypesLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromInputStream:input] build];
}

+ (TestAllTypesLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypesLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypesLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypesLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_Builder *)builder
{
  return [[TestAllTypesLite_Builder alloc] init];
}

+ (TestAllTypesLite_Builder *)builderWithPrototype:(TestAllTypesLite *)prototype
{
  return [[TestAllTypesLite builder] mergeFrom:prototype];
}

- (TestAllTypesLite_Builder *)builder
{
  return [TestAllTypesLite builder];
}

- (TestAllTypesLite_Builder *)toBuilder
{
  return [TestAllTypesLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", @(self.optionalInt32)];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", @(self.optionalInt64)];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", @(self.optionalUint32)];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", @(self.optionalUint64)];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", @(self.optionalSint32)];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", @(self.optionalSint64)];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", @(self.optionalFixed32)];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", @(self.optionalFixed64)];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", @(self.optionalSfixed32)];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", @(self.optionalSfixed64)];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", @(self.optionalFloat)];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", @(self.optionalDouble)];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", @(self.optionalBool)];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalForeignMessage"];
    [self.optionalForeignMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalImportMessage"];
    [self.optionalImportMessage writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", TestAllTypesLite_NestedEnumToString((TestAllTypesLite_NestedEnum)self.optionalNestedEnum)];
  }
  if (self.hasOptionalForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalForeignEnum", ForeignEnumLiteToString((ForeignEnumLite)self.optionalForeignEnum)];
  }
  if (self.hasOptionalImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalImportEnum", ImportEnumLiteToString((ImportEnumLite)self.optionalImportEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", @([self.repeatedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", @([self.repeatedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", @([self.repeatedUint32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", @([self.repeatedUint64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", @([self.repeatedSint32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", @([self.repeatedSint64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", @([self.repeatedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", @([self.repeatedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", @([self.repeatedSfixed32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", @([self.repeatedSfixed64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", @([self.repeatedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedDouble.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", @([self.repeatedDouble doubleAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedBool.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", @([self.repeatedBool boolAtIndex:i])];
  }
  for (NSString * element in self.repeatedString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", element];
  }
  for (NSData * element in self.repeatedBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", element];
  }
  for (TestAllTypesLite_RepeatedGroup *element in self.repeatedGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypesLite_NestedMessage *element in self.repeatedNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ForeignMessageLite *element in self.repeatedForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedForeignMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ImportMessageLite *element in self.repeatedImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedImportMessage"];
    [element writeDescriptionTo:output withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSUInteger i = 0, listCount = self.repeatedNestedEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", TestAllTypesLite_NestedEnumToString((TestAllTypesLite_NestedEnum)[self.repeatedNestedEnum int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedForeignEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedForeignEnum", ForeignEnumLiteToString((ForeignEnumLite)[self.repeatedForeignEnum int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.repeatedImportEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedImportEnum", ImportEnumLiteToString((ImportEnumLite)[self.repeatedImportEnum int32AtIndex:i])];
  }
  for (NSString * element in self.repeatedStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", element];
  }
  for (NSString * element in self.repeatedCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", element];
  }
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", @(self.defaultInt32)];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", @(self.defaultInt64)];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", @(self.defaultUint32)];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", @(self.defaultUint64)];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", @(self.defaultSint32)];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", @(self.defaultSint64)];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", @(self.defaultFixed32)];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", @(self.defaultFixed64)];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", @(self.defaultSfixed32)];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", @(self.defaultSfixed64)];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", @(self.defaultFloat)];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", @(self.defaultDouble)];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", @(self.defaultBool)];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", TestAllTypesLite_NestedEnumToString((TestAllTypesLite_NestedEnum)self.defaultNestedEnum)];
  }
  if (self.hasDefaultForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultForeignEnum", ForeignEnumLiteToString((ForeignEnumLite)self.defaultForeignEnum)];
  }
  if (self.hasDefaultImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultImportEnum", ImportEnumLiteToString((ImportEnumLite)self.defaultImportEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLite class]]) {
    return NO;
  }
  TestAllTypesLite *otherMessage = other;
  return
    (self.hasOptionalInt32 == otherMessage.hasOptionalInt32 && (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32)) &&
    (self.hasOptionalInt64 == otherMessage.hasOptionalInt64 && (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64)) &&
    (self.hasOptionalUint32 == otherMessage.hasOptionalUint32 && (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32)) &&
    (self.hasOptionalUint64 == otherMessage.hasOptionalUint64 && (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64)) &&
    (self.hasOptionalSint32 == otherMessage.hasOptionalSint32 && (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32)) &&
    (self.hasOptionalSint64 == otherMessage.hasOptionalSint64 && (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64)) &&
    (self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 && (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32)) &&
    (self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 && (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64)) &&
    (self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 && (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32)) &&
    (self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 && (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64)) &&
    (self.hasOptionalFloat == otherMessage.hasOptionalFloat && (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat)) &&
    (self.hasOptionalDouble == otherMessage.hasOptionalDouble && (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble)) &&
    (self.hasOptionalBool == otherMessage.hasOptionalBool && (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool)) &&
    (self.hasOptionalString == otherMessage.hasOptionalString && (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString])) &&
    (self.hasOptionalBytes == otherMessage.hasOptionalBytes && (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes])) &&
    (self.hasOptionalGroup == otherMessage.hasOptionalGroup && (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup])) &&
    (self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage && (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage])) &&
    (self.hasOptionalForeignMessage == otherMessage.hasOptionalForeignMessage && (!self.hasOptionalForeignMessage || [self.optionalForeignMessage isEqual:otherMessage.optionalForeignMessage])) &&
    (self.hasOptionalImportMessage == otherMessage.hasOptionalImportMessage && (!self.hasOptionalImportMessage || [self.optionalImportMessage isEqual:otherMessage.optionalImportMessage])) &&
    (self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum && (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum)) &&
    (self.hasOptionalForeignEnum == otherMessage.hasOptionalForeignEnum && (!self.hasOptionalForeignEnum || self.optionalForeignEnum == otherMessage.optionalForeignEnum)) &&
    (self.hasOptionalImportEnum == otherMessage.hasOptionalImportEnum && (!self.hasOptionalImportEnum || self.optionalImportEnum == otherMessage.optionalImportEnum)) &&
    (self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece && (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece])) &&
    (self.hasOptionalCord == otherMessage.hasOptionalCord && (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord])) &&
    [self.repeatedInt32 isEqualToArray:otherMessage.repeatedInt32] &&
    [self.repeatedInt64 isEqualToArray:otherMessage.repeatedInt64] &&
    [self.repeatedUint32 isEqualToArray:otherMessage.repeatedUint32] &&
    [self.repeatedUint64 isEqualToArray:otherMessage.repeatedUint64] &&
    [self.repeatedSint32 isEqualToArray:otherMessage.repeatedSint32] &&
    [self.repeatedSint64 isEqualToArray:otherMessage.repeatedSint64] &&
    [self.repeatedFixed32 isEqualToArray:otherMessage.repeatedFixed32] &&
    [self.repeatedFixed64 isEqualToArray:otherMessage.repeatedFixed64] &&
    [self.repeatedSfixed32 isEqualToArray:otherMessage.repeatedSfixed32] &&
    [self.repeatedSfixed64 isEqualToArray:otherMessage.repeatedSfixed64] &&
    [self.repeatedFloat isEqualToArray:otherMessage.repeatedFloat] &&
    [self.repeatedDouble isEqualToArray:otherMessage.repeatedDouble] &&
    [self.repeatedBool isEqualToArray:otherMessage.repeatedBool] &&
    [self.repeatedString isEqualToArray:otherMessage.repeatedString] &&
    [self.repeatedBytes isEqualToArray:otherMessage.repeatedBytes] &&
    [self.repeatedGroup isEqualToArray:otherMessage.repeatedGroup] &&
    [self.repeatedNestedMessage isEqualToArray:otherMessage.repeatedNestedMessage] &&
    [self.repeatedForeignMessage isEqualToArray:otherMessage.repeatedForeignMessage] &&
    [self.repeatedImportMessage isEqualToArray:otherMessage.repeatedImportMessage] &&
    [self.repeatedNestedEnum isEqualToArray:otherMessage.repeatedNestedEnum] &&
    [self.repeatedForeignEnum isEqualToArray:otherMessage.repeatedForeignEnum] &&
    [self.repeatedImportEnum isEqualToArray:otherMessage.repeatedImportEnum] &&
    [self.repeatedStringPiece isEqualToArray:otherMessage.repeatedStringPiece] &&
    [self.repeatedCord isEqualToArray:otherMessage.repeatedCord] &&
    (self.hasDefaultInt32 == otherMessage.hasDefaultInt32 && (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32)) &&
    (self.hasDefaultInt64 == otherMessage.hasDefaultInt64 && (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64)) &&
    (self.hasDefaultUint32 == otherMessage.hasDefaultUint32 && (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32)) &&
    (self.hasDefaultUint64 == otherMessage.hasDefaultUint64 && (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64)) &&
    (self.hasDefaultSint32 == otherMessage.hasDefaultSint32 && (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32)) &&
    (self.hasDefaultSint64 == otherMessage.hasDefaultSint64 && (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64)) &&
    (self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 && (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32)) &&
    (self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 && (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64)) &&
    (self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 && (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32)) &&
    (self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 && (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64)) &&
    (self.hasDefaultFloat == otherMessage.hasDefaultFloat && (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat)) &&
    (self.hasDefaultDouble == otherMessage.hasDefaultDouble && (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble)) &&
    (self.hasDefaultBool == otherMessage.hasDefaultBool && (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool)) &&
    (self.hasDefaultString == otherMessage.hasDefaultString && (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString])) &&
    (self.hasDefaultBytes == otherMessage.hasDefaultBytes && (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes])) &&
    (self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum && (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum)) &&
    (self.hasDefaultForeignEnum == otherMessage.hasDefaultForeignEnum && (!self.hasDefaultForeignEnum || self.defaultForeignEnum == otherMessage.defaultForeignEnum)) &&
    (self.hasDefaultImportEnum == otherMessage.hasDefaultImportEnum && (!self.hasDefaultImportEnum || self.defaultImportEnum == otherMessage.defaultImportEnum)) &&
    (self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece && (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece])) &&
    (self.hasDefaultCord == otherMessage.hasDefaultCord && (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord])) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [@(self.optionalInt32) hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [@(self.optionalInt64) hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [@(self.optionalUint32) hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [@(self.optionalUint64) hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [@(self.optionalSint32) hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [@(self.optionalSint64) hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [@(self.optionalFixed32) hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [@(self.optionalFixed64) hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed32) hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed64) hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [@(self.optionalFloat) hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [@(self.optionalDouble) hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [@(self.optionalBool) hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalForeignMessage) {
    hashCode = hashCode * 31 + [self.optionalForeignMessage hash];
  }
  if (self.hasOptionalImportMessage) {
    hashCode = hashCode * 31 + [self.optionalImportMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalForeignEnum) {
    hashCode = hashCode * 31 + self.optionalForeignEnum;
  }
  if (self.hasOptionalImportEnum) {
    hashCode = hashCode * 31 + self.optionalImportEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedUint32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedUint64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSint32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSint64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSfixed32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedSfixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedSfixed64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedDouble.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedDouble doubleAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedBool.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.repeatedBool boolAtIndex:i]) hash];
  }
  for (NSString * element in self.repeatedString) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSData * element in self.repeatedBytes) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypesLite_RepeatedGroup *element in self.repeatedGroup) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypesLite_NestedMessage *element in self.repeatedNestedMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ForeignMessageLite *element in self.repeatedForeignMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ImportMessageLite *element in self.repeatedImportMessage) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSUInteger i = 0, listCount = self.repeatedNestedEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedNestedEnum int32AtIndex:i];
  }
  for (NSUInteger i = 0, listCount = self.repeatedForeignEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedForeignEnum int32AtIndex:i];
  }
  for (NSUInteger i = 0, listCount = self.repeatedImportEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.repeatedImportEnum int32AtIndex:i];
  }
  for (NSString * element in self.repeatedStringPiece) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.repeatedCord) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [@(self.defaultInt32) hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [@(self.defaultInt64) hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [@(self.defaultUint32) hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [@(self.defaultUint64) hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [@(self.defaultSint32) hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [@(self.defaultSint64) hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [@(self.defaultFixed32) hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [@(self.defaultFixed64) hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed32) hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed64) hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [@(self.defaultFloat) hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [@(self.defaultDouble) hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [@(self.defaultBool) hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultForeignEnum) {
    hashCode = hashCode * 31 + self.defaultForeignEnum;
  }
  if (self.hasDefaultImportEnum) {
    hashCode = hashCode * 31 + self.defaultImportEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


BOOL TestAllTypesLite_NestedEnumIsValidValue(TestAllTypesLite_NestedEnum value)
{
  return YES;
}

NSString *TestAllTypesLite_NestedEnumToString(TestAllTypesLite_NestedEnum value)
{
  switch (value) {
    case TestAllTypesLite_NestedEnumFoo:
      return @"FOO";
    case TestAllTypesLite_NestedEnumBar:
      return @"BAR";
    case TestAllTypesLite_NestedEnumBaz:
      return @"BAZ";
    default:
      return [NSString stringWithFormat:@"%d", (int)value];
  }
}


@interface TestAllTypesLite_NestedMessage ()


@end


@implementation TestAllTypesLite_NestedMessage

- (BOOL)hasBb
{
  return _hasBb;
}

- (void)setBb:(int32_t)value
{
  _hasBb = YES;
  _bb = value;
}

- (void)clearBb
{
  _hasBb = NO;
  _bb = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _bb = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypesLite_NestedMessage *)parseFromData:(NSData *)data
{
  return (TestAllTypesLite_NestedMessage *)[[[TestAllTypesLite_NestedMessage builder] mergeFromData:data] build];
}

+ (TestAllTypesLite_NestedMessage *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_NestedMessage*)[[[TestAllTypesLite_NestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_NestedMessage *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypesLite_NestedMessage*)[[[TestAllTypesLite_NestedMessage builder] mergeFromInputStream:input] build];
}

+ (TestAllTypesLite_NestedMessage *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_NestedMessage*)[[[TestAllTypesLite_NestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypesLite_NestedMessage builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypesLite_NestedMessage *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypesLite_NestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_NestedMessage_Builder *)builder
{
  return [[TestAllTypesLite_NestedMessage_Builder alloc] init];
}

+ (TestAllTypesLite_NestedMessage_Builder *)builderWithPrototype:(TestAllTypesLite_NestedMessage *)prototype
{
  return [[TestAllTypesLite_NestedMessage builder] mergeFrom:prototype];
}

- (TestAllTypesLite_NestedMessage_Builder *)builder
{
  return [TestAllTypesLite_NestedMessage builder];
}

- (TestAllTypesLite_NestedMessage_Builder *)toBuilder
{
  return [TestAllTypesLite_NestedMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", @(self.bb)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLite_NestedMessage class]]) {
    return NO;
  }
  TestAllTypesLite_NestedMessage *otherMessage = other;
  return
    (self.hasBb == otherMessage.hasBb && (!self.hasBb || self.bb == otherMessage.bb)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [@(self.bb) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypesLite_NestedMessage_Builder()

@property (strong) TestAllTypesLite_NestedMessage *result;

@end


@implementation TestAllTypesLite_NestedMessage_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypesLite_NestedMessage alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypesLite_NestedMessage_Builder *)clear
{
  self.result = [[TestAllTypesLite_NestedMessage alloc] init];
  return self;
}

- (TestAllTypesLite_NestedMessage_Builder *)clone
{
  return [TestAllTypesLite_NestedMessage builderWithPrototype:_result];
}

- (TestAllTypesLite_NestedMessage *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypesLite_NestedMessage *)buildPartial
{
  TestAllTypesLite_NestedMessage *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypesLite_NestedMessage_Builder *)mergeFrom:(TestAllTypesLite_NestedMessage *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypesLite_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypesLite_NestedMessage_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasBb
{
  return _result.hasBb;
}

- (int32_t)bb
{
  return _result.bb;
}

- (TestAllTypesLite_NestedMessage_Builder*)setBb:(int32_t)value
{
  _result.bb = value;
  return self;
}

- (TestAllTypesLite_NestedMessage_Builder*)clearBb
{
  [_result clearBb];
  return self;
}

@end


@interface TestAllTypesLite_OptionalGroup ()


@end


@implementation TestAllTypesLite_OptionalGroup

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypesLite_OptionalGroup *)parseFromData:(NSData *)data
{
  return (TestAllTypesLite_OptionalGroup *)[[[TestAllTypesLite_OptionalGroup builder] mergeFromData:data] build];
}

+ (TestAllTypesLite_OptionalGroup *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_OptionalGroup*)[[[TestAllTypesLite_OptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_OptionalGroup *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypesLite_OptionalGroup*)[[[TestAllTypesLite_OptionalGroup builder] mergeFromInputStream:input] build];
}

+ (TestAllTypesLite_OptionalGroup *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_OptionalGroup*)[[[TestAllTypesLite_OptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_OptionalGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypesLite_OptionalGroup builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypesLite_OptionalGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypesLite_OptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_OptionalGroup_Builder *)builder
{
  return [[TestAllTypesLite_OptionalGroup_Builder alloc] init];
}

+ (TestAllTypesLite_OptionalGroup_Builder *)builderWithPrototype:(TestAllTypesLite_OptionalGroup *)prototype
{
  return [[TestAllTypesLite_OptionalGroup builder] mergeFrom:prototype];
}

- (TestAllTypesLite_OptionalGroup_Builder *)builder
{
  return [TestAllTypesLite_OptionalGroup builder];
}

- (TestAllTypesLite_OptionalGroup_Builder *)toBuilder
{
  return [TestAllTypesLite_OptionalGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLite_OptionalGroup class]]) {
    return NO;
  }
  TestAllTypesLite_OptionalGroup *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypesLite_OptionalGroup_Builder()

@property (strong) TestAllTypesLite_OptionalGroup *result;

@end


@implementation TestAllTypesLite_OptionalGroup_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypesLite_OptionalGroup alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypesLite_OptionalGroup_Builder *)clear
{
  self.result = [[TestAllTypesLite_OptionalGroup alloc] init];
  return self;
}

- (TestAllTypesLite_OptionalGroup_Builder *)clone
{
  return [TestAllTypesLite_OptionalGroup builderWithPrototype:_result];
}

- (TestAllTypesLite_OptionalGroup *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypesLite_OptionalGroup *)buildPartial
{
  TestAllTypesLite_OptionalGroup *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypesLite_OptionalGroup_Builder *)mergeFrom:(TestAllTypesLite_OptionalGroup *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypesLite_OptionalGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypesLite_OptionalGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestAllTypesLite_OptionalGroup_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestAllTypesLite_OptionalGroup_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestAllTypesLite_RepeatedGroup ()


@end


@implementation TestAllTypesLite_RepeatedGroup

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromData:(NSData *)data
{
  return (TestAllTypesLite_RepeatedGroup *)[[[TestAllTypesLite_RepeatedGroup builder] mergeFromData:data] build];
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_RepeatedGroup*)[[[TestAllTypesLite_RepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllTypesLite_RepeatedGroup*)[[[TestAllTypesLite_RepeatedGroup builder] mergeFromInputStream:input] build];
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllTypesLite_RepeatedGroup*)[[[TestAllTypesLite_RepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllTypesLite_RepeatedGroup builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllTypesLite_RepeatedGroup *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllTypesLite_RepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllTypesLite_RepeatedGroup_Builder *)builder
{
  return [[TestAllTypesLite_RepeatedGroup_Builder alloc] init];
}

+ (TestAllTypesLite_RepeatedGroup_Builder *)builderWithPrototype:(TestAllTypesLite_RepeatedGroup *)prototype
{
  return [[TestAllTypesLite_RepeatedGroup builder] mergeFrom:prototype];
}

- (TestAllTypesLite_RepeatedGroup_Builder *)builder
{
  return [TestAllTypesLite_RepeatedGroup builder];
}

- (TestAllTypesLite_RepeatedGroup_Builder *)toBuilder
{
  return [TestAllTypesLite_RepeatedGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLite_RepeatedGroup class]]) {
    return NO;
  }
  TestAllTypesLite_RepeatedGroup *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllTypesLite_RepeatedGroup_Builder()

@property (strong) TestAllTypesLite_RepeatedGroup *result;

@end


@implementation TestAllTypesLite_RepeatedGroup_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypesLite_RepeatedGroup alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypesLite_RepeatedGroup_Builder *)clear
{
  self.result = [[TestAllTypesLite_RepeatedGroup alloc] init];
  return self;
}

- (TestAllTypesLite_RepeatedGroup_Builder *)clone
{
  return [TestAllTypesLite_RepeatedGroup builderWithPrototype:_result];
}

- (TestAllTypesLite_RepeatedGroup *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypesLite_RepeatedGroup *)buildPartial
{
  TestAllTypesLite_RepeatedGroup *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypesLite_RepeatedGroup_Builder *)mergeFrom:(TestAllTypesLite_RepeatedGroup *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypesLite_RepeatedGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypesLite_RepeatedGroup_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (TestAllTypesLite_RepeatedGroup_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (TestAllTypesLite_RepeatedGroup_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestAllTypesLite_Builder()

@property (strong) TestAllTypesLite *result;

@end


@implementation TestAllTypesLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllTypesLite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestAllTypesLite_Builder *)clear
{
  self.result = [[TestAllTypesLite alloc] init];
  return self;
}

- (TestAllTypesLite_Builder *)clone
{
  return [TestAllTypesLite builderWithPrototype:_result];
}

- (TestAllTypesLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllTypesLite *)buildPartial
{
  TestAllTypesLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllTypesLite_Builder *)mergeFrom:(TestAllTypesLite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalForeignMessage) {
    [self mergeOptionalForeignMessage:other.optionalForeignMessage];
  }
  if (other.hasOptionalImportMessage) {
    [self mergeOptionalImportMessage:other.optionalImportMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalForeignEnum) {
    [self setOptionalForeignEnum:other.optionalForeignEnum];
  }
  if (other.hasOptionalImportEnum) {
    [self setOptionalImportEnum:other.optionalImportEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.repeatedInt32.count > 0) {
    if (_result.repeatedInt32 == nil) {
      _result.repeatedInt32 = [other.repeatedInt32 copy];
    } else {
      [_result.repeatedInt32 appendArray:other.repeatedInt32];
    }
  }
  if (other.repeatedInt64.count > 0) {
    if (_result.repeatedInt64 == nil) {
      _result.repeatedInt64 = [other.repeatedInt64 copy];
    } else {
      [_result.repeatedInt64 appendArray:other.repeatedInt64];
    }
  }
  if (other.repeatedUint32.count > 0) {
    if (_result.repeatedUint32 == nil) {
      _result.repeatedUint32 = [other.repeatedUint32 copy];
    } else {
      [_result.repeatedUint32 appendArray:other.repeatedUint32];
    }
  }
  if (other.repeatedUint64.count > 0) {
    if (_result.repeatedUint64 == nil) {
      _result.repeatedUint64 = [other.repeatedUint64 copy];
    } else {
      [_result.repeatedUint64 appendArray:other.repeatedUint64];
    }
  }
  if (other.repeatedSint32.count > 0) {
    if (_result.repeatedSint32 == nil) {
      _result.repeatedSint32 = [other.repeatedSint32 copy];
    } else {
      [_result.repeatedSint32 appendArray:other.repeatedSint32];
    }
  }
  if (other.repeatedSint64.count > 0) {
    if (_result.repeatedSint64 == nil) {
      _result.repeatedSint64 = [other.repeatedSint64 copy];
    } else {
      [_result.repeatedSint64 appendArray:other.repeatedSint64];
    }
  }
  if (other.repeatedFixed32.count > 0) {
    if (_result.repeatedFixed32 == nil) {
      _result.repeatedFixed32 = [other.repeatedFixed32 copy];
    } else {
      [_result.repeatedFixed32 appendArray:other.repeatedFixed32];
    }
  }
  if (other.repeatedFixed64.count > 0) {
    if (_result.repeatedFixed64 == nil) {
      _result.repeatedFixed64 = [other.repeatedFixed64 copy];
    } else {
      [_result.repeatedFixed64 appendArray:other.repeatedFixed64];
    }
  }
  if (other.repeatedSfixed32.count > 0) {
    if (_result.repeatedSfixed32 == nil) {
      _result.repeatedSfixed32 = [other.repeatedSfixed32 copy];
    } else {
      [_result.repeatedSfixed32 appendArray:other.repeatedSfixed32];
    }
  }
  if (other.repeatedSfixed64.count > 0) {
    if (_result.repeatedSfixed64 == nil) {
      _result.repeatedSfixed64 = [other.repeatedSfixed64 copy];
    } else {
      [_result.repeatedSfixed64 appendArray:other.repeatedSfixed64];
    }
  }
  if (other.repeatedFloat.count > 0) {
    if (_result.repeatedFloat == nil) {
      _result.repeatedFloat = [other.repeatedFloat copy];
    } else {
      [_result.repeatedFloat appendArray:other.repeatedFloat];
    }
  }
  if (other.repeatedDouble.count > 0) {
    if (_result.repeatedDouble == nil) {
      _result.repeatedDouble = [other.repeatedDouble copy];
    } else {
      [_result.repeatedDouble appendArray:other.repeatedDouble];
    }
  }
  if (other.repeatedBool.count > 0) {
    if (_result.repeatedBool == nil) {
      _result.repeatedBool = [other.repeatedBool copy];
    } else {
      [_result.repeatedBool appendArray:other.repeatedBool];
    }
  }
  if (other.repeatedString.count > 0) {
    if (_result.repeatedString == nil) {
      _result.repeatedString = [[NSMutableArray alloc] initWithArray:other.repeatedString];
    } else {
      [_result.repeatedString addObjectsFromArray:other.repeatedString];
    }
  }
  if (other.repeatedBytes.count > 0) {
    if (_result.repeatedBytes == nil) {
      _result.repeatedBytes = [[NSMutableArray alloc] initWithArray:other.repeatedBytes];
    } else {
      [_result.repeatedBytes addObjectsFromArray:other.repeatedBytes];
    }
  }
  if (other.repeatedGroup.count > 0) {
    if (_result.repeatedGroup == nil) {
      _result.repeatedGroup = [[NSMutableArray alloc] initWithArray:other.repeatedGroup];
    } else {
      [_result.repeatedGroup addObjectsFromArray:other.repeatedGroup];
    }
  }
  if (other.repeatedNestedMessage.count > 0) {
    if (_result.repeatedNestedMessage == nil) {
      _result.repeatedNestedMessage = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessage];
    } else {
      [_result.repeatedNestedMessage addObjectsFromArray:other.repeatedNestedMessage];
    }
  }
  if (other.repeatedForeignMessage.count > 0) {
    if (_result.repeatedForeignMessage == nil) {
      _result.repeatedForeignMessage = [[NSMutableArray alloc] initWithArray:other.repeatedForeignMessage];
    } else {
      [_result.repeatedForeignMessage addObjectsFromArray:other.repeatedForeignMessage];
    }
  }
  if (other.repeatedImportMessage.count > 0) {
    if (_result.repeatedImportMessage == nil) {
      _result.repeatedImportMessage = [[NSMutableArray alloc] initWithArray:other.repeatedImportMessage];
    } else {
      [_result.repeatedImportMessage addObjectsFromArray:other.repeatedImportMessage];
    }
  }
  if (other.repeatedNestedEnum.count > 0) {
    if (_result.repeatedNestedEnum == nil) {
      _result.repeatedNestedEnum = [other.repeatedNestedEnum copy];
    } else {
      [_result.repeatedNestedEnum appendArray:other.repeatedNestedEnum];
    }
  }
  if (other.repeatedForeignEnum.count > 0) {
    if (_result.repeatedForeignEnum == nil) {
      _result.repeatedForeignEnum = [other.repeatedForeignEnum copy];
    } else {
      [_result.repeatedForeignEnum appendArray:other.repeatedForeignEnum];
    }
  }
  if (other.repeatedImportEnum.count > 0) {
    if (_result.repeatedImportEnum == nil) {
      _result.repeatedImportEnum = [other.repeatedImportEnum copy];
    } else {
      [_result.repeatedImportEnum appendArray:other.repeatedImportEnum];
    }
  }
  if (other.repeatedStringPiece.count > 0) {
    if (_result.repeatedStringPiece == nil) {
      _result.repeatedStringPiece = [[NSMutableArray alloc] initWithArray:other.repeatedStringPiece];
    } else {
      [_result.repeatedStringPiece addObjectsFromArray:other.repeatedStringPiece];
    }
  }
  if (other.repeatedCord.count > 0) {
    if (_result.repeatedCord == nil) {
      _result.repeatedCord = [[NSMutableArray alloc] initWithArray:other.repeatedCord];
    } else {
      [_result.repeatedCord addObjectsFromArray:other.repeatedCord];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultForeignEnum) {
    [self setDefaultForeignEnum:other.defaultForeignEnum];
  }
  if (other.hasDefaultImportEnum) {
    [self setDefaultImportEnum:other.defaultImportEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllTypesLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllTypesLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypesLite_OptionalGroup_Builder *subBuilder = [TestAllTypesLite_OptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypesLite_NestedMessage_Builder *subBuilder = [TestAllTypesLite_NestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ForeignMessageLite_Builder *subBuilder = [ForeignMessageLite builder];
        if (self.hasOptionalForeignMessage) {
          [subBuilder mergeFrom:self.optionalForeignMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ImportMessageLite_Builder *subBuilder = [ImportMessageLite builder];
        if (self.hasOptionalImportMessage) {
          [subBuilder mergeFrom:self.optionalImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        int32_t value = [input readEnum];
        if (TestAllTypesLite_NestedEnumIsValidValue((TestAllTypesLite_NestedEnum)value)) {
          [self setOptionalNestedEnum:(TestAllTypesLite_NestedEnum)value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        int32_t value = [input readEnum];
        if (ForeignEnumLiteIsValidValue((ForeignEnumLite)value)) {
          [self setOptionalForeignEnum:(ForeignEnumLite)value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        int32_t value = [input readEnum];
        if (ImportEnumLiteIsValidValue((ImportEnumLite)value)) {
          [self setOptionalImportEnum:(ImportEnumLite)value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypesLite_RepeatedGroup_Builder *subBuilder = [TestAllTypesLite_RepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypesLite_NestedMessage_Builder *subBuilder = [TestAllTypesLite_NestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        ForeignMessageLite_Builder *subBuilder = [ForeignMessageLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        ImportMessageLite_Builder *subBuilder = [ImportMessageLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        int32_t value = [input readEnum];
        if (TestAllTypesLite_NestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 416: {
        int32_t value = [input readEnum];
        if (ForeignEnumLiteIsValidValue(value)) {
          [self addRepeatedForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:52 value:value];
        }
        break;
      }
      case 424: {
        int32_t value = [input readEnum];
        if (ImportEnumLiteIsValidValue(value)) {
          [self addRepeatedImportEnum:value];
        } else {
          [unknownFields mergeVarintField:53 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        int32_t value = [input readEnum];
        if (TestAllTypesLite_NestedEnumIsValidValue((TestAllTypesLite_NestedEnum)value)) {
          [self setDefaultNestedEnum:(TestAllTypesLite_NestedEnum)value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 656: {
        int32_t value = [input readEnum];
        if (ForeignEnumLiteIsValidValue((ForeignEnumLite)value)) {
          [self setDefaultForeignEnum:(ForeignEnumLite)value];
        } else {
          [unknownFields mergeVarintField:82 value:value];
        }
        break;
      }
      case 664: {
        int32_t value = [input readEnum];
        if (ImportEnumLiteIsValidValue((ImportEnumLite)value)) {
          [self setDefaultImportEnum:(ImportEnumLite)value];
        } else {
          [unknownFields mergeVarintField:83 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
    }
  }
}

- (BOOL)hasOptionalInt32
{
  return _result.hasOptionalInt32;
}

- (int32_t)optionalInt32
{
  return _result.optionalInt32;
}

- (TestAllTypesLite_Builder*)setOptionalInt32:(int32_t)value
{
  _result.optionalInt32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalInt32
{
  [_result clearOptionalInt32];
  return self;
}

- (BOOL)hasOptionalInt64
{
  return _result.hasOptionalInt64;
}

- (int64_t)optionalInt64
{
  return _result.optionalInt64;
}

- (TestAllTypesLite_Builder*)setOptionalInt64:(int64_t)value
{
  _result.optionalInt64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalInt64
{
  [_result clearOptionalInt64];
  return self;
}

- (BOOL)hasOptionalUint32
{
  return _result.hasOptionalUint32;
}

- (uint32_t)optionalUint32
{
  return _result.optionalUint32;
}

- (TestAllTypesLite_Builder*)setOptionalUint32:(uint32_t)value
{
  _result.optionalUint32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalUint32
{
  [_result clearOptionalUint32];
  return self;
}

- (BOOL)hasOptionalUint64
{
  return _result.hasOptionalUint64;
}

- (uint64_t)optionalUint64
{
  return _result.optionalUint64;
}

- (TestAllTypesLite_Builder*)setOptionalUint64:(uint64_t)value
{
  _result.optionalUint64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalUint64
{
  [_result clearOptionalUint64];
  return self;
}

- (BOOL)hasOptionalSint32
{
  return _result.hasOptionalSint32;
}

- (int32_t)optionalSint32
{
  return _result.optionalSint32;
}

- (TestAllTypesLite_Builder*)setOptionalSint32:(int32_t)value
{
  _result.optionalSint32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalSint32
{
  [_result clearOptionalSint32];
  return self;
}

- (BOOL)hasOptionalSint64
{
  return _result.hasOptionalSint64;
}

- (int64_t)optionalSint64
{
  return _result.optionalSint64;
}

- (TestAllTypesLite_Builder*)setOptionalSint64:(int64_t)value
{
  _result.optionalSint64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalSint64
{
  [_result clearOptionalSint64];
  return self;
}

- (BOOL)hasOptionalFixed32
{
  return _result.hasOptionalFixed32;
}

- (uint32_t)optionalFixed32
{
  return _result.optionalFixed32;
}

- (TestAllTypesLite_Builder*)setOptionalFixed32:(uint32_t)value
{
  _result.optionalFixed32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalFixed32
{
  [_result clearOptionalFixed32];
  return self;
}

- (BOOL)hasOptionalFixed64
{
  return _result.hasOptionalFixed64;
}

- (uint64_t)optionalFixed64
{
  return _result.optionalFixed64;
}

- (TestAllTypesLite_Builder*)setOptionalFixed64:(uint64_t)value
{
  _result.optionalFixed64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalFixed64
{
  [_result clearOptionalFixed64];
  return self;
}

- (BOOL)hasOptionalSfixed32
{
  return _result.hasOptionalSfixed32;
}

- (int32_t)optionalSfixed32
{
  return _result.optionalSfixed32;
}

- (TestAllTypesLite_Builder*)setOptionalSfixed32:(int32_t)value
{
  _result.optionalSfixed32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalSfixed32
{
  [_result clearOptionalSfixed32];
  return self;
}

- (BOOL)hasOptionalSfixed64
{
  return _result.hasOptionalSfixed64;
}

- (int64_t)optionalSfixed64
{
  return _result.optionalSfixed64;
}

- (TestAllTypesLite_Builder*)setOptionalSfixed64:(int64_t)value
{
  _result.optionalSfixed64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalSfixed64
{
  [_result clearOptionalSfixed64];
  return self;
}

- (BOOL)hasOptionalFloat
{
  return _result.hasOptionalFloat;
}

- (Float32)optionalFloat
{
  return _result.optionalFloat;
}

- (TestAllTypesLite_Builder*)setOptionalFloat:(Float32)value
{
  _result.optionalFloat = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalFloat
{
  [_result clearOptionalFloat];
  return self;
}

- (BOOL)hasOptionalDouble
{
  return _result.hasOptionalDouble;
}

- (Float64)optionalDouble
{
  return _result.optionalDouble;
}

- (TestAllTypesLite_Builder*)setOptionalDouble:(Float64)value
{
  _result.optionalDouble = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalDouble
{
  [_result clearOptionalDouble];
  return self;
}

- (BOOL)hasOptionalBool
{
  return _result.hasOptionalBool;
}

- (BOOL)optionalBool
{
  return _result.optionalBool;
}

- (TestAllTypesLite_Builder*)setOptionalBool:(BOOL)value
{
  _result.optionalBool = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalBool
{
  [_result clearOptionalBool];
  return self;
}

- (BOOL)hasOptionalString
{
  return _result.hasOptionalString;
}

- (NSString *)optionalString
{
  return _result.optionalString;
}

- (TestAllTypesLite_Builder*)setOptionalString:(NSString *)value
{
  _result.optionalString = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalString
{
  [_result clearOptionalString];
  return self;
}

- (BOOL)hasOptionalBytes
{
  return _result.hasOptionalBytes;
}

- (NSData *)optionalBytes
{
  return _result.optionalBytes;
}

- (TestAllTypesLite_Builder*)setOptionalBytes:(NSData *)value
{
  _result.optionalBytes = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalBytes
{
  [_result clearOptionalBytes];
  return self;
}

- (BOOL)hasOptionalGroup
{
  return _result.hasOptionalGroup;
}

- (TestAllTypesLite_OptionalGroup *)optionalGroup
{
  return _result.optionalGroup;
}

- (TestAllTypesLite_Builder *)setOptionalGroup:(TestAllTypesLite_OptionalGroup *)value
{
  _result.optionalGroup = value;
  return self;
}

- (TestAllTypesLite_Builder *)setOptionalGroupBuilder:(TestAllTypesLite_OptionalGroup_Builder *)builderForValue
{
  return [self setOptionalGroup:[builderForValue build]];
}

- (TestAllTypesLite_Builder *)mergeOptionalGroup:(TestAllTypesLite_OptionalGroup *)value
{
  if (_result.hasOptionalGroup && _result.optionalGroup != nil) {
    _result.optionalGroup = [[[TestAllTypesLite_OptionalGroup builderWithPrototype:_result.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    _result.optionalGroup = value;
  }
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalGroup
{
  [_result clearOptionalGroup];
  return self;
}

- (BOOL)hasOptionalNestedMessage
{
  return _result.hasOptionalNestedMessage;
}

- (TestAllTypesLite_NestedMessage *)optionalNestedMessage
{
  return _result.optionalNestedMessage;
}

- (TestAllTypesLite_Builder *)setOptionalNestedMessage:(TestAllTypesLite_NestedMessage *)value
{
  _result.optionalNestedMessage = value;
  return self;
}

- (TestAllTypesLite_Builder *)setOptionalNestedMessageBuilder:(TestAllTypesLite_NestedMessage_Builder *)builderForValue
{
  return [self setOptionalNestedMessage:[builderForValue build]];
}

- (TestAllTypesLite_Builder *)mergeOptionalNestedMessage:(TestAllTypesLite_NestedMessage *)value
{
  if (_result.hasOptionalNestedMessage && _result.optionalNestedMessage != nil) {
    _result.optionalNestedMessage = [[[TestAllTypesLite_NestedMessage builderWithPrototype:_result.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalNestedMessage = value;
  }
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalNestedMessage
{
  [_result clearOptionalNestedMessage];
  return self;
}

- (BOOL)hasOptionalForeignMessage
{
  return _result.hasOptionalForeignMessage;
}

- (ForeignMessageLite *)optionalForeignMessage
{
  return _result.optionalForeignMessage;
}

- (TestAllTypesLite_Builder *)setOptionalForeignMessage:(ForeignMessageLite *)value
{
  _result.optionalForeignMessage = value;
  return self;
}

- (TestAllTypesLite_Builder *)setOptionalForeignMessageBuilder:(ForeignMessageLite_Builder *)builderForValue
{
  return [self setOptionalForeignMessage:[builderForValue build]];
}

- (TestAllTypesLite_Builder *)mergeOptionalForeignMessage:(ForeignMessageLite *)value
{
  if (_result.hasOptionalForeignMessage && _result.optionalForeignMessage != nil) {
    _result.optionalForeignMessage = [[[ForeignMessageLite builderWithPrototype:_result.optionalForeignMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalForeignMessage = value;
  }
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalForeignMessage
{
  [_result clearOptionalForeignMessage];
  return self;
}

- (BOOL)hasOptionalImportMessage
{
  return _result.hasOptionalImportMessage;
}

- (ImportMessageLite *)optionalImportMessage
{
  return _result.optionalImportMessage;
}

- (TestAllTypesLite_Builder *)setOptionalImportMessage:(ImportMessageLite *)value
{
  _result.optionalImportMessage = value;
  return self;
}

- (TestAllTypesLite_Builder *)setOptionalImportMessageBuilder:(ImportMessageLite_Builder *)builderForValue
{
  return [self setOptionalImportMessage:[builderForValue build]];
}

- (TestAllTypesLite_Builder *)mergeOptionalImportMessage:(ImportMessageLite *)value
{
  if (_result.hasOptionalImportMessage && _result.optionalImportMessage != nil) {
    _result.optionalImportMessage = [[[ImportMessageLite builderWithPrototype:_result.optionalImportMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalImportMessage = value;
  }
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalImportMessage
{
  [_result clearOptionalImportMessage];
  return self;
}

- (BOOL)hasOptionalNestedEnum
{
  return _result.hasOptionalNestedEnum;
}

- (TestAllTypesLite_NestedEnum)optionalNestedEnum
{
  return _result.optionalNestedEnum;
}

- (TestAllTypesLite_Builder *)setOptionalNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  _result.optionalNestedEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalNestedEnum
{
  [_result clearOptionalNestedEnum];
  return self;
}

- (BOOL)hasOptionalForeignEnum
{
  return _result.hasOptionalForeignEnum;
}

- (ForeignEnumLite)optionalForeignEnum
{
  return _result.optionalForeignEnum;
}

- (TestAllTypesLite_Builder *)setOptionalForeignEnum:(ForeignEnumLite)value
{
  _result.optionalForeignEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalForeignEnum
{
  [_result clearOptionalForeignEnum];
  return self;
}

- (BOOL)hasOptionalImportEnum
{
  return _result.hasOptionalImportEnum;
}

- (ImportEnumLite)optionalImportEnum
{
  return _result.optionalImportEnum;
}

- (TestAllTypesLite_Builder *)setOptionalImportEnum:(ImportEnumLite)value
{
  _result.optionalImportEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearOptionalImportEnum
{
  [_result clearOptionalImportEnum];
  return self;
}

- (BOOL)hasOptionalStringPiece
{
  return _result.hasOptionalStringPiece;
}

- (NSString *)optionalStringPiece
{
  return _result.optionalStringPiece;
}

- (TestAllTypesLite_Builder*)setOptionalStringPiece:(NSString *)value
{
  _result.optionalStringPiece = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalStringPiece
{
  [_result clearOptionalStringPiece];
  return self;
}

- (BOOL)hasOptionalCord
{
  return _result.hasOptionalCord;
}

- (NSString *)optionalCord
{
  return _result.optionalCord;
}

- (TestAllTypesLite_Builder*)setOptionalCord:(NSString *)value
{
  _result.optionalCord = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearOptionalCord
{
  [_result clearOptionalCord];
  return self;
}

- (PBAppendableArray *)repeatedInt32
{
  return _result.repeatedInt32;
}

- (int32_t)repeatedInt32AtIndex:(NSUInteger)index
{
  return [_result repeatedInt32AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedInt32:(int32_t)value
{
  [_result addRepeatedInt32:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedInt32Array:(NSArray *)array
{
  [_result setRepeatedInt32Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt32Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedInt32
{
  [_result clearRepeatedInt32];
  return self;
}

- (PBAppendableArray *)repeatedInt64
{
  return _result.repeatedInt64;
}

- (int64_t)repeatedInt64AtIndex:(NSUInteger)index
{
  return [_result repeatedInt64AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedInt64:(int64_t)value
{
  [_result addRepeatedInt64:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedInt64Array:(NSArray *)array
{
  [_result setRepeatedInt64Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedInt64Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedInt64
{
  [_result clearRepeatedInt64];
  return self;
}

- (PBAppendableArray *)repeatedUint32
{
  return _result.repeatedUint32;
}

- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index
{
  return [_result repeatedUint32AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedUint32:(uint32_t)value
{
  [_result addRepeatedUint32:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedUint32Array:(NSArray *)array
{
  [_result setRepeatedUint32Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedUint32Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedUint32
{
  [_result clearRepeatedUint32];
  return self;
}

- (PBAppendableArray *)repeatedUint64
{
  return _result.repeatedUint64;
}

- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index
{
  return [_result repeatedUint64AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedUint64:(uint64_t)value
{
  [_result addRepeatedUint64:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedUint64Array:(NSArray *)array
{
  [_result setRepeatedUint64Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedUint64Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedUint64
{
  [_result clearRepeatedUint64];
  return self;
}

- (PBAppendableArray *)repeatedSint32
{
  return _result.repeatedSint32;
}

- (int32_t)repeatedSint32AtIndex:(NSUInteger)index
{
  return [_result repeatedSint32AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedSint32:(int32_t)value
{
  [_result addRepeatedSint32:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSint32Array:(NSArray *)array
{
  [_result setRepeatedSint32Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSint32Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedSint32
{
  [_result clearRepeatedSint32];
  return self;
}

- (PBAppendableArray *)repeatedSint64
{
  return _result.repeatedSint64;
}

- (int64_t)repeatedSint64AtIndex:(NSUInteger)index
{
  return [_result repeatedSint64AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedSint64:(int64_t)value
{
  [_result addRepeatedSint64:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSint64Array:(NSArray *)array
{
  [_result setRepeatedSint64Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSint64Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedSint64
{
  [_result clearRepeatedSint64];
  return self;
}

- (PBAppendableArray *)repeatedFixed32
{
  return _result.repeatedFixed32;
}

- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed32AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedFixed32:(uint32_t)value
{
  [_result addRepeatedFixed32:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFixed32Array:(NSArray *)array
{
  [_result setRepeatedFixed32Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed32Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedFixed32
{
  [_result clearRepeatedFixed32];
  return self;
}

- (PBAppendableArray *)repeatedFixed64
{
  return _result.repeatedFixed64;
}

- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index
{
  return [_result repeatedFixed64AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedFixed64:(uint64_t)value
{
  [_result addRepeatedFixed64:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFixed64Array:(NSArray *)array
{
  [_result setRepeatedFixed64Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedFixed64Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedFixed64
{
  [_result clearRepeatedFixed64];
  return self;
}

- (PBAppendableArray *)repeatedSfixed32
{
  return _result.repeatedSfixed32;
}

- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index
{
  return [_result repeatedSfixed32AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedSfixed32:(int32_t)value
{
  [_result addRepeatedSfixed32:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSfixed32Array:(NSArray *)array
{
  [_result setRepeatedSfixed32Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSfixed32Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedSfixed32
{
  [_result clearRepeatedSfixed32];
  return self;
}

- (PBAppendableArray *)repeatedSfixed64
{
  return _result.repeatedSfixed64;
}

- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index
{
  return [_result repeatedSfixed64AtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedSfixed64:(int64_t)value
{
  [_result addRepeatedSfixed64:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSfixed64Array:(NSArray *)array
{
  [_result setRepeatedSfixed64Array:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setRepeatedSfixed64Values:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedSfixed64
{
  [_result clearRepeatedSfixed64];
  return self;
}

- (PBAppendableArray *)repeatedFloat
{
  return _result.repeatedFloat;
}

- (Float32)repeatedFloatAtIndex:(NSUInteger)index
{
  return [_result repeatedFloatAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedFloat:(Float32)value
{
  [_result addRepeatedFloat:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFloatArray:(NSArray *)array
{
  [_result setRepeatedFloatArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setRepeatedFloatValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedFloat
{
  [_result clearRepeatedFloat];
  return self;
}

- (PBAppendableArray *)repeatedDouble
{
  return _result.repeatedDouble;
}

- (Float64)repeatedDoubleAtIndex:(NSUInteger)index
{
  return [_result repeatedDoubleAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedDouble:(Float64)value
{
  [_result addRepeatedDouble:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedDoubleArray:(NSArray *)array
{
  [_result setRepeatedDoubleArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  [_result setRepeatedDoubleValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedDouble
{
  [_result clearRepeatedDouble];
  return self;
}

- (PBAppendableArray *)repeatedBool
{
  return _result.repeatedBool;
}

- (BOOL)repeatedBoolAtIndex:(NSUInteger)index
{
  return [_result repeatedBoolAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedBool:(BOOL)value
{
  [_result addRepeatedBool:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedBoolArray:(NSArray *)array
{
  [_result setRepeatedBoolArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  [_result setRepeatedBoolValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedBool
{
  [_result clearRepeatedBool];
  return self;
}

- (NSMutableArray *)repeatedString
{
  return _result.repeatedString;
}

- (NSString *)repeatedStringAtIndex:(NSUInteger)index
{
  return [_result repeatedStringAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedString:(NSString *)value
{
  [_result addRepeatedString:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedStringArray:(NSArray *)array
{
  [_result setRepeatedStringArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedString
{
  [_result clearRepeatedString];
  return self;
}

- (NSMutableArray *)repeatedBytes
{
  return _result.repeatedBytes;
}

- (NSData *)repeatedBytesAtIndex:(NSUInteger)index
{
  return [_result repeatedBytesAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedBytes:(NSData *)value
{
  [_result addRepeatedBytes:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedBytesArray:(NSArray *)array
{
  [_result setRepeatedBytesArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedBytes
{
  [_result clearRepeatedBytes];
  return self;
}

- (NSMutableArray *)repeatedGroup
{
  return _result.repeatedGroup;
}

- (TestAllTypesLite_RepeatedGroup *)repeatedGroupAtIndex:(NSUInteger)index
{
  return [_result repeatedGroupAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedGroup:(TestAllTypesLite_RepeatedGroup *)value
{
  [_result addRepeatedGroup:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedGroupArray:(NSArray *)array
{
  [_result setRepeatedGroupArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedGroup
{
  [_result clearRepeatedGroup];
  return self;
}

- (NSMutableArray *)repeatedNestedMessage
{
  return _result.repeatedNestedMessage;
}

- (TestAllTypesLite_NestedMessage *)repeatedNestedMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedNestedMessageAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedNestedMessage:(TestAllTypesLite_NestedMessage *)value
{
  [_result addRepeatedNestedMessage:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedNestedMessageArray:(NSArray *)array
{
  [_result setRepeatedNestedMessageArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedNestedMessage
{
  [_result clearRepeatedNestedMessage];
  return self;
}

- (NSMutableArray *)repeatedForeignMessage
{
  return _result.repeatedForeignMessage;
}

- (ForeignMessageLite *)repeatedForeignMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedForeignMessageAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedForeignMessage:(ForeignMessageLite *)value
{
  [_result addRepeatedForeignMessage:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedForeignMessageArray:(NSArray *)array
{
  [_result setRepeatedForeignMessageArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedForeignMessage
{
  [_result clearRepeatedForeignMessage];
  return self;
}

- (NSMutableArray *)repeatedImportMessage
{
  return _result.repeatedImportMessage;
}

- (ImportMessageLite *)repeatedImportMessageAtIndex:(NSUInteger)index
{
  return [_result repeatedImportMessageAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedImportMessage:(ImportMessageLite *)value
{
  [_result addRepeatedImportMessage:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedImportMessageArray:(NSArray *)array
{
  [_result setRepeatedImportMessageArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedImportMessage
{
  [_result clearRepeatedImportMessage];
  return self;
}

- (PBAppendableArray *)repeatedNestedEnum
{
  return _result.repeatedNestedEnum;
}

- (TestAllTypesLite_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index{
  return [_result repeatedNestedEnumAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  [_result addRepeatedNestedEnum:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedNestedEnumArray:(NSArray *)array
{
  [_result setRepeatedNestedEnumArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedNestedEnumValues:(const TestAllTypesLite_NestedEnum *)values count:(NSUInteger)count
{
  [_result setRepeatedNestedEnumValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedNestedEnum
{
  [_result clearRepeatedNestedEnum];
  return self;
}

- (PBAppendableArray *)repeatedForeignEnum
{
  return _result.repeatedForeignEnum;
}

- (ForeignEnumLite)repeatedForeignEnumAtIndex:(NSUInteger)index{
  return [_result repeatedForeignEnumAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedForeignEnum:(ForeignEnumLite)value
{
  [_result addRepeatedForeignEnum:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedForeignEnumArray:(NSArray *)array
{
  [_result setRepeatedForeignEnumArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedForeignEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count
{
  [_result setRepeatedForeignEnumValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedForeignEnum
{
  [_result clearRepeatedForeignEnum];
  return self;
}

- (PBAppendableArray *)repeatedImportEnum
{
  return _result.repeatedImportEnum;
}

- (ImportEnumLite)repeatedImportEnumAtIndex:(NSUInteger)index{
  return [_result repeatedImportEnumAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedImportEnum:(ImportEnumLite)value
{
  [_result addRepeatedImportEnum:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedImportEnumArray:(NSArray *)array
{
  [_result setRepeatedImportEnumArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedImportEnumValues:(const ImportEnumLite *)values count:(NSUInteger)count
{
  [_result setRepeatedImportEnumValues:values count:count];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedImportEnum
{
  [_result clearRepeatedImportEnum];
  return self;
}

- (NSMutableArray *)repeatedStringPiece
{
  return _result.repeatedStringPiece;
}

- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index
{
  return [_result repeatedStringPieceAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedStringPiece:(NSString *)value
{
  [_result addRepeatedStringPiece:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedStringPieceArray:(NSArray *)array
{
  [_result setRepeatedStringPieceArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedStringPiece
{
  [_result clearRepeatedStringPiece];
  return self;
}

- (NSMutableArray *)repeatedCord
{
  return _result.repeatedCord;
}

- (NSString *)repeatedCordAtIndex:(NSUInteger)index
{
  return [_result repeatedCordAtIndex:index];
}

- (TestAllTypesLite_Builder *)addRepeatedCord:(NSString *)value
{
  [_result addRepeatedCord:value];
  return self;
}

- (TestAllTypesLite_Builder *)setRepeatedCordArray:(NSArray *)array
{
  [_result setRepeatedCordArray:array];
  return self;
}

- (TestAllTypesLite_Builder *)clearRepeatedCord
{
  [_result clearRepeatedCord];
  return self;
}

- (BOOL)hasDefaultInt32
{
  return _result.hasDefaultInt32;
}

- (int32_t)defaultInt32
{
  return _result.defaultInt32;
}

- (TestAllTypesLite_Builder*)setDefaultInt32:(int32_t)value
{
  _result.defaultInt32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultInt32
{
  [_result clearDefaultInt32];
  return self;
}

- (BOOL)hasDefaultInt64
{
  return _result.hasDefaultInt64;
}

- (int64_t)defaultInt64
{
  return _result.defaultInt64;
}

- (TestAllTypesLite_Builder*)setDefaultInt64:(int64_t)value
{
  _result.defaultInt64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultInt64
{
  [_result clearDefaultInt64];
  return self;
}

- (BOOL)hasDefaultUint32
{
  return _result.hasDefaultUint32;
}

- (uint32_t)defaultUint32
{
  return _result.defaultUint32;
}

- (TestAllTypesLite_Builder*)setDefaultUint32:(uint32_t)value
{
  _result.defaultUint32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultUint32
{
  [_result clearDefaultUint32];
  return self;
}

- (BOOL)hasDefaultUint64
{
  return _result.hasDefaultUint64;
}

- (uint64_t)defaultUint64
{
  return _result.defaultUint64;
}

- (TestAllTypesLite_Builder*)setDefaultUint64:(uint64_t)value
{
  _result.defaultUint64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultUint64
{
  [_result clearDefaultUint64];
  return self;
}

- (BOOL)hasDefaultSint32
{
  return _result.hasDefaultSint32;
}

- (int32_t)defaultSint32
{
  return _result.defaultSint32;
}

- (TestAllTypesLite_Builder*)setDefaultSint32:(int32_t)value
{
  _result.defaultSint32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultSint32
{
  [_result clearDefaultSint32];
  return self;
}

- (BOOL)hasDefaultSint64
{
  return _result.hasDefaultSint64;
}

- (int64_t)defaultSint64
{
  return _result.defaultSint64;
}

- (TestAllTypesLite_Builder*)setDefaultSint64:(int64_t)value
{
  _result.defaultSint64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultSint64
{
  [_result clearDefaultSint64];
  return self;
}

- (BOOL)hasDefaultFixed32
{
  return _result.hasDefaultFixed32;
}

- (uint32_t)defaultFixed32
{
  return _result.defaultFixed32;
}

- (TestAllTypesLite_Builder*)setDefaultFixed32:(uint32_t)value
{
  _result.defaultFixed32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultFixed32
{
  [_result clearDefaultFixed32];
  return self;
}

- (BOOL)hasDefaultFixed64
{
  return _result.hasDefaultFixed64;
}

- (uint64_t)defaultFixed64
{
  return _result.defaultFixed64;
}

- (TestAllTypesLite_Builder*)setDefaultFixed64:(uint64_t)value
{
  _result.defaultFixed64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultFixed64
{
  [_result clearDefaultFixed64];
  return self;
}

- (BOOL)hasDefaultSfixed32
{
  return _result.hasDefaultSfixed32;
}

- (int32_t)defaultSfixed32
{
  return _result.defaultSfixed32;
}

- (TestAllTypesLite_Builder*)setDefaultSfixed32:(int32_t)value
{
  _result.defaultSfixed32 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultSfixed32
{
  [_result clearDefaultSfixed32];
  return self;
}

- (BOOL)hasDefaultSfixed64
{
  return _result.hasDefaultSfixed64;
}

- (int64_t)defaultSfixed64
{
  return _result.defaultSfixed64;
}

- (TestAllTypesLite_Builder*)setDefaultSfixed64:(int64_t)value
{
  _result.defaultSfixed64 = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultSfixed64
{
  [_result clearDefaultSfixed64];
  return self;
}

- (BOOL)hasDefaultFloat
{
  return _result.hasDefaultFloat;
}

- (Float32)defaultFloat
{
  return _result.defaultFloat;
}

- (TestAllTypesLite_Builder*)setDefaultFloat:(Float32)value
{
  _result.defaultFloat = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultFloat
{
  [_result clearDefaultFloat];
  return self;
}

- (BOOL)hasDefaultDouble
{
  return _result.hasDefaultDouble;
}

- (Float64)defaultDouble
{
  return _result.defaultDouble;
}

- (TestAllTypesLite_Builder*)setDefaultDouble:(Float64)value
{
  _result.defaultDouble = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultDouble
{
  [_result clearDefaultDouble];
  return self;
}

- (BOOL)hasDefaultBool
{
  return _result.hasDefaultBool;
}

- (BOOL)defaultBool
{
  return _result.defaultBool;
}

- (TestAllTypesLite_Builder*)setDefaultBool:(BOOL)value
{
  _result.defaultBool = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultBool
{
  [_result clearDefaultBool];
  return self;
}

- (BOOL)hasDefaultString
{
  return _result.hasDefaultString;
}

- (NSString *)defaultString
{
  return _result.defaultString;
}

- (TestAllTypesLite_Builder*)setDefaultString:(NSString *)value
{
  _result.defaultString = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultString
{
  [_result clearDefaultString];
  return self;
}

- (BOOL)hasDefaultBytes
{
  return _result.hasDefaultBytes;
}

- (NSData *)defaultBytes
{
  return _result.defaultBytes;
}

- (TestAllTypesLite_Builder*)setDefaultBytes:(NSData *)value
{
  _result.defaultBytes = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultBytes
{
  [_result clearDefaultBytes];
  return self;
}

- (BOOL)hasDefaultNestedEnum
{
  return _result.hasDefaultNestedEnum;
}

- (TestAllTypesLite_NestedEnum)defaultNestedEnum
{
  return _result.defaultNestedEnum;
}

- (TestAllTypesLite_Builder *)setDefaultNestedEnum:(TestAllTypesLite_NestedEnum)value
{
  _result.defaultNestedEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearDefaultNestedEnum
{
  [_result clearDefaultNestedEnum];
  return self;
}

- (BOOL)hasDefaultForeignEnum
{
  return _result.hasDefaultForeignEnum;
}

- (ForeignEnumLite)defaultForeignEnum
{
  return _result.defaultForeignEnum;
}

- (TestAllTypesLite_Builder *)setDefaultForeignEnum:(ForeignEnumLite)value
{
  _result.defaultForeignEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearDefaultForeignEnum
{
  [_result clearDefaultForeignEnum];
  return self;
}

- (BOOL)hasDefaultImportEnum
{
  return _result.hasDefaultImportEnum;
}

- (ImportEnumLite)defaultImportEnum
{
  return _result.defaultImportEnum;
}

- (TestAllTypesLite_Builder *)setDefaultImportEnum:(ImportEnumLite)value
{
  _result.defaultImportEnum = value;
  return self;
}

- (TestAllTypesLite_Builder *)clearDefaultImportEnum
{
  [_result clearDefaultImportEnum];
  return self;
}

- (BOOL)hasDefaultStringPiece
{
  return _result.hasDefaultStringPiece;
}

- (NSString *)defaultStringPiece
{
  return _result.defaultStringPiece;
}

- (TestAllTypesLite_Builder*)setDefaultStringPiece:(NSString *)value
{
  _result.defaultStringPiece = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultStringPiece
{
  [_result clearDefaultStringPiece];
  return self;
}

- (BOOL)hasDefaultCord
{
  return _result.hasDefaultCord;
}

- (NSString *)defaultCord
{
  return _result.defaultCord;
}

- (TestAllTypesLite_Builder*)setDefaultCord:(NSString *)value
{
  _result.defaultCord = value;
  return self;
}

- (TestAllTypesLite_Builder*)clearDefaultCord
{
  [_result clearDefaultCord];
  return self;
}

@end


@interface ForeignMessageLite ()


@end


@implementation ForeignMessageLite

- (BOOL)hasC
{
  return _hasC;
}

- (void)setC:(int32_t)value
{
  _hasC = YES;
  _c = value;
}

- (void)clearC
{
  _hasC = NO;
  _c = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _c = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasC) {
    [output writeInt32:1 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasC) {
    size_ += computeInt32Size(1, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (ForeignMessageLite *)parseFromData:(NSData *)data
{
  return (ForeignMessageLite *)[[[ForeignMessageLite builder] mergeFromData:data] build];
}

+ (ForeignMessageLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessageLite *)parseFromInputStream:(NSInputStream *)input
{
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromInputStream:input] build];
}

+ (ForeignMessageLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessageLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[ForeignMessageLite builder] mergeFromCodedInputStream:input] build];
}

+ (ForeignMessageLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[ForeignMessageLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (ForeignMessageLite_Builder *)builder
{
  return [[ForeignMessageLite_Builder alloc] init];
}

+ (ForeignMessageLite_Builder *)builderWithPrototype:(ForeignMessageLite *)prototype
{
  return [[ForeignMessageLite builder] mergeFrom:prototype];
}

- (ForeignMessageLite_Builder *)builder
{
  return [ForeignMessageLite builder];
}

- (ForeignMessageLite_Builder *)toBuilder
{
  return [ForeignMessageLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", @(self.c)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignMessageLite class]]) {
    return NO;
  }
  ForeignMessageLite *otherMessage = other;
  return
    (self.hasC == otherMessage.hasC && (!self.hasC || self.c == otherMessage.c)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasC) {
    hashCode = hashCode * 31 + [@(self.c) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface ForeignMessageLite_Builder()

@property (strong) ForeignMessageLite *result;

@end


@implementation ForeignMessageLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[ForeignMessageLite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (ForeignMessageLite_Builder *)clear
{
  self.result = [[ForeignMessageLite alloc] init];
  return self;
}

- (ForeignMessageLite_Builder *)clone
{
  return [ForeignMessageLite builderWithPrototype:_result];
}

- (ForeignMessageLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (ForeignMessageLite *)buildPartial
{
  ForeignMessageLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (ForeignMessageLite_Builder *)mergeFrom:(ForeignMessageLite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (ForeignMessageLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (ForeignMessageLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasC
{
  return _result.hasC;
}

- (int32_t)c
{
  return _result.c;
}

- (ForeignMessageLite_Builder*)setC:(int32_t)value
{
  _result.c = value;
  return self;
}

- (ForeignMessageLite_Builder*)clearC
{
  [_result clearC];
  return self;
}

@end


@interface TestPackedTypesLite ()


@end


@implementation TestPackedTypesLite

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (int32_t)packedInt32AtIndex:(NSUInteger)index
{
  return [_packedInt32 int32AtIndex:index];
}
- (void)addPackedInt32:(int32_t)value
{
  if (_packedInt32 == nil) {
    _packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedInt32 addInt32:value];
}

- (void)addPackedInt32Array:(NSArray *)array
{
  if (_packedInt32 == nil) {
    _packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedInt32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedInt32Array:(NSArray *)array
{
  _packedInt32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedInt32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedInt32
{
  _packedInt32 = nil;
}

- (int64_t)packedInt64AtIndex:(NSUInteger)index
{
  return [_packedInt64 int64AtIndex:index];
}
- (void)addPackedInt64:(int64_t)value
{
  if (_packedInt64 == nil) {
    _packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedInt64 addInt64:value];
}

- (void)addPackedInt64Array:(NSArray *)array
{
  if (_packedInt64 == nil) {
    _packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedInt64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedInt64Array:(NSArray *)array
{
  _packedInt64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedInt64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedInt64
{
  _packedInt64 = nil;
}

- (uint32_t)packedUint32AtIndex:(NSUInteger)index
{
  return [_packedUint32 uint32AtIndex:index];
}
- (void)addPackedUint32:(uint32_t)value
{
  if (_packedUint32 == nil) {
    _packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedUint32 addUint32:value];
}

- (void)addPackedUint32Array:(NSArray *)array
{
  if (_packedUint32 == nil) {
    _packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedUint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setPackedUint32Array:(NSArray *)array
{
  _packedUint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setPackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _packedUint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearPackedUint32
{
  _packedUint32 = nil;
}

- (uint64_t)packedUint64AtIndex:(NSUInteger)index
{
  return [_packedUint64 uint64AtIndex:index];
}
- (void)addPackedUint64:(uint64_t)value
{
  if (_packedUint64 == nil) {
    _packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedUint64 addUint64:value];
}

- (void)addPackedUint64Array:(NSArray *)array
{
  if (_packedUint64 == nil) {
    _packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedUint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setPackedUint64Array:(NSArray *)array
{
  _packedUint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setPackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _packedUint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearPackedUint64
{
  _packedUint64 = nil;
}

- (int32_t)packedSint32AtIndex:(NSUInteger)index
{
  return [_packedSint32 int32AtIndex:index];
}
- (void)addPackedSint32:(int32_t)value
{
  if (_packedSint32 == nil) {
    _packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSint32 addInt32:value];
}

- (void)addPackedSint32Array:(NSArray *)array
{
  if (_packedSint32 == nil) {
    _packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSint32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedSint32Array:(NSArray *)array
{
  _packedSint32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedSint32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedSint32
{
  _packedSint32 = nil;
}

- (int64_t)packedSint64AtIndex:(NSUInteger)index
{
  return [_packedSint64 int64AtIndex:index];
}
- (void)addPackedSint64:(int64_t)value
{
  if (_packedSint64 == nil) {
    _packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSint64 addInt64:value];
}

- (void)addPackedSint64Array:(NSArray *)array
{
  if (_packedSint64 == nil) {
    _packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSint64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedSint64Array:(NSArray *)array
{
  _packedSint64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedSint64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedSint64
{
  _packedSint64 = nil;
}

- (uint32_t)packedFixed32AtIndex:(NSUInteger)index
{
  return [_packedFixed32 uint32AtIndex:index];
}
- (void)addPackedFixed32:(uint32_t)value
{
  if (_packedFixed32 == nil) {
    _packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedFixed32 addUint32:value];
}

- (void)addPackedFixed32Array:(NSArray *)array
{
  if (_packedFixed32 == nil) {
    _packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_packedFixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32]];
}

- (void)setPackedFixed32Array:(NSArray *)array
{
  _packedFixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
}

- (void)setPackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  _packedFixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
}

- (void)clearPackedFixed32
{
  _packedFixed32 = nil;
}

- (uint64_t)packedFixed64AtIndex:(NSUInteger)index
{
  return [_packedFixed64 uint64AtIndex:index];
}
- (void)addPackedFixed64:(uint64_t)value
{
  if (_packedFixed64 == nil) {
    _packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedFixed64 addUint64:value];
}

- (void)addPackedFixed64Array:(NSArray *)array
{
  if (_packedFixed64 == nil) {
    _packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_packedFixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64]];
}

- (void)setPackedFixed64Array:(NSArray *)array
{
  _packedFixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
}

- (void)setPackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  _packedFixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
}

- (void)clearPackedFixed64
{
  _packedFixed64 = nil;
}

- (int32_t)packedSfixed32AtIndex:(NSUInteger)index
{
  return [_packedSfixed32 int32AtIndex:index];
}
- (void)addPackedSfixed32:(int32_t)value
{
  if (_packedSfixed32 == nil) {
    _packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSfixed32 addInt32:value];
}

- (void)addPackedSfixed32Array:(NSArray *)array
{
  if (_packedSfixed32 == nil) {
    _packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedSfixed32 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedSfixed32Array:(NSArray *)array
{
  _packedSfixed32 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  _packedSfixed32 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedSfixed32
{
  _packedSfixed32 = nil;
}

- (int64_t)packedSfixed64AtIndex:(NSUInteger)index
{
  return [_packedSfixed64 int64AtIndex:index];
}
- (void)addPackedSfixed64:(int64_t)value
{
  if (_packedSfixed64 == nil) {
    _packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSfixed64 addInt64:value];
}

- (void)addPackedSfixed64Array:(NSArray *)array
{
  if (_packedSfixed64 == nil) {
    _packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_packedSfixed64 appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64]];
}

- (void)setPackedSfixed64Array:(NSArray *)array
{
  _packedSfixed64 = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
}

- (void)setPackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  _packedSfixed64 = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
}

- (void)clearPackedSfixed64
{
  _packedSfixed64 = nil;
}

- (Float32)packedFloatAtIndex:(NSUInteger)index
{
  return [_packedFloat floatAtIndex:index];
}
- (void)addPackedFloat:(Float32)value
{
  if (_packedFloat == nil) {
    _packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_packedFloat addFloat:value];
}

- (void)addPackedFloatArray:(NSArray *)array
{
  if (_packedFloat == nil) {
    _packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_packedFloat appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat]];
}

- (void)setPackedFloatArray:(NSArray *)array
{
  _packedFloat = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
}

- (void)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  _packedFloat = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
}

- (void)clearPackedFloat
{
  _packedFloat = nil;
}

- (Float64)packedDoubleAtIndex:(NSUInteger)index
{
  return [_packedDouble doubleAtIndex:index];
}
- (void)addPackedDouble:(Float64)value
{
  if (_packedDouble == nil) {
    _packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_packedDouble addDouble:value];
}

- (void)addPackedDoubleArray:(NSArray *)array
{
  if (_packedDouble == nil) {
    _packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_packedDouble appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble]];
}

- (void)setPackedDoubleArray:(NSArray *)array
{
  _packedDouble = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
}

- (void)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  _packedDouble = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
}

- (void)clearPackedDouble
{
  _packedDouble = nil;
}

- (BOOL)packedBoolAtIndex:(NSUInteger)index
{
  return [_packedBool boolAtIndex:index];
}
- (void)addPackedBool:(BOOL)value
{
  if (_packedBool == nil) {
    _packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_packedBool addBool:value];
}

- (void)addPackedBoolArray:(NSArray *)array
{
  if (_packedBool == nil) {
    _packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_packedBool appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool]];
}

- (void)setPackedBoolArray:(NSArray *)array
{
  _packedBool = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
}

- (void)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  _packedBool = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
}

- (void)clearPackedBool
{
  _packedBool = nil;
}

- (ForeignEnumLite)packedEnumAtIndex:(NSUInteger)index
{
  return (ForeignEnumLite)[_packedEnum int32AtIndex:index];
}

- (void)addPackedEnum:(ForeignEnumLite)value
{
  if (_packedEnum == nil) {
    _packedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedEnum addInt32:value];
}

- (void)addPackedEnumArray:(NSArray *)array
{
  if (_packedEnum == nil) {
    _packedEnum = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_packedEnum appendArray:[PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
}

- (void)setPackedEnumArray:(NSArray *)array
{
  _packedEnum = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
}

- (void)setPackedEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count
{
  _packedEnum = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
}

- (void)clearPackedEnum
{
  _packedEnum = nil;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  const NSUInteger packedInt32Count = self.packedInt32.count;
  if (packedInt32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedInt32.data;
    [output writeRawVarint32:722];
    [output writeRawVarint32:_packedInt32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt32Count; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedInt64Count = self.packedInt64.count;
  if (packedInt64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedInt64.data;
    [output writeRawVarint32:730];
    [output writeRawVarint32:_packedInt64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt64Count; ++i) {
      [output writeInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedUint32Count = self.packedUint32.count;
  if (packedUint32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.packedUint32.data;
    [output writeRawVarint32:738];
    [output writeRawVarint32:_packedUint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint32Count; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedUint64Count = self.packedUint64.count;
  if (packedUint64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.packedUint64.data;
    [output writeRawVarint32:746];
    [output writeRawVarint32:_packedUint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint64Count; ++i) {
      [output writeUInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedSint32Count = self.packedSint32.count;
  if (packedSint32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedSint32.data;
    [output writeRawVarint32:754];
    [output writeRawVarint32:_packedSint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint32Count; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedSint64Count = self.packedSint64.count;
  if (packedSint64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedSint64.data;
    [output writeRawVarint32:762];
    [output writeRawVarint32:_packedSint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint64Count; ++i) {
      [output writeSInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed32Count = self.packedFixed32.count;
  if (packedFixed32Count > 0) {
    const uint32_t *values = (const uint32_t *)self.packedFixed32.data;
    [output writeRawVarint32:770];
    [output writeRawVarint32:_packedFixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed32Count; ++i) {
      [output writeFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed64Count = self.packedFixed64.count;
  if (packedFixed64Count > 0) {
    const uint64_t *values = (const uint64_t *)self.packedFixed64.data;
    [output writeRawVarint32:778];
    [output writeRawVarint32:_packedFixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed64Count; ++i) {
      [output writeFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed32Count = self.packedSfixed32.count;
  if (packedSfixed32Count > 0) {
    const int32_t *values = (const int32_t *)self.packedSfixed32.data;
    [output writeRawVarint32:786];
    [output writeRawVarint32:_packedSfixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed32Count; ++i) {
      [output writeSFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed64Count = self.packedSfixed64.count;
  if (packedSfixed64Count > 0) {
    const int64_t *values = (const int64_t *)self.packedSfixed64.data;
    [output writeRawVarint32:794];
    [output writeRawVarint32:_packedSfixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed64Count; ++i) {
      [output writeSFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedFloatCount = self.packedFloat.count;
  if (packedFloatCount > 0) {
    const Float32 *values = (const Float32 *)self.packedFloat.data;
    [output writeRawVarint32:802];
    [output writeRawVarint32:_packedFloatMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFloatCount; ++i) {
      [output writeFloatNoTag:values[i]];
    }
  }
  const NSUInteger packedDoubleCount = self.packedDouble.count;
  if (packedDoubleCount > 0) {
    const Float64 *values = (const Float64 *)self.packedDouble.data;
    [output writeRawVarint32:810];
    [output writeRawVarint32:_packedDoubleMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedDoubleCount; ++i) {
      [output writeDoubleNoTag:values[i]];
    }
  }
  const NSUInteger packedBoolCount = self.packedBool.count;
  if (packedBoolCount > 0) {
    const BOOL *values = (const BOOL *)self.packedBool.data;
    [output writeRawVarint32:818];
    [output writeRawVarint32:_packedBoolMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedBoolCount; ++i) {
      [output writeBoolNoTag:values[i]];
    }
  }
  const NSUInteger packedEnumCount = self.packedEnum.count;
  const ForeignEnumLite *packedEnumValues = (const ForeignEnumLite *)self.packedEnum.data;
  if (packedEnumCount > 0) {
    [output writeRawVarint32:826];
    [output writeRawVarint32:_packedEnumMemoizedSerializedSize];
  }
  for (NSUInteger i = 0; i < packedEnumCount; ++i) {
    [output writeEnumNoTag:packedEnumValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedInt32.count;
    const int32_t *values = (const int32_t *)self.packedInt32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedInt64.count;
    const int64_t *values = (const int64_t *)self.packedInt64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedUint32.count;
    const uint32_t *values = (const uint32_t *)self.packedUint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedUint64.count;
    const uint64_t *values = (const uint64_t *)self.packedUint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSint32.count;
    const int32_t *values = (const int32_t *)self.packedSint32.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSint64.count;
    const int64_t *values = (const int64_t *)self.packedSint64.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSfixed32.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed32MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedSfixed64.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed64MemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedFloat.count;
    dataSize = 4 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFloatMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedDouble.count;
    dataSize = 8 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedDoubleMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedBool.count;
    dataSize = 1 * count;
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedBoolMemoizedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.packedEnum.count;
    const ForeignEnumLite *values = (const ForeignEnumLite *)self.packedEnum.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeRawVarint32Size(dataSize);
    }
    _packedEnumMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestPackedTypesLite *)parseFromData:(NSData *)data
{
  return (TestPackedTypesLite *)[[[TestPackedTypesLite builder] mergeFromData:data] build];
}

+ (TestPackedTypesLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypesLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromInputStream:input] build];
}

+ (TestPackedTypesLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypesLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestPackedTypesLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestPackedTypesLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestPackedTypesLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedTypesLite_Builder *)builder
{
  return [[TestPackedTypesLite_Builder alloc] init];
}

+ (TestPackedTypesLite_Builder *)builderWithPrototype:(TestPackedTypesLite *)prototype
{
  return [[TestPackedTypesLite builder] mergeFrom:prototype];
}

- (TestPackedTypesLite_Builder *)builder
{
  return [TestPackedTypesLite builder];
}

- (TestPackedTypesLite_Builder *)toBuilder
{
  return [TestPackedTypesLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  for (NSUInteger i = 0, listCount = self.packedInt32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt32", @([self.packedInt32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedInt64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt64", @([self.packedInt64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedUint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint32", @([self.packedUint32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedUint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint64", @([self.packedUint64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSint32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint32", @([self.packedSint32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSint64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint64", @([self.packedSint64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed32", @([self.packedFixed32 uint32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed64", @([self.packedFixed64 uint64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed32.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed32", @([self.packedSfixed32 int32AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed64.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed64", @([self.packedSfixed64 int64AtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedFloat.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFloat", @([self.packedFloat floatAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedDouble.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedDouble", @([self.packedDouble doubleAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedBool.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedBool", @([self.packedBool boolAtIndex:i])];
  }
  for (NSUInteger i = 0, listCount = self.packedEnum.count; i < listCount; i++) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedEnum", ForeignEnumLiteToString((ForeignEnumLite)[self.packedEnum int32AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedTypesLite class]]) {
    return NO;
  }
  TestPackedTypesLite *otherMessage = other;
  return
    [self.packedInt32 isEqualToArray:otherMessage.packedInt32] &&
    [self.packedInt64 isEqualToArray:otherMessage.packedInt64] &&
    [self.packedUint32 isEqualToArray:otherMessage.packedUint32] &&
    [self.packedUint64 isEqualToArray:otherMessage.packedUint64] &&
    [self.packedSint32 isEqualToArray:otherMessage.packedSint32] &&
    [self.packedSint64 isEqualToArray:otherMessage.packedSint64] &&
    [self.packedFixed32 isEqualToArray:otherMessage.packedFixed32] &&
    [self.packedFixed64 isEqualToArray:otherMessage.packedFixed64] &&
    [self.packedSfixed32 isEqualToArray:otherMessage.packedSfixed32] &&
    [self.packedSfixed64 isEqualToArray:otherMessage.packedSfixed64] &&
    [self.packedFloat isEqualToArray:otherMessage.packedFloat] &&
    [self.packedDouble isEqualToArray:otherMessage.packedDouble] &&
    [self.packedBool isEqualToArray:otherMessage.packedBool] &&
    [self.packedEnum isEqualToArray:otherMessage.packedEnum] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  for (NSUInteger i = 0, listCount = self.packedInt32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedInt32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedInt64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedInt64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedUint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedUint32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedUint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedUint64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSint32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSint32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSint64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSint64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFixed32 uint32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFixed64 uint64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed32.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSfixed32 int32AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedSfixed64.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedSfixed64 int64AtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedFloat.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedFloat floatAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedDouble.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedDouble doubleAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedBool.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [@([self.packedBool boolAtIndex:i]) hash];
  }
  for (NSUInteger i = 0, listCount = self.packedEnum.count; i < listCount; i++) {
    hashCode = hashCode * 31 + [self.packedEnum int32AtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestPackedTypesLite_Builder()

@property (strong) TestPackedTypesLite *result;

@end


@implementation TestPackedTypesLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestPackedTypesLite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestPackedTypesLite_Builder *)clear
{
  self.result = [[TestPackedTypesLite alloc] init];
  return self;
}

- (TestPackedTypesLite_Builder *)clone
{
  return [TestPackedTypesLite builderWithPrototype:_result];
}

- (TestPackedTypesLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestPackedTypesLite *)buildPartial
{
  TestPackedTypesLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestPackedTypesLite_Builder *)mergeFrom:(TestPackedTypesLite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.packedInt32.count > 0) {
    if (_result.packedInt32 == nil) {
      _result.packedInt32 = [other.packedInt32 copy];
    } else {
      [_result.packedInt32 appendArray:other.packedInt32];
    }
  }
  if (other.packedInt64.count > 0) {
    if (_result.packedInt64 == nil) {
      _result.packedInt64 = [other.packedInt64 copy];
    } else {
      [_result.packedInt64 appendArray:other.packedInt64];
    }
  }
  if (other.packedUint32.count > 0) {
    if (_result.packedUint32 == nil) {
      _result.packedUint32 = [other.packedUint32 copy];
    } else {
      [_result.packedUint32 appendArray:other.packedUint32];
    }
  }
  if (other.packedUint64.count > 0) {
    if (_result.packedUint64 == nil) {
      _result.packedUint64 = [other.packedUint64 copy];
    } else {
      [_result.packedUint64 appendArray:other.packedUint64];
    }
  }
  if (other.packedSint32.count > 0) {
    if (_result.packedSint32 == nil) {
      _result.packedSint32 = [other.packedSint32 copy];
    } else {
      [_result.packedSint32 appendArray:other.packedSint32];
    }
  }
  if (other.packedSint64.count > 0) {
    if (_result.packedSint64 == nil) {
      _result.packedSint64 = [other.packedSint64 copy];
    } else {
      [_result.packedSint64 appendArray:other.packedSint64];
    }
  }
  if (other.packedFixed32.count > 0) {
    if (_result.packedFixed32 == nil) {
      _result.packedFixed32 = [other.packedFixed32 copy];
    } else {
      [_result.packedFixed32 appendArray:other.packedFixed32];
    }
  }
  if (other.packedFixed64.count > 0) {
    if (_result.packedFixed64 == nil) {
      _result.packedFixed64 = [other.packedFixed64 copy];
    } else {
      [_result.packedFixed64 appendArray:other.packedFixed64];
    }
  }
  if (other.packedSfixed32.count > 0) {
    if (_result.packedSfixed32 == nil) {
      _result.packedSfixed32 = [other.packedSfixed32 copy];
    } else {
      [_result.packedSfixed32 appendArray:other.packedSfixed32];
    }
  }
  if (other.packedSfixed64.count > 0) {
    if (_result.packedSfixed64 == nil) {
      _result.packedSfixed64 = [other.packedSfixed64 copy];
    } else {
      [_result.packedSfixed64 appendArray:other.packedSfixed64];
    }
  }
  if (other.packedFloat.count > 0) {
    if (_result.packedFloat == nil) {
      _result.packedFloat = [other.packedFloat copy];
    } else {
      [_result.packedFloat appendArray:other.packedFloat];
    }
  }
  if (other.packedDouble.count > 0) {
    if (_result.packedDouble == nil) {
      _result.packedDouble = [other.packedDouble copy];
    } else {
      [_result.packedDouble appendArray:other.packedDouble];
    }
  }
  if (other.packedBool.count > 0) {
    if (_result.packedBool == nil) {
      _result.packedBool = [other.packedBool copy];
    } else {
      [_result.packedBool appendArray:other.packedBool];
    }
  }
  if (other.packedEnum.count > 0) {
    if (_result.packedEnum == nil) {
      _result.packedEnum = [other.packedEnum copy];
    } else {
      [_result.packedEnum appendArray:other.packedEnum];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestPackedTypesLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestPackedTypesLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 722: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt32 == nil) {
          _result.packedInt32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt32 addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 730: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt64 == nil) {
          _result.packedInt64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt64 addInt64:[input readInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 738: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint32 == nil) {
          _result.packedUint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint32 addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 746: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint64 == nil) {
          _result.packedUint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint64 addUint64:[input readUInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 754: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint32 == nil) {
          _result.packedSint32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint32 addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 762: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint64 == nil) {
          _result.packedSint64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint64 addInt64:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 770: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed32 == nil) {
          _result.packedFixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed32 addUint32:[input readFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 778: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed64 == nil) {
          _result.packedFixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed64 addUint64:[input readFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 786: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed32 == nil) {
          _result.packedSfixed32 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed32 addInt32:[input readSFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 794: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed64 == nil) {
          _result.packedSfixed64 = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed64 addInt64:[input readSFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 802: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFloat == nil) {
          _result.packedFloat = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFloat addFloat:[input readFloat]];
        }
        [input popLimit:limit];
        break;
      }
      case 810: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedDouble == nil) {
          _result.packedDouble = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedDouble addDouble:[input readDouble]];
        }
        [input popLimit:limit];
        break;
      }
      case 818: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedBool == nil) {
          _result.packedBool = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedBool addBool:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
      case 826: {
        int32_t length = [input readRawVarint32];
        int32_t oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          int32_t value = [input readEnum];
          if (ForeignEnumLiteIsValidValue(value)) {
            [self addPackedEnum:value];
          } else {
            [unknownFields mergeVarintField:103 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}

- (PBAppendableArray *)packedInt32
{
  return _result.packedInt32;
}

- (int32_t)packedInt32AtIndex:(NSUInteger)index
{
  return [_result packedInt32AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedInt32:(int32_t)value
{
  [_result addPackedInt32:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedInt32Array:(NSArray *)array
{
  [_result setPackedInt32Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedInt32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedInt32Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedInt32
{
  [_result clearPackedInt32];
  return self;
}

- (PBAppendableArray *)packedInt64
{
  return _result.packedInt64;
}

- (int64_t)packedInt64AtIndex:(NSUInteger)index
{
  return [_result packedInt64AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedInt64:(int64_t)value
{
  [_result addPackedInt64:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedInt64Array:(NSArray *)array
{
  [_result setPackedInt64Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedInt64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedInt64Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedInt64
{
  [_result clearPackedInt64];
  return self;
}

- (PBAppendableArray *)packedUint32
{
  return _result.packedUint32;
}

- (uint32_t)packedUint32AtIndex:(NSUInteger)index
{
  return [_result packedUint32AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedUint32:(uint32_t)value
{
  [_result addPackedUint32:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedUint32Array:(NSArray *)array
{
  [_result setPackedUint32Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedUint32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setPackedUint32Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedUint32
{
  [_result clearPackedUint32];
  return self;
}

- (PBAppendableArray *)packedUint64
{
  return _result.packedUint64;
}

- (uint64_t)packedUint64AtIndex:(NSUInteger)index
{
  return [_result packedUint64AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedUint64:(uint64_t)value
{
  [_result addPackedUint64:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedUint64Array:(NSArray *)array
{
  [_result setPackedUint64Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedUint64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setPackedUint64Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedUint64
{
  [_result clearPackedUint64];
  return self;
}

- (PBAppendableArray *)packedSint32
{
  return _result.packedSint32;
}

- (int32_t)packedSint32AtIndex:(NSUInteger)index
{
  return [_result packedSint32AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedSint32:(int32_t)value
{
  [_result addPackedSint32:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSint32Array:(NSArray *)array
{
  [_result setPackedSint32Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSint32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedSint32Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedSint32
{
  [_result clearPackedSint32];
  return self;
}

- (PBAppendableArray *)packedSint64
{
  return _result.packedSint64;
}

- (int64_t)packedSint64AtIndex:(NSUInteger)index
{
  return [_result packedSint64AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedSint64:(int64_t)value
{
  [_result addPackedSint64:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSint64Array:(NSArray *)array
{
  [_result setPackedSint64Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSint64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedSint64Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedSint64
{
  [_result clearPackedSint64];
  return self;
}

- (PBAppendableArray *)packedFixed32
{
  return _result.packedFixed32;
}

- (uint32_t)packedFixed32AtIndex:(NSUInteger)index
{
  return [_result packedFixed32AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedFixed32:(uint32_t)value
{
  [_result addPackedFixed32:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFixed32Array:(NSArray *)array
{
  [_result setPackedFixed32Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count
{
  [_result setPackedFixed32Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedFixed32
{
  [_result clearPackedFixed32];
  return self;
}

- (PBAppendableArray *)packedFixed64
{
  return _result.packedFixed64;
}

- (uint64_t)packedFixed64AtIndex:(NSUInteger)index
{
  return [_result packedFixed64AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedFixed64:(uint64_t)value
{
  [_result addPackedFixed64:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFixed64Array:(NSArray *)array
{
  [_result setPackedFixed64Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count
{
  [_result setPackedFixed64Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedFixed64
{
  [_result clearPackedFixed64];
  return self;
}

- (PBAppendableArray *)packedSfixed32
{
  return _result.packedSfixed32;
}

- (int32_t)packedSfixed32AtIndex:(NSUInteger)index
{
  return [_result packedSfixed32AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedSfixed32:(int32_t)value
{
  [_result addPackedSfixed32:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSfixed32Array:(NSArray *)array
{
  [_result setPackedSfixed32Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count
{
  [_result setPackedSfixed32Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedSfixed32
{
  [_result clearPackedSfixed32];
  return self;
}

- (PBAppendableArray *)packedSfixed64
{
  return _result.packedSfixed64;
}

- (int64_t)packedSfixed64AtIndex:(NSUInteger)index
{
  return [_result packedSfixed64AtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedSfixed64:(int64_t)value
{
  [_result addPackedSfixed64:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSfixed64Array:(NSArray *)array
{
  [_result setPackedSfixed64Array:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count
{
  [_result setPackedSfixed64Values:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedSfixed64
{
  [_result clearPackedSfixed64];
  return self;
}

- (PBAppendableArray *)packedFloat
{
  return _result.packedFloat;
}

- (Float32)packedFloatAtIndex:(NSUInteger)index
{
  return [_result packedFloatAtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedFloat:(Float32)value
{
  [_result addPackedFloat:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFloatArray:(NSArray *)array
{
  [_result setPackedFloatArray:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count
{
  [_result setPackedFloatValues:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedFloat
{
  [_result clearPackedFloat];
  return self;
}

- (PBAppendableArray *)packedDouble
{
  return _result.packedDouble;
}

- (Float64)packedDoubleAtIndex:(NSUInteger)index
{
  return [_result packedDoubleAtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedDouble:(Float64)value
{
  [_result addPackedDouble:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedDoubleArray:(NSArray *)array
{
  [_result setPackedDoubleArray:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count
{
  [_result setPackedDoubleValues:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedDouble
{
  [_result clearPackedDouble];
  return self;
}

- (PBAppendableArray *)packedBool
{
  return _result.packedBool;
}

- (BOOL)packedBoolAtIndex:(NSUInteger)index
{
  return [_result packedBoolAtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedBool:(BOOL)value
{
  [_result addPackedBool:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedBoolArray:(NSArray *)array
{
  [_result setPackedBoolArray:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count
{
  [_result setPackedBoolValues:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedBool
{
  [_result clearPackedBool];
  return self;
}

- (PBAppendableArray *)packedEnum
{
  return _result.packedEnum;
}

- (ForeignEnumLite)packedEnumAtIndex:(NSUInteger)index{
  return [_result packedEnumAtIndex:index];
}

- (TestPackedTypesLite_Builder *)addPackedEnum:(ForeignEnumLite)value
{
  [_result addPackedEnum:value];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedEnumArray:(NSArray *)array
{
  [_result setPackedEnumArray:array];
  return self;
}

- (TestPackedTypesLite_Builder *)setPackedEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count
{
  [_result setPackedEnumValues:values count:count];
  return self;
}

- (TestPackedTypesLite_Builder *)clearPackedEnum
{
  [_result clearPackedEnum];
  return self;
}

@end


@interface TestAllExtensionsLite ()


@end


@implementation TestAllExtensionsLite

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:1 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestAllExtensionsLite *)parseFromData:(NSData *)data
{
  return (TestAllExtensionsLite *)[[[TestAllExtensionsLite builder] mergeFromData:data] build];
}

+ (TestAllExtensionsLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensionsLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromInputStream:input] build];
}

+ (TestAllExtensionsLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensionsLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestAllExtensionsLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestAllExtensionsLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestAllExtensionsLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestAllExtensionsLite_Builder *)builder
{
  return [[TestAllExtensionsLite_Builder alloc] init];
}

+ (TestAllExtensionsLite_Builder *)builderWithPrototype:(TestAllExtensionsLite *)prototype
{
  return [[TestAllExtensionsLite builder] mergeFrom:prototype];
}

- (TestAllExtensionsLite_Builder *)builder
{
  return [TestAllExtensionsLite builder];
}

- (TestAllExtensionsLite_Builder *)toBuilder
{
  return [TestAllExtensionsLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:1 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllExtensionsLite class]]) {
    return NO;
  }
  TestAllExtensionsLite *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestAllExtensionsLite_Builder()

@property (strong) TestAllExtensionsLite *result;

@end


@implementation TestAllExtensionsLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestAllExtensionsLite alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestAllExtensionsLite_Builder *)clear
{
  self.result = [[TestAllExtensionsLite alloc] init];
  return self;
}

- (TestAllExtensionsLite_Builder *)clone
{
  return [TestAllExtensionsLite builderWithPrototype:_result];
}

- (TestAllExtensionsLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestAllExtensionsLite *)buildPartial
{
  TestAllExtensionsLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestAllExtensionsLite_Builder *)mergeFrom:(TestAllExtensionsLite *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestAllExtensionsLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestAllExtensionsLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface OptionalGroup_extension_lite ()


@end


@implementation OptionalGroup_extension_lite

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (OptionalGroup_extension_lite *)parseFromData:(NSData *)data
{
  return (OptionalGroup_extension_lite *)[[[OptionalGroup_extension_lite builder] mergeFromData:data] build];
}

+ (OptionalGroup_extension_lite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension_lite *)parseFromInputStream:(NSInputStream *)input
{
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromInputStream:input] build];
}

+ (OptionalGroup_extension_lite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension_lite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[OptionalGroup_extension_lite builder] mergeFromCodedInputStream:input] build];
}

+ (OptionalGroup_extension_lite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[OptionalGroup_extension_lite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (OptionalGroup_extension_lite_Builder *)builder
{
  return [[OptionalGroup_extension_lite_Builder alloc] init];
}

+ (OptionalGroup_extension_lite_Builder *)builderWithPrototype:(OptionalGroup_extension_lite *)prototype
{
  return [[OptionalGroup_extension_lite builder] mergeFrom:prototype];
}

- (OptionalGroup_extension_lite_Builder *)builder
{
  return [OptionalGroup_extension_lite builder];
}

- (OptionalGroup_extension_lite_Builder *)toBuilder
{
  return [OptionalGroup_extension_lite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OptionalGroup_extension_lite class]]) {
    return NO;
  }
  OptionalGroup_extension_lite *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface OptionalGroup_extension_lite_Builder()

@property (strong) OptionalGroup_extension_lite *result;

@end


@implementation OptionalGroup_extension_lite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[OptionalGroup_extension_lite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (OptionalGroup_extension_lite_Builder *)clear
{
  self.result = [[OptionalGroup_extension_lite alloc] init];
  return self;
}

- (OptionalGroup_extension_lite_Builder *)clone
{
  return [OptionalGroup_extension_lite builderWithPrototype:_result];
}

- (OptionalGroup_extension_lite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (OptionalGroup_extension_lite *)buildPartial
{
  OptionalGroup_extension_lite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (OptionalGroup_extension_lite_Builder *)mergeFrom:(OptionalGroup_extension_lite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (OptionalGroup_extension_lite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (OptionalGroup_extension_lite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (OptionalGroup_extension_lite_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (OptionalGroup_extension_lite_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface RepeatedGroup_extension_lite ()


@end


@implementation RepeatedGroup_extension_lite

- (BOOL)hasA
{
  return _hasA;
}

- (void)setA:(int32_t)value
{
  _hasA = YES;
  _a = value;
}

- (void)clearA
{
  _hasA = NO;
  _a = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _a = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (RepeatedGroup_extension_lite *)parseFromData:(NSData *)data
{
  return (RepeatedGroup_extension_lite *)[[[RepeatedGroup_extension_lite builder] mergeFromData:data] build];
}

+ (RepeatedGroup_extension_lite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension_lite *)parseFromInputStream:(NSInputStream *)input
{
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromInputStream:input] build];
}

+ (RepeatedGroup_extension_lite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension_lite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[RepeatedGroup_extension_lite builder] mergeFromCodedInputStream:input] build];
}

+ (RepeatedGroup_extension_lite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[RepeatedGroup_extension_lite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (RepeatedGroup_extension_lite_Builder *)builder
{
  return [[RepeatedGroup_extension_lite_Builder alloc] init];
}

+ (RepeatedGroup_extension_lite_Builder *)builderWithPrototype:(RepeatedGroup_extension_lite *)prototype
{
  return [[RepeatedGroup_extension_lite builder] mergeFrom:prototype];
}

- (RepeatedGroup_extension_lite_Builder *)builder
{
  return [RepeatedGroup_extension_lite builder];
}

- (RepeatedGroup_extension_lite_Builder *)toBuilder
{
  return [RepeatedGroup_extension_lite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RepeatedGroup_extension_lite class]]) {
    return NO;
  }
  RepeatedGroup_extension_lite *otherMessage = other;
  return
    (self.hasA == otherMessage.hasA && (!self.hasA || self.a == otherMessage.a)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface RepeatedGroup_extension_lite_Builder()

@property (strong) RepeatedGroup_extension_lite *result;

@end


@implementation RepeatedGroup_extension_lite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[RepeatedGroup_extension_lite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (RepeatedGroup_extension_lite_Builder *)clear
{
  self.result = [[RepeatedGroup_extension_lite alloc] init];
  return self;
}

- (RepeatedGroup_extension_lite_Builder *)clone
{
  return [RepeatedGroup_extension_lite builderWithPrototype:_result];
}

- (RepeatedGroup_extension_lite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (RepeatedGroup_extension_lite *)buildPartial
{
  RepeatedGroup_extension_lite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (RepeatedGroup_extension_lite_Builder *)mergeFrom:(RepeatedGroup_extension_lite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (RepeatedGroup_extension_lite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (RepeatedGroup_extension_lite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasA
{
  return _result.hasA;
}

- (int32_t)a
{
  return _result.a;
}

- (RepeatedGroup_extension_lite_Builder*)setA:(int32_t)value
{
  _result.a = value;
  return self;
}

- (RepeatedGroup_extension_lite_Builder*)clearA
{
  [_result clearA];
  return self;
}

@end


@interface TestPackedExtensionsLite ()


@end


@implementation TestPackedExtensionsLite

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

- (BOOL)isInitialized
{
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self writeExtensionsToCodedOutputStream:output from:1 to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestPackedExtensionsLite *)parseFromData:(NSData *)data
{
  return (TestPackedExtensionsLite *)[[[TestPackedExtensionsLite builder] mergeFromData:data] build];
}

+ (TestPackedExtensionsLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensionsLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromInputStream:input] build];
}

+ (TestPackedExtensionsLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensionsLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestPackedExtensionsLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestPackedExtensionsLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestPackedExtensionsLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestPackedExtensionsLite_Builder *)builder
{
  return [[TestPackedExtensionsLite_Builder alloc] init];
}

+ (TestPackedExtensionsLite_Builder *)builderWithPrototype:(TestPackedExtensionsLite *)prototype
{
  return [[TestPackedExtensionsLite builder] mergeFrom:prototype];
}

- (TestPackedExtensionsLite_Builder *)builder
{
  return [TestPackedExtensionsLite builder];
}

- (TestPackedExtensionsLite_Builder *)toBuilder
{
  return [TestPackedExtensionsLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output from:1 to:536870912 withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedExtensionsLite class]]) {
    return NO;
  }
  TestPackedExtensionsLite *otherMessage = other;
  return
    [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestPackedExtensionsLite_Builder()

@property (strong) TestPackedExtensionsLite *result;

@end


@implementation TestPackedExtensionsLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestPackedExtensionsLite alloc] init];
  }
  return self;
}

- (PBExtendableMessage *)internalGetResult
{
  return _result;
}

- (TestPackedExtensionsLite_Builder *)clear
{
  self.result = [[TestPackedExtensionsLite alloc] init];
  return self;
}

- (TestPackedExtensionsLite_Builder *)clone
{
  return [TestPackedExtensionsLite builderWithPrototype:_result];
}

- (TestPackedExtensionsLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestPackedExtensionsLite *)buildPartial
{
  TestPackedExtensionsLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestPackedExtensionsLite_Builder *)mergeFrom:(TestPackedExtensionsLite *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestPackedExtensionsLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestPackedExtensionsLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestNestedExtensionLite ()


@end


@implementation TestNestedExtensionLite

- (instancetype)init
{
  if ((self = [super init])) {
  }
  return self;
}

+ (id<PBExtensionField>)nestedExtension
{
  return TestNestedExtensionLite_nestedExtension;
}
- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestNestedExtensionLite *)parseFromData:(NSData *)data
{
  return (TestNestedExtensionLite *)[[[TestNestedExtensionLite builder] mergeFromData:data] build];
}

+ (TestNestedExtensionLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtensionLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromInputStream:input] build];
}

+ (TestNestedExtensionLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtensionLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestNestedExtensionLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestNestedExtensionLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestNestedExtensionLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestNestedExtensionLite_Builder *)builder
{
  return [[TestNestedExtensionLite_Builder alloc] init];
}

+ (TestNestedExtensionLite_Builder *)builderWithPrototype:(TestNestedExtensionLite *)prototype
{
  return [[TestNestedExtensionLite builder] mergeFrom:prototype];
}

- (TestNestedExtensionLite_Builder *)builder
{
  return [TestNestedExtensionLite builder];
}

- (TestNestedExtensionLite_Builder *)toBuilder
{
  return [TestNestedExtensionLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedExtensionLite class]]) {
    return NO;
  }
  TestNestedExtensionLite *otherMessage = other;
  return
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestNestedExtensionLite_Builder()

@property (strong) TestNestedExtensionLite *result;

@end


@implementation TestNestedExtensionLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestNestedExtensionLite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestNestedExtensionLite_Builder *)clear
{
  self.result = [[TestNestedExtensionLite alloc] init];
  return self;
}

- (TestNestedExtensionLite_Builder *)clone
{
  return [TestNestedExtensionLite builderWithPrototype:_result];
}

- (TestNestedExtensionLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestNestedExtensionLite *)buildPartial
{
  TestNestedExtensionLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestNestedExtensionLite_Builder *)mergeFrom:(TestNestedExtensionLite *)other
{
  if (other == nil) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestNestedExtensionLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestNestedExtensionLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


@interface TestDeprecatedLite ()


@end


@implementation TestDeprecatedLite

- (BOOL)hasDeprecatedField
{
  return _hasDeprecatedField;
}

- (void)setDeprecatedField:(int32_t)value
{
  _hasDeprecatedField = YES;
  _deprecatedField = value;
}

- (void)clearDeprecatedField
{
  _hasDeprecatedField = NO;
  _deprecatedField = 0;
}

- (instancetype)init
{
  if ((self = [super init])) {
    _deprecatedField = 0;
  }
  return self;
}

- (BOOL)isInitialized
{
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream *)output
{
  if (self.hasDeprecatedField) {
    [output writeInt32:1 value:self.deprecatedField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize
{
  int32_t size_ = 0;
  if (self.hasDeprecatedField) {
    size_ += computeInt32Size(1, self.deprecatedField);
  }
  size_ += self.unknownFields.serializedSize;
  return size_;
}

+ (TestDeprecatedLite *)parseFromData:(NSData *)data
{
  return (TestDeprecatedLite *)[[[TestDeprecatedLite builder] mergeFromData:data] build];
}

+ (TestDeprecatedLite *)parseFromData:(NSData *)data extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedLite *)parseFromInputStream:(NSInputStream *)input
{
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromInputStream:input] build];
}

+ (TestDeprecatedLite *)parseFromInputStream:(NSInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedLite *)parseFromCodedInputStream:(PBCodedInputStream *)input
{
  return [[[TestDeprecatedLite builder] mergeFromCodedInputStream:input] build];
}

+ (TestDeprecatedLite *)parseFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry *)extensionRegistry
{
  return [[[TestDeprecatedLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}

+ (TestDeprecatedLite_Builder *)builder
{
  return [[TestDeprecatedLite_Builder alloc] init];
}

+ (TestDeprecatedLite_Builder *)builderWithPrototype:(TestDeprecatedLite *)prototype
{
  return [[TestDeprecatedLite builder] mergeFrom:prototype];
}

- (TestDeprecatedLite_Builder *)builder
{
  return [TestDeprecatedLite builder];
}

- (TestDeprecatedLite_Builder *)toBuilder
{
  return [TestDeprecatedLite builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString *)output withIndent:(NSString *)indent
{
  if (self.hasDeprecatedField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deprecatedField", @(self.deprecatedField)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other
{
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDeprecatedLite class]]) {
    return NO;
  }
  TestDeprecatedLite *otherMessage = other;
  return
    (self.hasDeprecatedField == otherMessage.hasDeprecatedField && (!self.hasDeprecatedField || self.deprecatedField == otherMessage.deprecatedField)) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash
{
  NSUInteger hashCode = 7;
  if (self.hasDeprecatedField) {
    hashCode = hashCode * 31 + [@(self.deprecatedField) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@interface TestDeprecatedLite_Builder()

@property (strong) TestDeprecatedLite *result;

@end


@implementation TestDeprecatedLite_Builder

- (instancetype)init
{
  if ((self = [super init])) {
    self.result = [[TestDeprecatedLite alloc] init];
  }
  return self;
}

- (PBGeneratedMessage *)internalGetResult
{
  return _result;
}

- (TestDeprecatedLite_Builder *)clear
{
  self.result = [[TestDeprecatedLite alloc] init];
  return self;
}

- (TestDeprecatedLite_Builder *)clone
{
  return [TestDeprecatedLite builderWithPrototype:_result];
}

- (TestDeprecatedLite *)build
{
  [self checkInitialized];
  return [self buildPartial];
}

- (TestDeprecatedLite *)buildPartial
{
  TestDeprecatedLite *returnMe = _result;
  self.result = nil;
  return returnMe;
}

- (TestDeprecatedLite_Builder *)mergeFrom:(TestDeprecatedLite *)other
{
  if (other == nil) {
    return self;
  }
  if (other.hasDeprecatedField) {
    [self setDeprecatedField:other.deprecatedField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (TestDeprecatedLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input
{
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}

- (TestDeprecatedLite_Builder *)mergeFromCodedInputStream:(PBCodedInputStream *)input extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder *unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeprecatedField:[input readInt32]];
        break;
      }
    }
  }
}

- (BOOL)hasDeprecatedField
{
  return _result.hasDeprecatedField;
}

- (int32_t)deprecatedField
{
  return _result.deprecatedField;
}

- (TestDeprecatedLite_Builder*)setDeprecatedField:(int32_t)value
{
  _result.deprecatedField = value;
  return self;
}

- (TestDeprecatedLite_Builder*)clearDeprecatedField
{
  [_result clearDeprecatedField];
  return self;
}

@end


